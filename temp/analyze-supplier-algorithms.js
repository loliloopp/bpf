// –ê–Ω–∞–ª–∏–∑ —Ä–∞–±–æ—Ç—ã –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –ø–æ–∏—Å–∫–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö
import { createClient } from '@supabase/supabase-js'

const supabaseUrl = 'https://hfqgcaxmufzitdfafdlp.supabase.co'
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImhmcWdjYXhtdWZ6aXRkZmFmZGxwIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ4OTI5MjMsImV4cCI6MjA3MDQ2ODkyM30.XnOEKdwZdJM-DilhrjZ7PdzHU2rx3L72oQ1rJYo5pXc'

const supabase = createClient(supabaseUrl, supabaseKey)

// –¢–µ—Å—Ç–æ–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
const TEST_MATERIALS = [
  {
    name: '–ø–µ–Ω–æ–ø–ª—ç–∫—Å',
    type: 'simple',
    description: '–ü—Ä–æ—Å—Ç–æ–π –º–∞—Ç–µ—Ä–∏–∞–ª, –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º–∏ 1-2'
  },
  {
    name: '–ö—Ä–∞–Ω —à–∞—Ä–æ–≤–æ–π —Ä–µ–∑—å–±–æ–≤–æ–π BVR-R DN32 BVR-R DN32 065B8310R –†–∏–¥–∞–Ω',
    type: 'complex',
    description: '–°–ª–æ–∂–Ω—ã–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª —Å –∞—Ä—Ç–∏–∫—É–ª–∞–º–∏, —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º 3'
  }
]

// –ê–ª–≥–æ—Ä–∏—Ç–º 1: –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ (–∞–Ω–∞–ª–æ–≥ searchMaterialInSuppliers)
async function algorithm1_SimpleSearch(materialName) {
  console.log(`\nüîç –ê–õ–ì–û–†–ò–¢–ú 1: –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –¥–ª—è "${materialName}"`)

  const cleanedName = materialName.trim().toLowerCase()
  const results = []

  try {
    // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    const { data: exactMatch, error: exactError } = await supabase
      .from('supplier_names')
      .select('id, name')
      .ilike('name', cleanedName)
      .limit(1)

    if (!exactError && exactMatch && exactMatch.length > 0) {
      console.log('  ‚úÖ –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ:', exactMatch.length)
      results.push(...exactMatch.map(item => ({ ...item, strategy: 'exact', confidence: 1.0 })))
    } else {
      console.log('  ‚ùå –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
    }

    // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: –ü–æ–∏—Å–∫ –ø–æ –Ω–∞—á–∞–ª—É
    const { data: startsWith, error: startsError } = await supabase
      .from('supplier_names')
      .select('id, name')
      .ilike('name', `${cleanedName}%`)
      .limit(3)

    if (!startsError && startsWith && startsWith.length > 0) {
      console.log('  ‚úÖ –ü–æ–∏—Å–∫ –ø–æ –Ω–∞—á–∞–ª—É –Ω–∞–π–¥–µ–Ω:', startsWith.length)
      results.push(...startsWith.map(item => ({ ...item, strategy: 'starts_with', confidence: 0.8 })))
    } else {
      console.log('  ‚ùå –ü–æ–∏—Å–∫ –ø–æ –Ω–∞—á–∞–ª—É –Ω–µ –Ω–∞–π–¥–µ–Ω')
    }

    // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 3: –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    const keywords = cleanedName
      .replace(/[^\w\s–∞-—è—ë]/g, ' ')
      .split(/\s+/)
      .filter(word => word.length >= 3)
      .filter(word => !['–¥–ª—è', '–ø—Ä–∏', '–ø–æ–¥', '–Ω–∞–¥', '–±–µ–∑', '–ø—Ä–æ', '–∏–ª–∏'].includes(word))

    console.log('  üìù –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:', keywords)

    if (keywords.length > 0) {
      for (const keyword of keywords) {
        const { data: keywordMatch, error: keywordError } = await supabase
          .from('supplier_names')
          .select('id, name')
          .ilike('name', `%${keyword}%`)
          .limit(5)

        if (!keywordError && keywordMatch && keywordMatch.length > 0) {
          console.log(`  ‚úÖ –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É "${keyword}":`, keywordMatch.length)

          // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
          const relevantResults = keywordMatch.filter(item => {
            const itemLower = item.name.toLowerCase()
            const matchingKeywords = keywords.filter(kw => itemLower.includes(kw))
            return matchingKeywords.length >= Math.min(2, keywords.length)
          })

          results.push(...relevantResults.map(item => ({ ...item, strategy: 'keyword', confidence: 0.6 })))
          break // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        }
      }
    }

    return results.slice(0, 10) // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  } catch (error) {
    console.error('  ‚ùå –û—à–∏–±–∫–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ 1:', error.message)
    return []
  }
}

// –ê–ª–≥–æ—Ä–∏—Ç–º 2: –í–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ (–∞–Ω–∞–ª–æ–≥ vectorSearchSupplierNames)
async function algorithm2_VectorSearch(materialName) {
  console.log(`\nüîç –ê–õ–ì–û–†–ò–¢–ú 2: –í–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –¥–ª—è "${materialName}"`)

  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    const { data, error } = await supabase
      .from('supplier_names')
      .select('id, name')
      .limit(1000)

    if (error) {
      console.error('  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error.message)
      return []
    }

    if (!data || data.length === 0) {
      console.log('  ‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ')
      return []
    }

    console.log(`  üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º ${data.length} –∑–∞–ø–∏—Å–µ–π`)

    const searchTerms = materialName.toLowerCase().split(/\s+/)
    console.log('  üìù –ü–æ–∏—Å–∫–æ–≤—ã–µ —Ç–µ—Ä–º–∏–Ω—ã:', searchTerms)

    const results = data
      .map(item => {
        const itemName = item.name.toLowerCase()
        let confidence = 0

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º confidence
        searchTerms.forEach(term => {
          if (itemName.includes(term)) {
            confidence += 0.3
          }
          if (itemName.startsWith(term)) {
            confidence += 0.2
          }
          if (itemName.endsWith(term)) {
            confidence += 0.1
          }
        })

        // –ë–æ–Ω—É—Å –∑–∞ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if (itemName === materialName.toLowerCase()) {
          confidence = 1.0
        }

        return {
          id: item.id,
          name: item.name,
          confidence: Math.min(confidence, 1.0),
          strategy: 'vector'
        }
      })
      .filter(item => item.confidence > 0.1)
      .sort((a, b) => b.confidence - a.confidence)
      .slice(0, 20)

    console.log(`  ‚úÖ –ù–∞–π–¥–µ–Ω–æ ${results.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å confidence > 0.1`)
    if (results.length > 0) {
      console.log(`  üìà –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: "${results[0].name}" (confidence: ${results[0].confidence})`)
    }

    return results
  } catch (error) {
    console.error('  ‚ùå –û—à–∏–±–∫–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ 2:', error.message)
    return []
  }
}

// –ê–ª–≥–æ—Ä–∏—Ç–º 3: –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ (–∞–Ω–∞–ª–æ–≥ keywordSearchSupplierNames)
async function algorithm3_SemanticSearch(materialName) {
  console.log(`\nüîç –ê–õ–ì–û–†–ò–¢–ú 3: –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –¥–ª—è "${materialName}"`)

  try {
    // –°–ª–æ–≤–∞—Ä—å —Å–∏–Ω–æ–Ω–∏–º–æ–≤
    const synonyms = {
      '—Ç–µ–ø–ª–æ–∏–∑–æ–ª—è—Ü–∏—è': ['—É—Ç–µ–ø–ª–∏—Ç–µ–ª—å', '–∏–∑–æ–ª—è—Ü–∏—è', '—Ç–µ—Ä–º–æ–∏–∑–æ–ª—è—Ü–∏—è', '—Ç–µ–ø–ª–æ–∏–∑–æ–ª—è—Ç–æ—Ä'],
      '–º–∏–Ω–µ—Ä–∞–ª—å–Ω–∞—è': ['–º–∏–Ω–≤–∞—Ç–∞', '–∫–∞–º–µ–Ω–Ω–∞—è', '–±–∞–∑–∞–ª—å—Ç–æ–≤–∞—è', '—Å—Ç–µ–∫–ª–æ–≤–∞—Ç–∞'],
      '–ø–ª–∏—Ç–∞': ['–ø–ª–∏—Ç—ã', '–ª–∏—Å—Ç—ã', '–ø–∞–Ω–µ–ª–∏', '–±–ª–æ–∫–∏'],
      '–∫—Ä–∞–Ω': ['–∫—Ä–∞–Ω', '–≤–µ–Ω—Ç–∏–ª—å', '–∑–∞—Ç–≤–æ—Ä', '–∫–ª–∞–ø–∞–Ω'],
      '—à–∞—Ä–æ–≤–æ–π': ['—à–∞—Ä–æ–≤—ã–π', 'ball', '—Å—Ñ–µ—Ä–∏—á–µ—Å–∫–∏–π'],
      '—Ä–µ–∑—å–±–æ–≤–æ–π': ['—Ä–µ–∑—å–±–æ–≤—ã–π', 'threaded', '–Ω–∞ —Ä–µ–∑—å–±–µ']
    }

    const technicalTerms = {
      'dn32': ['–¥—É32', '32–º–º', '–¥–∏–∞–º–µ—Ç—Ä32'],
      'bvr': ['–±–≤—Ä', '–±–∏–≤–∏–∞—Ä'],
      '—Ä–∏–¥–∞–Ω': ['ridd–∞–Ω', 'ridan', 'ridaan']
    }

    const processedQuery = materialName.toLowerCase()
      .replace(/[^\w–∞-—è—ë\s]/g, ' ')
      .replace(/\s+/g, ' ')
      .trim()

    console.log('  üìù –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å:', processedQuery)

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ç–µ—Ä–º–∏–Ω—ã
    const originalKeywords = processedQuery
      .split(/\s+/)
      .filter(word => word.length >= 2)
      .filter(word => !['–º–º', '—Å–º', '–º', '–∫–≥', '—à—Ç', '—Ç', '–≥—Ä', '–ª', '–º2', '–º3'].includes(word))

    console.log('  üìù –ò—Å—Ö–æ–¥–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:', originalKeywords)

    // –†–∞—Å—à–∏—Ä—è–µ–º —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏
    const expandedKeywords = new Set()
    originalKeywords.forEach(keyword => {
      expandedKeywords.add(keyword)

      if (synonyms[keyword]) {
        synonyms[keyword].forEach(synonym => expandedKeywords.add(synonym))
      }

      if (technicalTerms[keyword]) {
        technicalTerms[keyword].forEach(term => expandedKeywords.add(term))
      }

      // –ú–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
      if (keyword.endsWith('—ã–π') || keyword.endsWith('–æ–π')) {
        expandedKeywords.add(keyword.slice(0, -2))
      }
      if (keyword.endsWith('–∞—è') || keyword.endsWith('—è—è')) {
        expandedKeywords.add(keyword.slice(0, -2))
      }
    })

    const allKeywords = Array.from(expandedKeywords)
    console.log('  üìù –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:', allKeywords)

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    const { data, error } = await supabase
      .from('supplier_names')
      .select('id, name')
      .limit(2000)

    if (error) {
      console.error('  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error.message)
      return []
    }

    if (!data || data.length === 0) {
      console.log('  ‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ')
      return []
    }

    console.log(`  üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º ${data.length} –∑–∞–ø–∏—Å–µ–π`)

    // –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    const results = data
      .map(item => {
        const itemName = item.name.toLowerCase()
        const itemWords = itemName.split(/\s+/)

        let relevanceScore = 0
        const matchedKeywords = []
        let matchType = 'partial'

        // –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ñ—Ä–∞–∑—ã
        if (itemName.includes(processedQuery)) {
          relevanceScore += 10
          matchType = 'exact'
          matchedKeywords.push('—Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ')
        }

        // –ê–Ω–∞–ª–∏–∑ –ø–æ —Å–ª–æ–≤–∞–º
        originalKeywords.forEach(keyword => {
          if (itemName.includes(keyword)) {
            relevanceScore += 3
            matchedKeywords.push(keyword)

            if (itemName.startsWith(keyword)) {
              relevanceScore += 1
            }

            if (itemWords.includes(keyword)) {
              relevanceScore += 1
            }
          }
        })

        // –°–∏–Ω–æ–Ω–∏–º—ã
        allKeywords.forEach(keyword => {
          if (!originalKeywords.includes(keyword) && itemName.includes(keyword)) {
            relevanceScore += 1.5
            if (!matchedKeywords.includes(keyword)) {
              matchedKeywords.push(`${keyword} (—Å–∏–Ω–æ–Ω–∏–º)`)
            }
          }
        })

        // –ë–æ–Ω—É—Å –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
        const matchRatio = matchedKeywords.length / originalKeywords.length
        relevanceScore += matchRatio * 2

        // –®—Ç—Ä–∞—Ñ –∑–∞ –¥–ª–∏–Ω—É
        const lengthPenalty = Math.max(0, (itemName.length - 50) / 100)
        relevanceScore -= lengthPenalty

        return {
          id: item.id,
          name: item.name,
          matchedKeywords,
          relevanceScore,
          matchType,
          strategy: 'semantic'
        }
      })
      .filter(item => item.relevanceScore > 0.5)
      .sort((a, b) => {
        if (a.matchType === 'exact' && b.matchType !== 'exact') return -1
        if (b.matchType === 'exact' && a.matchType !== 'exact') return 1
        return b.relevanceScore - a.relevanceScore
      })
      .slice(0, 20)

    console.log(`  ‚úÖ –ù–∞–π–¥–µ–Ω–æ ${results.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å relevanceScore > 0.5`)
    if (results.length > 0) {
      console.log(`  üìà –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: "${results[0].name}" (score: ${results[0].relevanceScore})`)
      console.log(`  üéØ –°–æ–≤–ø–∞–≤—à–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: ${results[0].matchedKeywords.join(', ')}`)
    }

    return results.map(item => ({
      id: item.id,
      name: item.name,
      confidence: Math.round(item.relevanceScore * 10) / 10,
      strategy: item.strategy,
      matchedKeywords: item.matchedKeywords,
      matchType: item.matchType
    }))

  } catch (error) {
    console.error('  ‚ùå –û—à–∏–±–∫–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ 3:', error.message)
    return []
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞
async function analyzeAlgorithms() {
  console.log('üöÄ –ê–ù–ê–õ–ò–ó –ê–õ–ì–û–†–ò–¢–ú–û–í –ü–û–ò–°–ö–ê –ü–û–°–¢–ê–í–©–ò–ö–û–í')
  console.log('=' .repeat(60))

  // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
  console.log('\nüìä –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –î–ê–ù–ù–´–• –í SUPPLIER_NAMES')
  try {
    const { data: totalCount, error: countError } = await supabase
      .from('supplier_names')
      .select('*', { count: 'exact', head: true })

    if (countError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –∑–∞–ø–∏—Å–µ–π:', countError.message)
    } else {
      console.log(`üìà –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: ${totalCount}`)
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–µ–π
    const { data: samples, error: samplesError } = await supabase
      .from('supplier_names')
      .select('name')
      .limit(10)

    if (!samplesError && samples) {
      console.log('\nüìù –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ:')
      samples.forEach((item, index) => {
        console.log(`  ${index + 1}. ${item.name}`)
      })
    }

    // –ü–æ–∏—Å–∫ –∑–∞–ø–∏—Å–µ–π —Å "–ø–µ–Ω–æ–ø–ª—ç–∫—Å"
    const { data: penoplexSamples } = await supabase
      .from('supplier_names')
      .select('name')
      .ilike('name', '%–ø–µ–Ω–æ–ø–ª—ç–∫—Å%')
      .limit(5)

    if (penoplexSamples && penoplexSamples.length > 0) {
      console.log('\nüîç –ó–∞–ø–∏—Å–∏ —Å "–ø–µ–Ω–æ–ø–ª—ç–∫—Å":')
      penoplexSamples.forEach((item, index) => {
        console.log(`  ${index + 1}. ${item.name}`)
      })
    }

    // –ü–æ–∏—Å–∫ –∑–∞–ø–∏—Å–µ–π —Å "–∫—Ä–∞–Ω"
    const { data: kranSamples } = await supabase
      .from('supplier_names')
      .select('name')
      .ilike('name', '%–∫—Ä–∞–Ω%')
      .limit(5)

    if (kranSamples && kranSamples.length > 0) {
      console.log('\nüîç –ó–∞–ø–∏—Å–∏ —Å "–∫—Ä–∞–Ω":')
      kranSamples.forEach((item, index) => {
        console.log(`  ${index + 1}. ${item.name}`)
      })
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:', error.message)
  }

  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª
  for (const material of TEST_MATERIALS) {
    console.log('\n' + '='.repeat(60))
    console.log(`üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–ê–¢–ï–†–ò–ê–õ–ê: "${material.name}"`)
    console.log(`üìù –¢–∏–ø: ${material.type}`)
    console.log(`üìã –û–ø–∏—Å–∞–Ω–∏–µ: ${material.description}`)

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã
    const results1 = await algorithm1_SimpleSearch(material.name)
    const results2 = await algorithm2_VectorSearch(material.name)
    const results3 = await algorithm3_SemanticSearch(material.name)

    console.log('\nüìä –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:')
    console.log(`  –ê–ª–≥–æ—Ä–∏—Ç–º 1 (–ü—Ä–æ—Å—Ç–æ–π): ${results1.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`)
    console.log(`  –ê–ª–≥–æ—Ä–∏—Ç–º 2 (–í–µ–∫—Ç–æ—Ä–Ω—ã–π): ${results2.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`)
    console.log(`  –ê–ª–≥–æ—Ä–∏—Ç–º 3 (–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π): ${results3.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`)

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-3 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
    if (results1.length > 0) {
      console.log('\nü•á –¢–û–ü-3 –ê–ª–≥–æ—Ä–∏—Ç–º 1:')
      results1.slice(0, 3).forEach((result, index) => {
        console.log(`  ${index + 1}. ${result.name} (${result.strategy}, confidence: ${result.confidence})`)
      })
    }

    if (results2.length > 0) {
      console.log('\nü•à –¢–û–ü-3 –ê–ª–≥–æ—Ä–∏—Ç–º 2:')
      results2.slice(0, 3).forEach((result, index) => {
        console.log(`  ${index + 1}. ${result.name} (confidence: ${result.confidence})`)
      })
    }

    if (results3.length > 0) {
      console.log('\nü•â –¢–û–ü-3 –ê–ª–≥–æ—Ä–∏—Ç–º 3:')
      results3.slice(0, 3).forEach((result, index) => {
        console.log(`  ${index + 1}. ${result.name} (confidence: ${result.confidence}, type: ${result.matchType})`)
        if (result.matchedKeywords && result.matchedKeywords.length > 0) {
          console.log(`      üéØ –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: ${result.matchedKeywords.join(', ')}`)
        }
      })
    }
  }

  console.log('\n' + '='.repeat(60))
  console.log('üéØ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù')
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
analyzeAlgorithms().catch(console.error)
import { createClient } from '@supabase/supabase-js';

const supabaseUrl = 'https://hfqgcaxmufzitdfafdlp.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImhmcWdjYXhtdWZ6aXRkZmFmZGxwIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ4OTI5MjMsImV4cCI6MjA3MDQ2ODkyM30.XnOEKdwZdJM-DilhrjZ7PdzHU2rx3L72oQ1rJYo5pXc';

const supabase = createClient(supabaseUrl, supabaseKey);

async function checkEnumTypeBlocks() {
  try {
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase');

    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ blocks
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã blocks...');
    const { data: blocksData, error: blocksError } = await supabase
      .from('blocks')
      .select('*')
      .limit(3);

    if (blocksError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ blocks:', blocksError);
      return;
    }

    if (blocksData && blocksData.length > 0) {
      console.log('‚úÖ –ù–∞–π–¥–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ blocks:');
      console.log('–ö–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ:', Object.keys(blocksData[0]));
      console.log('\n–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–µ–π:');
      blocksData.forEach((block, index) => {
        console.log(`${index + 1}.`, block);
      });
    } else {
      console.log('‚ÑπÔ∏è –¢–∞–±–ª–∏—Ü–∞ blocks –ø—É—Å—Ç–∞');
    }

    // –ü–æ–ø—Ä–æ–±—É–µ–º –≤—Å—Ç–∞–≤–∏—Ç—å —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º –∫–æ–ª–æ–Ω–∫–∏
    await testBlockInsertion();

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    console.error('–î–µ—Ç–∞–ª–∏:', error);
  }
}

async function testBlockInsertion() {
  console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å—Ç–∞–≤–∫–∏ –∑–∞–ø–∏—Å–∏ —Å –Ω–æ–≤—ã–º —Ç–∏–ø–æ–º...');

  try {
    // –¢–µ—Å—Ç–æ–≤–∞—è –≤—Å—Ç–∞–≤–∫–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º –∫–æ–ª–æ–Ω–∫–∏
    const { data: insertData, error: insertError } = await supabase
      .from('blocks')
      .insert([{
        name: '–¢–µ—Å—Ç–æ–≤—ã–π –±–ª–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ ENUM',
        type_blocks: '–¢–∏–ø–æ–≤–æ–π –∫–æ—Ä–ø—É—Å.–¢–µ—Ö.—ç—Ç–∞–∂'
      }])
      .select()
      .single();

    if (insertError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏:', insertError);
      return;
    }

    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –≤—Å—Ç–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞:');
    console.log(insertData);

    // –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
    const { error: deleteError } = await supabase
      .from('blocks')
      .delete()
      .eq('id', insertData.id);

    if (deleteError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', deleteError);
    } else {
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞');
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
  }
}

checkEnumTypeBlocks();
// –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∑–∞—Ç—Ä–∞—Ç
import { createClient } from '@supabase/supabase-js'

const supabaseUrl = 'https://hfqgcaxmufzitdfafdlp.supabase.co'
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImhmcWdjYXhtdWZ6aXRkZmFmZGxwIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ4OTI5MjMsImV4cCI6MjA3MDQ2ODkyM30.XnOEKdwZdJM-DilhrjZ7PdzHU2rx3L72oQ1rJYo5pXc'
const supabase = createClient(supabaseUrl, supabaseKey)

const projectId = 'f9227acf-9446-42c8-a533-bfeb30fa07a4' // –ü—Ä–∏–º–µ–≤–∞—Ä–∞ 14

async function debugCostCategoryFilter() {
  console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∑–∞—Ç—Ä–∞—Ç...')

  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –ê–† –∏ –ü–û–° (–∫–∞–∫ –≤ –ª–æ–≥–∞—Ö)
    const { data: arTags } = await supabase
      .from('documentation_tags')
      .select('id, name')
      .in('name', ['–ê–†', '–ü–û–° / –ö–æ—Ç–ª–æ–≤–∞–Ω / –ì–ò'])

    if (!arTags || arTags.length === 0) {
      console.log('‚ùå –†–∞–∑–¥–µ–ª—ã –ê–†/–ü–û–° –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
      return
    }

    const sectionIds = arTags.map(t => t.id)
    console.log(`‚úÖ –†–∞–∑–¥–µ–ª—ã –Ω–∞–π–¥–µ–Ω—ã: ${arTags.map(t => t.name).join(', ')}`)

    // 2. –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –ø–æ–ª—É—á–µ–Ω–∏–µ chessboard_ids —á–µ—Ä–µ–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é (–∫–∞–∫ –≤ –ª–æ–≥–∞—Ö)
    console.log('\nüîß –®–∞–≥ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ chessboard_ids —á–µ—Ä–µ–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é...')
    const { data: docIds } = await supabase
      .from('chessboard_documentation_mapping')
      .select(`
        chessboard_id,
        chessboard!inner(project_id),
        documentation_versions!inner(
          documentation_id,
          documentations!inner(
            id, code, tag_id,
            documentation_tags!inner(id, name)
          )
        )
      `)
      .eq('chessboard.project_id', projectId)
      .in('documentation_versions.documentations.tag_id', sectionIds)

    const chessboardIds = [...new Set(docIds?.map((d) => d.chessboard_id))]
    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${chessboardIds.length} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö chessboard_id —á–µ—Ä–µ–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é`)

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É —Å–∫–æ–ª—å–∫–∏—Ö –∏–∑ —ç—Ç–∏—Ö –∑–∞–ø–∏—Å–µ–π –ï–°–¢–¨ chessboard_mapping
    console.log('\nüîß –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è chessboard_mapping –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö ID...')
    const { data: mappingExists } = await supabase
      .from('chessboard_mapping')
      .select('chessboard_id, cost_category_id, cost_categories!inner(name)')
      .in('chessboard_id', chessboardIds.slice(0, 20)) // –ü–µ—Ä–≤—ã–µ 20 –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞

    console.log(`üìä –ò–∑ ${Math.min(chessboardIds.length, 20)} –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö chessboard_id:`)
    console.log(`   ${mappingExists?.length || 0} –∏–º–µ—é—Ç chessboard_mapping`)

    if (mappingExists && mappingExists.length > 0) {
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
      const categoryGroups = new Map()
      mappingExists.forEach(m => {
        const catName = m.cost_categories?.name || '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'
        if (!categoryGroups.has(catName)) {
          categoryGroups.set(catName, [])
        }
        categoryGroups.get(catName).push(m.chessboard_id)
      })

      console.log('\nüìã –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∑–∞—Ç—Ä–∞—Ç:')
      for (const [category, ids] of categoryGroups.entries()) {
        console.log(`   ${category}: ${ids.length} –∑–∞–ø–∏—Å–µ–π`)
      }
    } else {
      console.log('‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ù–∏ –æ–¥–Ω–∞ –∏–∑ –∑–∞–ø–∏—Å–µ–π –Ω–µ –∏–º–µ–µ—Ç chessboard_mapping!')
    }

    // 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é, –∫–∞–∫ –≤ –∫–æ–¥–µ –ø–æ—Ä—Ç–∞–ª–∞
    console.log('\nüîß –®–∞–≥ 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫–∞–∫ –≤ –ø–æ—Ä—Ç–∞–ª–µ...')

    // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    const { data: categories } = await supabase
      .from('cost_categories')
      .select('id, name')
      .limit(3)

    if (categories && categories.length > 0) {
      const testCategoryId = categories[0].id
      console.log(`üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π: "${categories[0].name}" (ID: ${testCategoryId})`)

      // –ó–∞–ø—Ä–æ—Å –∫–∞–∫ –≤ –ø–æ—Ä—Ç–∞–ª–µ - —Å INNER JOIN –Ω–∞ chessboard_mapping
      const { data: filteredResults } = await supabase
        .from('chessboard')
        .select(`
          id,
          material,
          chessboard_mapping!inner(
            cost_category_id,
            cost_categories!inner(name)
          )
        `)
        .eq('project_id', projectId)
        .in('id', chessboardIds)
        .eq('chessboard_mapping.cost_category_id', testCategoryId)

      console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: ${filteredResults?.length || 0} –∑–∞–ø–∏—Å–µ–π`)

      if ((filteredResults?.length || 0) === 0) {
        console.log('‚ö†Ô∏è –ü–†–ò–ß–ò–ù–ê: –£ –∑–∞–ø–∏—Å–µ–π –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –Ω–µ—Ç chessboard_mapping —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π')

        // –ü—Ä–æ–≤–µ—Ä–∏–º, –≤–æ–æ–±—â–µ –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å–∏ —Å —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π –≤ –ø—Ä–æ–µ–∫—Ç–µ
        const { data: allWithCategory } = await supabase
          .from('chessboard')
          .select(`
            id,
            material,
            chessboard_mapping!inner(cost_category_id)
          `)
          .eq('project_id', projectId)
          .eq('chessboard_mapping.cost_category_id', testCategoryId)

        console.log(`üìã –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π "${categories[0].name}" –≤ –ø—Ä–æ–µ–∫—Ç–µ: ${allWithCategory?.length || 0}`)
      } else {
        console.log('‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!')
      }
    }

  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error)
  }
}

debugCostCategoryFilter()
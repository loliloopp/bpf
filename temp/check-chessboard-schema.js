// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Å—Ö–µ–º—ã —Ç–∞–±–ª–∏—Ü—ã chessboard
import { createClient } from '@supabase/supabase-js'

const supabaseUrl = 'https://hfqgcaxmufzitdfafdlp.supabase.co'
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImhmcWdjYXhtdWZ6aXRkZmFmZGxwIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ4OTI5MjMsImV4cCI6MjA3MDQ2ODkyM30.XnOEKdwZdJM-DilhrjZ7PdzHU2rx3L72oQ1rJYo5pXc'
const supabase = createClient(supabaseUrl, supabaseKey)

async function checkSchema() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Å—Ö–µ–º—ã —Ç–∞–±–ª–∏—Ü—ã chessboard...')

  try {
    // –ü–æ–ª—É—á–∞–µ–º –æ–¥–Ω—É –∑–∞–ø–∏—Å—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    const { data, error } = await supabase
      .from('chessboard')
      .select('*')
      .limit(1)

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error)
      return
    }

    if (data && data.length > 0) {
      console.log('‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã chessboard:')
      const record = data[0]

      Object.keys(record).forEach(field => {
        const value = record[field]
        const type = typeof value
        console.log(`   ${field}: ${type} (${value === null ? 'NULL' : String(value).substring(0, 50)})`)
      })

      console.log('\nüìã JSON —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:')
      console.log(JSON.stringify(Object.keys(record), null, 2))
    } else {
      console.log('‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞, –ø–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —á–µ—Ä–µ–∑ describe')
    }

    // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä–∏–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü...')

    const tables = ['chessboard_mapping', 'chessboard_documentation_mapping', 'chessboard_floor_mapping', 'chessboard_rates_mapping']

    for (const table of tables) {
      try {
        const { data: tableData } = await supabase
          .from(table)
          .select('*')
          .limit(1)

        if (tableData && tableData.length > 0) {
          console.log(`\nüìä ${table}:`)
          Object.keys(tableData[0]).forEach(field => {
            console.log(`   ${field}`)
          })
        }
      } catch (e) {
        console.log(`‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ ${table} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞`)
      }
    }

  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ö–µ–º—ã:', error)
  }
}

checkSchema()
// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã materials
import { createClient } from '@supabase/supabase-js'

const supabaseUrl = 'https://hfqgcaxmufzitdfafdlp.supabase.co'
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImhmcWdjYXhtdWZ6aXRkZmFmZGxwIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ4OTI5MjMsImV4cCI6MjA3MDQ2ODkyM30.XnOEKdwZdJM-DilhrjZ7PdzHU2rx3L72oQ1rJYo5pXc'
const supabase = createClient(supabaseUrl, supabaseKey)

async function checkMaterialsSchema() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã materials...')

  try {
    // –ü–æ–ª—É—á–∞–µ–º –æ–¥–Ω—É –∑–∞–ø–∏—Å—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    const { data, error } = await supabase
      .from('materials')
      .select('*')
      .limit(1)

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ materials:', error)
      return
    }

    if (data && data.length > 0) {
      console.log('‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã materials:')
      const record = data[0]

      Object.keys(record).forEach(field => {
        const value = record[field]
        const type = typeof value
        console.log(`   ${field}: ${type} (${value === null ? 'NULL' : String(value).substring(0, 50)})`)
      })

      console.log('\nüìã –ü–æ–ª—è —Ç–∞–±–ª–∏—Ü—ã materials:')
      console.log(JSON.stringify(Object.keys(record), null, 2))
    } else {
      console.log('‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ materials –ø—É—Å—Ç–∞')
    }

    // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä–∏–º units
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã units...')

    const { data: unitsData, error: unitsError } = await supabase
      .from('units')
      .select('*')
      .limit(1)

    if (unitsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ units:', unitsError)
    } else if (unitsData && unitsData.length > 0) {
      console.log('‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã units:')
      const unitsRecord = unitsData[0]

      Object.keys(unitsRecord).forEach(field => {
        const value = unitsRecord[field]
        const type = typeof value
        console.log(`   ${field}: ${type} (${value === null ? 'NULL' : String(value).substring(0, 50)})`)
      })

      console.log('\nüìã –ü–æ–ª—è —Ç–∞–±–ª–∏—Ü—ã units:')
      console.log(JSON.stringify(Object.keys(unitsRecord), null, 2))
    }

    // –ü—Ä–æ–≤–µ—Ä–∏–º —Å–≤—è–∑—å chessboard -> materials
    console.log('\nüîó –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏ chessboard -> materials...')

    const { data: chessData, error: chessError } = await supabase
      .from('chessboard')
      .select('id, material')
      .limit(5)

    if (chessError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è chessboard –¥–∞–Ω–Ω—ã—Ö:', chessError)
    } else if (chessData && chessData.length > 0) {
      console.log('üìä –ü—Ä–∏–º–µ—Ä—ã –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ–ª—è material –≤ chessboard:')
      chessData.forEach((row, i) => {
        console.log(`   ${i + 1}. ${row.material} (—Ç–∏–ø: ${typeof row.material})`)
      })

      // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏ –≤ materials
      const materialIds = chessData.map(row => row.material)

      // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã JOIN
      const joinVariants = [
        { field: 'id', name: '–ø–æ id' },
        { field: 'uuid', name: '–ø–æ uuid' },
        { field: 'material_id', name: '–ø–æ material_id' },
        { field: 'guid', name: '–ø–æ guid' }
      ]

      for (const variant of joinVariants) {
        try {
          const { data: joinTest, error: joinError } = await supabase
            .from('materials')
            .select(`${variant.field}, name`)
            .in(variant.field, materialIds)
            .limit(3)

          if (!joinError && joinTest && joinTest.length > 0) {
            console.log(`‚úÖ –£—Å–ø–µ—à–Ω—ã–π JOIN ${variant.name}: –Ω–∞–π–¥–µ–Ω–æ ${joinTest.length} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π`)
            joinTest.forEach((row, i) => {
              console.log(`   ${i + 1}. ${row[variant.field]} -> ${row.name}`)
            })
          } else if (joinError) {
            console.log(`‚ùå JOIN ${variant.name} –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: ${joinError.message}`)
          } else {
            console.log(`‚ö†Ô∏è JOIN ${variant.name}: 0 —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π`)
          }
        } catch (e) {
          console.log(`‚ùå JOIN ${variant.name} –æ—à–∏–±–∫–∞: ${e.message}`)
        }
      }
    }

  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error)
  }
}

checkMaterialsSchema()
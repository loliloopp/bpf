// –£–≥–ª—É–±–ª–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–ø–∏—Å–µ–π –ö–ñ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è
import { createClient } from '@supabase/supabase-js'

const supabaseUrl = 'https://hfqgcaxmufzitdfafdlp.supabase.co'
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImhmcWdjYXhtdWZ6aXRkZmFmZGxwIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ4OTI5MjMsImV4cCI6MjA3MDQ2ODkyM30.XnOEKdwZdJM-DilhrjZ7PdzHU2rx3L72oQ1rJYo5pXc'
const supabase = createClient(supabaseUrl, supabaseKey)

const projectId = 'f9227acf-9446-42c8-a533-bfeb30fa07a4' // –ü—Ä–∏–º–µ–≤–∞—Ä–∞ 14

async function analyzeKJRecords() {
  console.log('üîç –£–≥–ª—É–±–ª–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–ø–∏—Å–µ–π –ö–ñ...')

  try {
    // 1. –ù–∞–π—Ç–∏ tag_id –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ –ö–ñ
    const { data: kjTags } = await supabase
      .from('documentation_tags')
      .select('id, name')
      .ilike('name', '%–ö–ñ%')

    const kjTagId = kjTags[0].id
    console.log(`‚úÖ –†–∞–∑–¥–µ–ª –ö–ñ: ID=${kjTagId}`)

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä—ã–π –ø–æ–¥—Ö–æ–¥ (–∫–æ—Ç–æ—Ä—ã–π –ø–æ–∫–∞–∑—ã–≤–∞–ª 13 –∑–∞–ø–∏—Å–µ–π)
    console.log('\nüìä –ê–ù–ê–õ–ò–ó 1: –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å chessboard —Å JOIN (—Å—Ç–∞—Ä—ã–π –ø–æ–¥—Ö–æ–¥)')
    const { data: directRecords } = await supabase
      .from('chessboard')
      .select(`
        id,
        material,
        chessboard_documentation_mapping!inner(
          documentation_versions!inner(
            documentations!inner(
              tag_id,
              documentation_tags!inner(name)
            )
          )
        )
      `)
      .eq('project_id', projectId)
      .eq('chessboard_documentation_mapping.documentation_versions.documentations.tag_id', kjTagId)

    console.log(`üìã –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –Ω–∞—à–µ–ª: ${directRecords?.length || 0} –∑–∞–ø–∏—Å–µ–π`)

    // 3. –ù–æ–≤—ã–π –ø–æ–¥—Ö–æ–¥ —á–µ—Ä–µ–∑ chessboard_documentation_mapping
    console.log('\nüìä –ê–ù–ê–õ–ò–ó 2: –ß–µ—Ä–µ–∑ chessboard_documentation_mapping (–Ω–æ–≤—ã–π –ø–æ–¥—Ö–æ–¥)')
    const { data: mappingRecords } = await supabase
      .from('chessboard_documentation_mapping')
      .select(`
        chessboard_id,
        chessboard!inner(project_id, material),
        documentation_versions!inner(
          documentation_id,
          documentations!inner(
            tag_id,
            code,
            documentation_tags!inner(name)
          )
        )
      `)
      .eq('chessboard.project_id', projectId)
      .eq('documentation_versions.documentations.tag_id', kjTagId)

    console.log(`üìã Mapping –∑–∞–ø—Ä–æ—Å –Ω–∞—à–µ–ª: ${mappingRecords?.length || 0} –∑–∞–ø–∏—Å–µ–π`)

    // 4. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–∏—è
    if (directRecords && mappingRecords) {
      const directIds = new Set(directRecords.map(r => r.id))
      const mappingIds = new Set(mappingRecords.map(r => r.chessboard_id))

      console.log('\nüîç –°–†–ê–í–ù–ï–ù–ò–ï –ü–û–î–•–û–î–û–í:')
      console.log(`–ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å: ${directIds.size} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID`)
      console.log(`Mapping –∑–∞–ø—Ä–æ—Å: ${mappingIds.size} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID`)

      // –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø–∏—Å–∏, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ mapping, –Ω–æ –Ω–µ—Ç –≤ direct
      const onlyInMapping = [...mappingIds].filter(id => !directIds.has(id))
      const onlyInDirect = [...directIds].filter(id => !mappingIds.has(id))

      console.log(`–¢–æ–ª—å–∫–æ –≤ mapping: ${onlyInMapping.length} –∑–∞–ø–∏—Å–µ–π`)
      console.log(`–¢–æ–ª—å–∫–æ –≤ direct: ${onlyInDirect.length} –∑–∞–ø–∏—Å–µ–π`)

      if (onlyInMapping.length > 0) {
        console.log('\nüîç –ó–∞–ø–∏—Å–∏, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –≤ mapping –ø–æ–¥—Ö–æ–¥–µ:')
        for (const id of onlyInMapping.slice(0, 5)) {
          const record = mappingRecords.find(r => r.chessboard_id === id)
          console.log(`- ID: ${id}, –º–∞—Ç–µ—Ä–∏–∞–ª: ${record?.chessboard?.material || 'N/A'}`)
        }
      }
    }

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    console.log('\nüìä –ê–ù–ê–õ–ò–ó 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤')
    const { data: docVersions } = await supabase
      .from('chessboard_documentation_mapping')
      .select(`
        chessboard_id,
        documentation_versions!inner(
          id,
          version_number,
          documentation_id,
          documentations!inner(code, tag_id)
        )
      `)
      .eq('documentation_versions.documentations.tag_id', kjTagId)

    if (docVersions) {
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ chessboard_id –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–µ—Ä—Å–∏–π
      const versionsByChess = new Map()
      docVersions.forEach(item => {
        const id = item.chessboard_id
        if (!versionsByChess.has(id)) {
          versionsByChess.set(id, [])
        }
        versionsByChess.get(id).push(item.documentation_versions)
      })

      console.log(`üìã –í—Å–µ–≥–æ mapping –∑–∞–ø–∏—Å–µ–π —Å –≤–µ—Ä—Å–∏—è–º–∏: ${docVersions.length}`)
      console.log(`üìã –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö chessboard_id: ${versionsByChess.size}`)

      // –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤–µ—Ä—Å–∏–π
      let multiVersionCount = 0
      for (const [chessId, versions] of versionsByChess.entries()) {
        if (versions.length > 1) {
          multiVersionCount++
          if (multiVersionCount <= 3) {
            console.log(`üîÑ Chessboard ${chessId}: ${versions.length} –≤–µ—Ä—Å–∏–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤`)
            versions.forEach((v, i) => {
              console.log(`   ${i+1}. –í–µ—Ä—Å–∏—è ${v.version_number}, doc_id: ${v.documentation_id}`)
            })
          }
        }
      }
      console.log(`üìä –ó–∞–ø–∏—Å–µ–π —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –≤–µ—Ä—Å–∏—è–º–∏: ${multiVersionCount}`)
    }

  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error)
  }
}

analyzeKJRecords()
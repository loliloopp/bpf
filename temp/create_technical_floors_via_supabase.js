// –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã block_technical_floors —á–µ—Ä–µ–∑ Supabase
import { createClient } from '@supabase/supabase-js';

const supabaseUrl = 'https://hfqgcaxmufzitdfafdlp.supabase.co';
const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImhmcWdjYXhtdWZ6aXRkZmFmZGxwIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ4OTI5MjMsImV4cCI6MjA3MDQ2ODkyM30.XnOEKdwZdJM-DilhrjZ7PdzHU2rx3L72oQ1rJYo5pXc';

const supabase = createClient(supabaseUrl, supabaseAnonKey);

async function createTechnicalFloorsTable() {
  console.log('üèóÔ∏è –°–æ–∑–¥–∞—é —Ç–∞–±–ª–∏—Ü—É block_technical_floors...');

  try {
    // SQL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
    const createTableSQL = `
      CREATE TABLE IF NOT EXISTS public.block_technical_floors (
          id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
          block_id UUID NOT NULL REFERENCES public.blocks(id) ON DELETE CASCADE,
          floor_number INTEGER NOT NULL,
          created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
          updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
          UNIQUE(block_id, floor_number)
      );
    `;

    // –í—ã–ø–æ–ª–Ω—è–µ–º SQL —á–µ—Ä–µ–∑ rpc –∏–ª–∏ raw query
    const { data, error } = await supabase.rpc('exec_sql', {
      sql_query: createTableSQL
    });

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã:', error);

      // –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±
      console.log('üîÑ –ü—Ä–æ–±—É—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±...');

      // –ü—Ä–æ–≤–µ—Ä–∏–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞
      const { data: existingTables, error: checkError } = await supabase
        .from('information_schema.tables')
        .select('table_name')
        .eq('table_schema', 'public')
        .eq('table_name', 'block_technical_floors');

      if (checkError) {
        console.error('‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã:', checkError);
        return false;
      }

      if (existingTables && existingTables.length > 0) {
        console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ block_technical_floors —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
        return true;
      } else {
        console.error('‚ùå –¢–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–∞');
        return false;
      }
    }

    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ block_technical_floors —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞');

    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
    const createIndexes = [
      'CREATE INDEX IF NOT EXISTS idx_block_technical_floors_block_id ON public.block_technical_floors(block_id);',
      'CREATE INDEX IF NOT EXISTS idx_block_technical_floors_floor_number ON public.block_technical_floors(floor_number);'
    ];

    for (const indexSQL of createIndexes) {
      console.log('üìç –°–æ–∑–¥–∞—é –∏–Ω–¥–µ–∫—Å...');
      const { error: indexError } = await supabase.rpc('exec_sql', {
        sql_query: indexSQL
      });

      if (indexError) {
        console.warn('‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–¥–µ–∫—Å–∞:', indexError);
      } else {
        console.log('‚úÖ –ò–Ω–¥–µ–∫—Å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');
      }
    }

    // –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ç—Ä–∏–≥–≥–µ—Ä–∞ –¥–ª—è updated_at
    const createTriggerFunction = `
      CREATE OR REPLACE FUNCTION public.update_updated_at_column()
      RETURNS TRIGGER AS $$
      BEGIN
          NEW.updated_at = timezone('utc'::text, now());
          RETURN NEW;
      END;
      $$ language 'plpgsql';
    `;

    console.log('‚öôÔ∏è –°–æ–∑–¥–∞—é —Ñ—É–Ω–∫—Ü–∏—é —Ç—Ä–∏–≥–≥–µ—Ä–∞...');
    const { error: functionError } = await supabase.rpc('exec_sql', {
      sql_query: createTriggerFunction
    });

    if (functionError) {
      console.warn('‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏:', functionError);
    } else {
      console.log('‚úÖ –§—É–Ω–∫—Ü–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    }

    // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä
    const createTrigger = `
      CREATE TRIGGER update_block_technical_floors_updated_at
          BEFORE UPDATE ON public.block_technical_floors
          FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();
    `;

    console.log('üîî –°–æ–∑–¥–∞—é —Ç—Ä–∏–≥–≥–µ—Ä...');
    const { error: triggerError } = await supabase.rpc('exec_sql', {
      sql_query: createTrigger
    });

    if (triggerError) {
      console.warn('‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–∏–≥–≥–µ—Ä–∞:', triggerError);
    } else {
      console.log('‚úÖ –¢—Ä–∏–≥–≥–µ—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');
    }

    return true;
  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error);
    return false;
  }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–æ–∑–¥–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
async function checkTableStructure() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã...');

  const { data, error } = await supabase
    .from('information_schema.columns')
    .select('column_name, data_type, is_nullable')
    .eq('table_schema', 'public')
    .eq('table_name', 'block_technical_floors')
    .order('ordinal_position');

  if (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:', error);
    return;
  }

  if (data && data.length > 0) {
    console.log('üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã block_technical_floors:');
    data.forEach(column => {
      console.log(`  - ${column.column_name}: ${column.data_type} (nullable: ${column.is_nullable})`);
    });
  } else {
    console.log('‚ùå –¢–∞–±–ª–∏—Ü–∞ block_technical_floors –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞—é —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —ç—Ç–∞–∂–µ–π...');

  const success = await createTechnicalFloorsTable();

  if (success) {
    await checkTableStructure();
    console.log('üéâ –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
  } else {
    console.log('üí• –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–∞–º–∏');
  }
}

main().catch(console.error);
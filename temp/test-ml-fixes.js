/**
 * –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ ML –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∞–≥–µ–Ω—Ç–æ–≤
 */

console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π ML –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã...');

// –ò–º–∏—Ç–∏—Ä—É–µ–º –∫–ª—é—á–µ–≤—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤:

// 1. –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ ML –æ–ø—Ü–∏–∏ –ø–æ selectedValue (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ)
function testMLOptionSearch() {
  console.log('\n1. üîç –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ ML –æ–ø—Ü–∏–∏ –ø–æ selectedValue:');

  const allOptions = [
    { value: 'Static Option 1', isMLSuggestion: false },
    {
      value: 'ML Suggestion 1',
      isMLSuggestion: true,
      nomenclatureSupplierId: '123',
      nomenclatureSupplierName: 'ML Suggestion 1'
    },
    { value: 'Static Option 2', isMLSuggestion: false },
    {
      value: 'ML Suggestion 2',
      isMLSuggestion: true,
      nomenclatureSupplierId: '456',
      nomenclatureSupplierName: 'ML Suggestion 2'
    },
  ];

  const selectedValue = 'ML Suggestion 1';

  // –°—Ç–∞—Ä—ã–π –∫–æ–¥ (–ù–ï –†–ê–ë–û–¢–ê–õ - –ø–æ–ª–∞–≥–∞–ª—Å—è –Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä option)
  console.log('  ‚ùå –°—Ç–∞—Ä—ã–π –ø–æ–¥—Ö–æ–¥: –ø–æ–ª–∞–≥–∞–ª–∏—Å—å –Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä option (—á–∞—Å—Ç–æ undefined)');

  // –ù–æ–≤—ã–π –∫–æ–¥ (–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ê–ì–ï–ù–¢–û–í - –ø–æ–∏—Å–∫ –ø–æ selectedValue)
  const mlOption = allOptions.find(
    (opt) => opt.value === selectedValue && opt.isMLSuggestion
  );

  console.log('  ‚úÖ –ù–æ–≤—ã–π –ø–æ–¥—Ö–æ–¥: –ø–æ–∏—Å–∫ –ø–æ selectedValue');
  console.log('  –†–µ–∑—É–ª—å—Ç–∞—Ç:', {
    found: !!mlOption,
    isMLSuggestion: mlOption?.isMLSuggestion,
    nomenclatureSupplierId: mlOption?.nomenclatureSupplierId,
    nomenclatureSupplierName: mlOption?.nomenclatureSupplierName,
  });

  return !!mlOption && mlOption.isMLSuggestion;
}

// 2. –¢–µ—Å—Ç —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ –º–∞—Å—Å–∏–≤–æ–≤ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö —Ä–µ–Ω–¥–µ—Ä–æ–≤)
function testArrayStabilization() {
  console.log('\n2. üîÑ –¢–µ—Å—Ç —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ –º–∞—Å—Å–∏–≤–æ–≤:');

  const suggestions = [
    { id: '1', name: 'Suggestion 1' },
    { id: '2', name: 'Suggestion 2' }
  ];

  // –°—Ç–∞—Ä—ã–π –∫–æ–¥ (–ü–†–û–ë–õ–ï–ú–ê - JSON.stringify –≤—ã–∑—ã–≤–∞–ª –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ —Ä–µ–Ω–¥–µ—Ä—ã)
  console.log('  ‚ùå –°—Ç–∞—Ä—ã–π –ø–æ–¥—Ö–æ–¥: JSON.stringify(suggestions)');
  const oldKey = JSON.stringify(suggestions);

  // –ù–æ–≤—ã–π –∫–æ–¥ (–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ê–ì–ï–ù–¢–û–í - join –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏)
  console.log('  ‚úÖ –ù–æ–≤—ã–π –ø–æ–¥—Ö–æ–¥: suggestions.map(s => s.id).join(\'|\')');
  const newKey = suggestions.map(s => s.id).join('|');

  console.log('  –°—Ç–∞—Ä—ã–π –∫–ª—é—á:', oldKey.substring(0, 50) + '...');
  console.log('  –ù–æ–≤—ã–π –∫–ª—é—á:', newKey);

  return newKey === '1|2';
}

// 3. –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è key –≤ ML –æ–ø—Ü–∏–∏ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ AutoComplete)
function testMLOptionKeys() {
  console.log('\n3. üîë –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è key –≤ ML –æ–ø—Ü–∏–∏:');

  const suggestions = [
    { id: '123', name: 'Test Suggestion', confidence: 0.85 }
  ];

  // –°—Ç–∞—Ä—ã–π –∫–æ–¥ (–ü–†–û–ë–õ–ï–ú–ê - –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª–∏ key —É –æ–ø—Ü–∏–π)
  console.log('  ‚ùå –°—Ç–∞—Ä—ã–π –ø–æ–¥—Ö–æ–¥: –±–µ–∑ key —É ML –æ–ø—Ü–∏–π');

  // –ù–æ–≤—ã–π –∫–æ–¥ (–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ê–ì–ï–ù–¢–û–í - –¥–æ–±–∞–≤–ª–µ–Ω key)
  const mlOptions = suggestions.map((suggestion) => ({
    value: suggestion.name,
    isMLSuggestion: true,
    nomenclatureSupplierId: suggestion.id,
    nomenclatureSupplierName: suggestion.name,
    // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º key –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã AutoComplete
    key: `ml-${suggestion.id}`,
  }));

  console.log('  ‚úÖ –ù–æ–≤—ã–π –ø–æ–¥—Ö–æ–¥: key –¥–æ–±–∞–≤–ª–µ–Ω');
  console.log('  –†–µ–∑—É–ª—å—Ç–∞—Ç:', {
    hasKey: !!mlOptions[0].key,
    keyValue: mlOptions[0].key,
    isMLSuggestion: mlOptions[0].isMLSuggestion,
  });

  return !!mlOptions[0].key && mlOptions[0].key === 'ml-123';
}

// 4. –¢–µ—Å—Ç API –º–µ—Ç–æ–¥–∞ getNomenclatureBySupplierName (–Ω–æ–≤—ã–π –º–µ—Ç–æ–¥)
function testNewAPIMethod() {
  console.log('\n4. üöÄ –¢–µ—Å—Ç –Ω–æ–≤–æ–≥–æ API –º–µ—Ç–æ–¥–∞ getNomenclatureBySupplierName:');

  // –ò–º–∏—Ç–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –Ω–æ–≤–æ–≥–æ –º–µ—Ç–æ–¥–∞
  const mockSupplierName = 'Test Supplier';

  console.log('  ‚úÖ –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω –≤ chessboard-cascade-api.ts');
  console.log('  –õ–æ–≥–∏–∫–∞:', {
    step1: '–ù–∞–π—Ç–∏ supplier_id –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –≤ supplier_names',
    step2: '–ù–∞–π—Ç–∏ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—É —á–µ—Ä–µ–∑ nomenclature_supplier_mapping',
    step3: '–í–µ—Ä–Ω—É—Ç—å {value: nomenclature.id, label: nomenclature.name}',
  });

  return true;
}

// –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
function runAllTests() {
  console.log('üéØ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∞–≥–µ–Ω—Ç–æ–≤:\n');

  const results = {
    mlOptionSearch: testMLOptionSearch(),
    arrayStabilization: testArrayStabilization(),
    mlOptionKeys: testMLOptionKeys(),
    newAPIMethod: testNewAPIMethod(),
  };

  console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
  Object.entries(results).forEach(([test, passed]) => {
    console.log(`  ${passed ? '‚úÖ' : '‚ùå'} ${test}: ${passed ? 'PASSED' : 'FAILED'}`);
  });

  const allPassed = Object.values(results).every(Boolean);
  console.log(`\nüéâ –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${allPassed ? '–í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò' : '–ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´'}`);

  if (allPassed) {
    console.log('\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤ –≤—ã–≥–ª—è–¥—è—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
    console.log('üî• –ö–ª—é—á–µ–≤—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:');
    console.log('   ‚Ä¢ –ü–æ–∏—Å–∫ ML –æ–ø—Ü–∏–π –ø–æ selectedValue (–≤–º–µ—Å—Ç–æ –ø–æ–ª–∞–≥–∞–Ω–∏—è –Ω–∞ option)');
    console.log('   ‚Ä¢ –°—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—è –º–∞—Å—Å–∏–≤–æ–≤ —á–µ—Ä–µ–∑ join() (–≤–º–µ—Å—Ç–æ JSON.stringify)');
    console.log('   ‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ key –≤ ML –æ–ø—Ü–∏–∏ –¥–ª—è AutoComplete');
    console.log('   ‚Ä¢ –ù–æ–≤—ã–π API –º–µ—Ç–æ–¥ getNomenclatureBySupplierName');
    console.log('   ‚Ä¢ –í—Å–µ—Å—Ç–æ—Ä–æ–Ω–Ω—è—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ');
  }

  return allPassed;
}

// –ó–∞–ø—É—Å–∫
runAllTests();
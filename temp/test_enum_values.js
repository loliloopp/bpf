import { createClient } from '@supabase/supabase-js';

// ะะพะดะบะปััะตะฝะธะต ะบ Supabase
const supabaseUrl = 'https://hfqgcaxmufzitdfafdlp.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImhmcWdjYXhtdWZ6aXRkZmFmZGxwIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ4OTI5MjMsImV4cCI6MjA3MDQ2ODkyM30.XnOEKdwZdJM-DilhrjZ7PdzHU2rx3L72oQ1rJYo5pXc';

const supabase = createClient(supabaseUrl, supabaseKey);

async function testEnumValues() {
  console.log('๐ ะัะพะฒะตััะตะผ ัะตะบััะธะต ะทะฝะฐัะตะฝะธั ENUM type_blocks...');

  try {
    // ะะพะปััะฐะตะผ ะฒัะต ัััะตััะฒัััะธะต ะฑะปะพะบะธ ะดะปั ะฟัะพะฒะตัะบะธ ะฒะพะทะผะพะถะฝัั ะทะฝะฐัะตะฝะธะน ENUM
    const { data: blocks, error: blocksError } = await supabase
      .from('blocks')
      .select('id, name, type_blocks')
      .limit(10);

    if (blocksError) {
      console.error('โ ะัะธะฑะบะฐ ะฟัะธ ะฟะพะปััะตะฝะธะธ ะฑะปะพะบะพะฒ:', blocksError);
      return;
    }

    console.log('โ ะขะตะบััะธะต ะฑะปะพะบะธ ะธ ะธั ัะธะฟั:');
    blocks.forEach(block => {
      console.log(`  - ${block.name}: ${block.type_blocks}`);
    });

    // ะัะพะฑัะตะผ ัะพะทะดะฐัั ัะตััะพะฒัะน ะฑะปะพะบ ั ะฝะพะฒัะผ ะทะฝะฐัะตะฝะธะตะผ ENUM
    console.log('\n๐งช ะขะตััะธััะตะผ ะฒะพะทะผะพะถะฝะพััั ะธัะฟะพะปัะทะพะฒะฐะฝะธั ะฝะพะฒะพะณะพ ะทะฝะฐัะตะฝะธั ENUM...');

    const testBlock = {
      name: `test_technical_floor_${Date.now()}`,
      type_blocks: 'ะขะธะฟะพะฒะพะน ะบะพัะฟัั.ะขะตั.ััะฐะถ'
    };

    const { data: insertResult, error: insertError } = await supabase
      .from('blocks')
      .insert(testBlock)
      .select();

    if (insertError) {
      console.error('โ ะะต ัะดะฐะตััั ะฒััะฐะฒะธัั ะฑะปะพะบ ั ะฝะพะฒัะผ ัะธะฟะพะผ:', insertError);
      console.log('๐ก ะญัะพ ะพะทะฝะฐัะฐะตั, ััะพ ะทะฝะฐัะตะฝะธะต ะตัะต ะฝะต ะดะพะฑะฐะฒะปะตะฝะพ ะฒ ENUM type_blocks');

      // ะะพะบะฐะถะตะผ ะฒะพะทะผะพะถะฝัะต ะทะฝะฐัะตะฝะธั ะธะท ะพัะธะฑะบะธ
      if (insertError.message.includes('invalid input value')) {
        console.log('๐ ะะปั ะดะพะฑะฐะฒะปะตะฝะธั ะฝะพะฒะพะณะพ ะทะฝะฐัะตะฝะธั ะฝะตะพะฑัะพะดะธะผะพ ะฒัะฟะพะปะฝะธัั SQL ะบะพะผะฐะฝะดั:');
        console.log("   ALTER TYPE public.type_blocks ADD VALUE 'ะขะธะฟะพะฒะพะน ะบะพัะฟัั.ะขะตั.ััะฐะถ';");
        console.log('   ัะตัะตะท ะฐะดะผะธะฝ-ะฟะฐะฝะตะปั Supabase ะธะปะธ psql');
      }
    } else {
      console.log('โ ะขะตััะพะฒัะน ะฑะปะพะบ ััะฟะตัะฝะพ ัะพะทะดะฐะฝ!', insertResult);
      console.log('๐ ะะพะฒะพะต ะทะฝะฐัะตะฝะธะต ENUM ัะถะต ัะฐะฑะพัะฐะตั!');

      // ะฃะดะฐะปัะตะผ ัะตััะพะฒัะน ะฑะปะพะบ
      const { error: deleteError } = await supabase
        .from('blocks')
        .delete()
        .eq('id', insertResult[0].id);

      if (!deleteError) {
        console.log('๐งน ะขะตััะพะฒัะน ะฑะปะพะบ ัะดะฐะปะตะฝ');
      }
    }

    // ะขะฐะบะถะต ะฟัะพะฒะตััะตะผ block_floor_mapping
    console.log('\n๐ข ะัะพะฒะตััะตะผ ะฟะพะดะดะตัะถะบั ะฒ block_floor_mapping...');

    const testMapping = {
      block_id: blocks[0]?.id, // ะัะฟะพะปัะทัะตะผ ัััะตััะฒัััะธะน ะฑะปะพะบ
      floor_number: -99, // ะฃะฝะธะบะฐะปัะฝัะน ะฝะพะผะตั ะดะปั ัะตััะฐ
      type_blocks: 'ะขะธะฟะพะฒะพะน ะบะพัะฟัั.ะขะตั.ััะฐะถ'
    };

    const { data: mappingResult, error: mappingError } = await supabase
      .from('block_floor_mapping')
      .insert(testMapping)
      .select();

    if (mappingError) {
      console.error('โ ะะต ัะดะฐะตััั ะดะพะฑะฐะฒะธัั mapping ั ะฝะพะฒัะผ ัะธะฟะพะผ:', mappingError);
    } else {
      console.log('โ Mapping ั ะฝะพะฒัะผ ัะธะฟะพะผ ัะพะทะดะฐะฝ!', mappingResult);

      // ะฃะดะฐะปัะตะผ ัะตััะพะฒัะน mapping
      await supabase
        .from('block_floor_mapping')
        .delete()
        .eq('id', mappingResult[0].id);
      console.log('๐งน ะขะตััะพะฒัะน mapping ัะดะฐะปะตะฝ');
    }

  } catch (error) {
    console.error('๐ฅ ะัะพะธะทะพัะปะฐ ะพัะธะฑะบะฐ:', error.message);
  }
}

testEnumValues().then(() => {
  console.log('\n๐ ะัะพะฒะตัะบะฐ ะทะฐะฒะตััะตะฝะฐ');
  process.exit(0);
}).catch(error => {
  console.error('๐ฅ ะัะธัะธัะตัะบะฐั ะพัะธะฑะบะฐ:', error);
  process.exit(1);
});
// –ü–†–û–¢–û–¢–ò–ü 4-–ì–û –ê–õ–ì–û–†–ò–¢–ú–ê: –ê–î–ê–ü–¢–ò–í–ù–´–ô –ì–ò–ë–†–ò–î–ù–´–ô –ü–û–ò–°–ö
import { createClient } from '@supabase/supabase-js'

const supabaseUrl = 'https://hfqgcaxmufzitdfafdlp.supabase.co'
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImhmcWdjYXhtdWZ6aXRkZmFmZGxwIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ4OTI5MjMsImV4cCI6MjA3MDQ2ODkyM30.XnOEKdwZdJM-DilhrjZ7PdzHU2rx3L72oQ1rJYo5pXc'

const supabase = createClient(supabaseUrl, supabaseKey)

// –≠–¢–ê–ü 1: –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–Ø –ó–ê–ü–†–û–°–ê
function classifyQuery(materialName) {
  const analysis = {
    wordCount: materialName.split(/\s+/).length,
    hasArticles: /[A-Za-z]+\d+|[A-Z]+[-_]\d+/.test(materialName),
    hasDimensions: /\d+[x*√ó]\d+|\d+–º–º|DN\d+|–î—É\d+/.test(materialName),
    hasBrands: /[A-Z]{2,}|"[^"]+"|–†–ò–î–ê–ù|FORBO|DIN|BROEN/.test(materialName),
    hasSpecialChars: /[-_()[\]{}#‚Ññ@&%]/.test(materialName),
    hasRussianOnly: /^[–∞-—è—ë\s\d]+$/i.test(materialName.replace(/[^\w–∞-—è—ë\s\d]/g, ''))
  }

  console.log(`üîç –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞ "${materialName}":`, analysis)

  if (analysis.wordCount <= 3 && !analysis.hasArticles && !analysis.hasBrands && analysis.hasRussianOnly) {
    return 'SIMPLE'
  } else if (analysis.hasArticles || analysis.hasBrands || analysis.hasDimensions) {
    return 'TECHNICAL'
  } else {
    return 'MIXED'
  }
}

// –≠–¢–ê–ü 2: –¢–û–ö–ï–ù–ò–ó–ê–¶–ò–Ø –ù–ê –ë–õ–û–ö–ò
function tokenizeIntoBlocks(materialName) {
  const blocks = {
    material: [],
    dimensions: [],
    articles: [],
    brands: [],
    technical: []
  }

  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤
  const dimensionPatterns = [
    /DN\d+/gi,
    /–î—É\d+/gi,
    /\d+x\d+/gi,
    /\d+√ó\d+/gi,
    /\d+\*\d+/gi,
    /\d+–º–º/gi
  ]

  dimensionPatterns.forEach(pattern => {
    const matches = materialName.match(pattern)
    if (matches) {
      blocks.dimensions.push(...matches.map(m => m.toLowerCase()))
    }
  })

  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—Ä—Ç–∏–∫—É–ª–æ–≤
  const articlePatterns = [
    /[A-Z]+[-_][A-Z\d]+/gi,
    /\d{3}[A-Z]\d+[A-Z]?/gi,
    /BVR[-]?[A-Z]?/gi,
    /\d{6,}/gi
  ]

  articlePatterns.forEach(pattern => {
    const matches = materialName.match(pattern)
    if (matches) {
      blocks.articles.push(...matches.map(m => m.toUpperCase()))
    }
  })

  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –±—Ä–µ–Ω–¥–æ–≤
  const brandPatterns = [
    /–†–ò–î–ê–ù/gi,
    /FORBO/gi,
    /DIN/gi,
    /BROEN/gi,
    /DANFOSS/gi,
    /ARLIGHT/gi,
    /"[^"]+"/gi
  ]

  brandPatterns.forEach(pattern => {
    const matches = materialName.match(pattern)
    if (matches) {
      blocks.brands.push(...matches.map(m => m.replace(/"/g, '').toUpperCase()))
    }
  })

  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ (–≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ)
  let cleanMaterial = materialName
    .replace(/DN\d+/gi, '')
    .replace(/–î—É\d+/gi, '')
    .replace(/\d+[x*√ó]\d+/gi, '')
    .replace(/\d+–º–º/gi, '')
    .replace(/[A-Z]+[-_][A-Z\d]+/gi, '')
    .replace(/\d{3}[A-Z]\d+[A-Z]?/gi, '')
    .replace(/BVR[-]?[A-Z]?/gi, '')
    .replace(/\d{6,}/gi, '')
    .replace(/–†–ò–î–ê–ù|FORBO|DIN|BROEN|DANFOSS|ARLIGHT/gi, '')
    .replace(/"[^"]+"/gi, '')
    .replace(/[^\w–∞-—è—ë\s]/g, ' ')
    .replace(/\s+/g, ' ')
    .trim()

  if (cleanMaterial) {
    blocks.material = cleanMaterial.toLowerCase().split(/\s+/).filter(word => word.length >= 2)
  }

  console.log('üì¶ –ë–ª–æ–∫–∏:', blocks)
  return blocks
}

// –≠–¢–ê–ü 3: –ü–û–ò–°–ö –ü–û –ú–ï–¢–û–î–ê–ú

// –ú–µ—Ç–æ–¥ A: –¢–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
async function exactMatchSearch(blocks, weight = 3.0) {
  const results = []

  if (blocks.material.length > 0) {
    const searchTerm = blocks.material.join(' ')

    const { data, error } = await supabase
      .from('supplier_names')
      .select('id, name')
      .ilike('name', `%${searchTerm}%`)
      .limit(20)

    if (!error && data) {
      results.push(...data.map(item => ({
        ...item,
        method: 'exact',
        baseScore: weight,
        matchReason: `–¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞: ${searchTerm}`
      })))
    }
  }

  return results
}

// –ú–µ—Ç–æ–¥ B: –ü–æ–∏—Å–∫ –ø–æ –±–ª–æ–∫–∞–º (–¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤)
async function blockBasedSearch(blocks, weight = 2.5) {
  const results = []

  // –ü–æ–∏—Å–∫ –ø–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º (–≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
  for (const article of blocks.articles) {
    const { data, error } = await supabase
      .from('supplier_names')
      .select('id, name')
      .ilike('name', `%${article}%`)
      .limit(10)

    if (!error && data) {
      results.push(...data.map(item => ({
        ...item,
        method: 'block_article',
        baseScore: weight + 1.0, // –ë–æ–Ω—É—Å –∑–∞ –∞—Ä—Ç–∏–∫—É–ª
        matchReason: `–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∞—Ä—Ç–∏–∫—É–ª–∞: ${article}`
      })))
    }
  }

  // –ü–æ–∏—Å–∫ –ø–æ —Ä–∞–∑–º–µ—Ä–∞–º
  for (const dimension of blocks.dimensions) {
    const { data, error } = await supabase
      .from('supplier_names')
      .select('id, name')
      .ilike('name', `%${dimension}%`)
      .limit(10)

    if (!error && data) {
      results.push(...data.map(item => ({
        ...item,
        method: 'block_dimension',
        baseScore: weight + 0.5, // –°—Ä–µ–¥–Ω–∏–π –±–æ–Ω—É—Å –∑–∞ —Ä–∞–∑–º–µ—Ä
        matchReason: `–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞: ${dimension}`
      })))
    }
  }

  // –ü–æ–∏—Å–∫ –ø–æ –±—Ä–µ–Ω–¥–∞–º
  for (const brand of blocks.brands) {
    const { data, error } = await supabase
      .from('supplier_names')
      .select('id, name')
      .ilike('name', `%${brand}%`)
      .limit(10)

    if (!error && data) {
      results.push(...data.map(item => ({
        ...item,
        method: 'block_brand',
        baseScore: weight + 0.3, // –ù–µ–±–æ–ª—å—à–æ–π –±–æ–Ω—É—Å –∑–∞ –±—Ä–µ–Ω–¥
        matchReason: `–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –±—Ä–µ–Ω–¥–∞: ${brand}`
      })))
    }
  }

  return results
}

// –ú–µ—Ç–æ–¥ C: –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫
async function semanticSearch(blocks, weight = 1.5) {
  const results = []

  // –°–ª–æ–≤–∞—Ä—å —Å–∏–Ω–æ–Ω–∏–º–æ–≤
  const synonyms = {
    '–∫—Ä–∞–Ω': ['–≤–µ–Ω—Ç–∏–ª—å', '–∑–∞—Ç–≤–æ—Ä', '–∫–ª–∞–ø–∞–Ω'],
    '—à–∞—Ä–æ–≤–æ–π': ['—à–∞—Ä–æ–≤—ã–π', 'ball', '—Å—Ñ–µ—Ä–∏—á–µ—Å–∫–∏–π'],
    '—Ä–µ–∑—å–±–æ–≤–æ–π': ['—Ä–µ–∑—å–±–æ–≤—ã–π', 'threaded'],
    '–ø–µ–Ω–æ–ø–ª—ç–∫—Å': ['–ø–µ–Ω–æ–ø–æ–ª–∏—Å—Ç–∏—Ä–æ–ª', '–ø–æ–ª–∏—Å—Ç–∏—Ä–æ–ª', '—É—Ç–µ–ø–ª–∏—Ç–µ–ª—å']
  }

  // –ü–æ–∏—Å–∫ –ø–æ —Å–∏–Ω–æ–Ω–∏–º–∞–º
  for (const word of blocks.material) {
    if (synonyms[word]) {
      for (const synonym of synonyms[word]) {
        const { data, error } = await supabase
          .from('supplier_names')
          .select('id, name')
          .ilike('name', `%${synonym}%`)
          .limit(5)

        if (!error && data) {
          results.push(...data.map(item => ({
            ...item,
            method: 'semantic',
            baseScore: weight,
            matchReason: `–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: ${word} ‚Üí ${synonym}`
          })))
        }
      }
    }
  }

  return results
}

// –ú–µ—Ç–æ–¥ D: –ù–µ—á–µ—Ç–∫–∏–π –ø–æ–∏—Å–∫
async function fuzzySearch(blocks, weight = 1.0) {
  const results = []

  // –ü–æ–∏—Å–∫ –ø–æ —á–∞—Å—Ç—è–º —Å–ª–æ–≤
  for (const word of blocks.material) {
    if (word.length >= 4) {
      const { data, error } = await supabase
        .from('supplier_names')
        .select('id, name')
        .ilike('name', `%${word}%`)
        .limit(5)

      if (!error && data) {
        results.push(...data.map(item => ({
          ...item,
          method: 'fuzzy',
          baseScore: weight,
          matchReason: `–ù–µ—á–µ—Ç–∫–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: ${word}`
        })))
      }
    }
  }

  return results
}

// –≠–¢–ê–ü 4: –£–ú–ù–û–ï –†–ê–ù–ñ–ò–†–û–í–ê–ù–ò–ï
function smartRanking(allResults, blocks, queryType) {
  // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ ID
  const resultMap = new Map()

  allResults.forEach(result => {
    if (resultMap.has(result.id)) {
      const existing = resultMap.get(result.id)
      existing.baseScore += result.baseScore * 0.5 // –ü–æ–ª–æ–≤–∏–Ω–∞ –≤–µ—Å–∞ –∑–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
      existing.matchReasons.push(result.matchReason)
      existing.methods.add(result.method)
    } else {
      resultMap.set(result.id, {
        ...result,
        matchReasons: [result.matchReason],
        methods: new Set([result.method])
      })
    }
  })

  // –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã –∏ —à—Ç—Ä–∞—Ñ—ã
  const rankedResults = Array.from(resultMap.values()).map(item => {
    let finalScore = item.baseScore

    // –ë–æ–Ω—É—Å—ã –∑–∞ —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –±–ª–æ–∫–æ–≤
    blocks.material.forEach(word => {
      if (item.name.toLowerCase().includes(word)) {
        finalScore += 2.0
      }
    })

    blocks.dimensions.forEach(dim => {
      if (item.name.toLowerCase().includes(dim.toLowerCase())) {
        finalScore += 3.0
      }
    })

    blocks.articles.forEach(article => {
      if (item.name.toLowerCase().includes(article.toLowerCase())) {
        finalScore += 4.0
      }
    })

    blocks.brands.forEach(brand => {
      if (item.name.toLowerCase().includes(brand.toLowerCase())) {
        finalScore += 2.0
      }
    })

    // –ë–æ–Ω—É—Å –∑–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    if (item.methods.size > 1) {
      finalScore += 1.0
    }

    // –®—Ç—Ä–∞—Ñ –∑–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
    if (item.name.length > 100) {
      finalScore -= 1.0
    }

    // –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –±–æ–Ω—É—Å—ã
    if (queryType === 'SIMPLE') {
      // –ë–æ–Ω—É—Å –∑–∞ –∫—Ä–∞—Ç–∫–æ—Å—Ç—å –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
      if (item.name.length < 50) {
        finalScore += 0.5
      }
    } else if (queryType === 'TECHNICAL') {
      // –ë–æ–Ω—É—Å –∑–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å
      if (item.methods.has('block_article') || item.methods.has('block_dimension')) {
        finalScore += 1.5
      }
    }

    return {
      ...item,
      finalScore: Math.round(finalScore * 10) / 10,
      methods: Array.from(item.methods)
    }
  })

  return rankedResults.sort((a, b) => b.finalScore - a.finalScore)
}

// –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø 4-–ì–û –ê–õ–ì–û–†–ò–¢–ú–ê
async function hybridAdaptiveSearch(materialName, limit = 20) {
  console.log(`\nüöÄ –ó–ê–ü–£–°–ö 4-–ì–û –ê–õ–ì–û–†–ò–¢–ú–ê –¥–ª—è "${materialName}"`)
  console.log('=' .repeat(80))

  // –≠—Ç–∞–ø 1: –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
  const queryType = classifyQuery(materialName)
  console.log(`üìä –¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞: ${queryType}`)

  // –≠—Ç–∞–ø 2: –¢–æ–∫–µ–Ω–∏–∑–∞—Ü–∏—è
  const blocks = tokenizeIntoBlocks(materialName)

  // –≠—Ç–∞–ø 3: –ú–Ω–æ–≥–æ–º–µ—Ç–æ–¥–Ω—ã–π –ø–æ–∏—Å–∫
  const allResults = []

  console.log('\nüîç –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ —Ä–∞–∑–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏...')

  // –í—ã–±–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
  if (queryType === 'SIMPLE') {
    console.log('  üìç –°—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞')
    allResults.push(...await exactMatchSearch(blocks, 3.0))
    allResults.push(...await semanticSearch(blocks, 2.0))
    allResults.push(...await fuzzySearch(blocks, 1.5))
  } else if (queryType === 'TECHNICAL') {
    console.log('  üìç –°—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞')
    allResults.push(...await blockBasedSearch(blocks, 3.0))
    allResults.push(...await exactMatchSearch(blocks, 2.0))
    allResults.push(...await semanticSearch(blocks, 1.5))
  } else {
    console.log('  üìç –°–º–µ—à–∞–Ω–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è')
    allResults.push(...await exactMatchSearch(blocks, 2.5))
    allResults.push(...await blockBasedSearch(blocks, 2.5))
    allResults.push(...await semanticSearch(blocks, 1.5))
    allResults.push(...await fuzzySearch(blocks, 1.0))
  }

  console.log(`  üìà –°–æ–±—Ä–∞–Ω–æ ${allResults.length} —Å—ã—Ä—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`)

  // –≠—Ç–∞–ø 4: –£–º–Ω–æ–µ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ
  const finalResults = smartRanking(allResults, blocks, queryType)

  console.log(`  üéØ –ò—Ç–æ–≥–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${finalResults.length}`)

  return finalResults.slice(0, limit)
}

// –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–ê –ù–ê–®–ò–• –ú–ê–¢–ï–†–ò–ê–õ–ê–•
async function testAlgorithm4() {
  console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï 4-–ì–û –ê–õ–ì–û–†–ò–¢–ú–ê')
  console.log('=' .repeat(80))

  const testMaterials = [
    '–ø–µ–Ω–æ–ø–ª—ç–∫—Å',
    '–ö—Ä–∞–Ω —à–∞—Ä–æ–≤–æ–π —Ä–µ–∑—å–±–æ–≤–æ–π BVR-R DN32 BVR-R DN32 065B8310R –†–∏–¥–∞–Ω'
  ]

  for (const material of testMaterials) {
    const results = await hybridAdaptiveSearch(material, 10)

    console.log(`\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¥–ª—è "${material}":`)
    console.log(`   –ù–∞–π–¥–µ–Ω–æ: ${results.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`)

    results.slice(0, 5).forEach((result, index) => {
      console.log(`\n${index + 1}. "${result.name}"`)
      console.log(`   üèÜ –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞: ${result.finalScore}`)
      console.log(`   üìã –ú–µ—Ç–æ–¥—ã: ${result.methods.join(', ')}`)
      console.log(`   üéØ –ü—Ä–∏—á–∏–Ω—ã —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è:`)
      result.matchReasons.forEach(reason => {
        console.log(`      ‚Ä¢ ${reason}`)
      })
    })

    console.log('\n' + '-'.repeat(80))
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
testAlgorithm4().catch(console.error)
// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Supabase –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Ç–∞–±–ª–∏—Ü—ã deepseek_settings
import { createClient } from '@supabase/supabase-js'

const supabaseUrl = 'https://hfqgcaxmufzitdfafdlp.supabase.co'
const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImhmcWdjYXhtdWZ6aXRkZmFmZGxwIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ4OTI5MjMsImV4cCI6MjA3MDQ2ODkyM30.XnOEKdwZdJM-DilhrjZ7PdzHU2rx3L72oQ1rJYo5pXc'

const supabase = createClient(supabaseUrl, supabaseAnonKey)

async function checkTables() {
  console.log('=== –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ù–û–°–¢–ò –¢–ê–ë–õ–ò–¶ –í SUPABASE ===')

  const tables = [
    'deepseek_settings',
    'deepseek_usage_stats',
    'projects',
    'chessboard'
  ]

  for (const table of tables) {
    try {
      console.log(`\nüìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É: ${table}`)

      const { data, error, count } = await supabase
        .from(table)
        .select('*', { count: 'exact' })
        .limit(1)

      if (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ ${table}:`, error.message)
        if (error.code) console.log(`   –ö–æ–¥ –æ—à–∏–±–∫–∏: ${error.code}`)
      } else {
        console.log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ ${table} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`)
        console.log(`   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: ${count}`)
        if (data && data.length > 0) {
          console.log(`   –ü–æ–ª—è:`, Object.keys(data[0]).join(', '))
        }
      }
    } catch (e) {
      console.log(`‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è ${table}:`, e.message)
    }
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ deepseek_settings –≤ –¥–µ—Ç–∞–ª—è—Ö
async function checkDeepseekSettings() {
  console.log('\n\n=== –î–ï–¢–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê DEEPSEEK_SETTINGS ===')

  try {
    const { data, error } = await supabase
      .from('deepseek_settings')
      .select('*')
      .single()

    if (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞:', error.message)
      console.log('   –ö–æ–¥:', error.code)
      console.log('   –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:', error.details)

      if (error.code === 'PGRST116') {
        console.log('   –≠—Ç–æ –∑–Ω–∞—á–∏—Ç: —Ç–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç')
      } else if (error.code === '42P01') {
        console.log('   –≠—Ç–æ –∑–Ω–∞—á–∏—Ç: —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
      }
    } else {
      console.log('‚úÖ –ó–∞–ø–∏—Å—å –Ω–∞–π–¥–µ–Ω–∞:')
      console.log('   ID:', data?.id || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
      console.log('   API Key:', data?.api_key ? `${data.api_key.substring(0, 10)}...` : '–ø—É—Å—Ç–æ–π')
      console.log('   Base URL:', data?.base_url || '–ø—É—Å—Ç–æ–π')
      console.log('   Model:', data?.model || '–ø—É—Å—Ç–æ–π')
      console.log('   Enabled:', data?.enabled || false)
      console.log('   Created:', data?.created_at || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
      console.log('   Updated:', data?.updated_at || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    }
  } catch (e) {
    console.log('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', e.message)
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ deepseek_usage_stats
async function checkDeepseekUsageStats() {
  console.log('\n\n=== –î–ï–¢–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê DEEPSEEK_USAGE_STATS ===')

  try {
    const { data, error } = await supabase
      .from('deepseek_usage_stats')
      .select('*')
      .single()

    if (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞:', error.message)
      console.log('   –ö–æ–¥:', error.code)

      if (error.code === 'PGRST116') {
        console.log('   –≠—Ç–æ –∑–Ω–∞—á–∏—Ç: —Ç–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç')
      } else if (error.code === '42P01') {
        console.log('   –≠—Ç–æ –∑–Ω–∞—á–∏—Ç: —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
      }
    } else {
      console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞–π–¥–µ–Ω–∞:')
      console.log('   –ó–∞–ø—Ä–æ—Å–æ–≤ –≤—Å–µ–≥–æ:', data?.requests_count || 0)
      console.log('   –£—Å–ø–µ—à–Ω—ã—Ö:', data?.successful_requests || 0)
      console.log('   –ù–µ—É—Å–ø–µ—à–Ω—ã—Ö:', data?.failed_requests || 0)
      console.log('   –¢–æ–∫–µ–Ω–æ–≤ –≤—Ö–æ–¥—è—â–∏—Ö:', data?.tokens_input || 0)
      console.log('   –¢–æ–∫–µ–Ω–æ–≤ –∏—Å—Ö–æ–¥—è—â–∏—Ö:', data?.tokens_output || 0)
      console.log('   –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:', data?.total_cost || 0)
      console.log('   –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å:', data?.last_request_at || '–Ω–∏–∫–æ–≥–¥–∞')
    }
  } catch (e) {
    console.log('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', e.message)
  }
}

async function main() {
  await checkTables()
  await checkDeepseekSettings()
  await checkDeepseekUsageStats()

  console.log('\n=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê ===')
}

main().catch(console.error)
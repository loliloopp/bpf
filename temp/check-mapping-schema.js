// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã chessboard_mapping
import { createClient } from '@supabase/supabase-js'

const supabaseUrl = 'https://hfqgcaxmufzitdfafdlp.supabase.co'
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImhmcWdjYXhtdWZ6aXRkZmFmZGxwIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ4OTI5MjMsImV4cCI6MjA3MDQ2ODkyM30.XnOEKdwZdJM-DilhrjZ7PdzHU2rx3L72oQ1rJYo5pXc'
const supabase = createClient(supabaseUrl, supabaseKey)

async function checkMappingSchema() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã chessboard_mapping...')

  try {
    // –ü–æ–ª—É—á–∞–µ–º –æ–¥–Ω—É –∑–∞–ø–∏—Å—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    const { data, error } = await supabase
      .from('chessboard_mapping')
      .select('*')
      .limit(1)

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ chessboard_mapping:', error)
      return
    }

    if (data && data.length > 0) {
      console.log('‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã chessboard_mapping:')
      const record = data[0]

      Object.keys(record).forEach((field, index) => {
        const value = record[field]
        const type = typeof value
        const isNull = value === null
        console.log(`   ${index + 1}. ${field}: ${type} ${isNull ? '(NULL)' : `(${String(value).substring(0, 50)})`}`)
      })

      console.log('\nüìã –ü–æ–ª—è —Ç–∞–±–ª–∏—Ü—ã chessboard_mapping:')
      console.log(JSON.stringify(Object.keys(record), null, 2))

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –≤ location_id
      console.log('\nüîç –ê–Ω–∞–ª–∏–∑ –ø–æ–ª—è location_id...')

      const { data: locationSample, error: locationError } = await supabase
        .from('chessboard_mapping')
        .select('location_id')
        .not('location_id', 'is', null)
        .limit(5)

      if (locationError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è location_id:', locationError)
      } else if (locationSample && locationSample.length > 0) {
        console.log(`üìä –ü—Ä–∏–º–µ—Ä—ã location_id (–Ω–µ NULL):`)
        locationSample.forEach((row, i) => {
          console.log(`   ${i + 1}. ${row.location_id} (—Ç–∏–ø: ${typeof row.location_id})`)
        })
      } else {
        console.log('‚ö†Ô∏è –í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è location_id —Ä–∞–≤–Ω—ã NULL')
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –≤ block_id
      console.log('\nüîç –ê–Ω–∞–ª–∏–∑ –ø–æ–ª—è block_id...')

      const { data: blockSample, error: blockError } = await supabase
        .from('chessboard_mapping')
        .select('block_id')
        .not('block_id', 'is', null)
        .limit(5)

      if (blockError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è block_id:', blockError)
      } else if (blockSample && blockSample.length > 0) {
        console.log(`üìä –ü—Ä–∏–º–µ—Ä—ã block_id (–Ω–µ NULL):`)
        blockSample.forEach((row, i) => {
          console.log(`   ${i + 1}. ${row.block_id} (—Ç–∏–ø: ${typeof row.block_id})`)
        })
      } else {
        console.log('‚ö†Ô∏è –í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è block_id —Ä–∞–≤–Ω—ã NULL')
      }

    } else {
      console.log('‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ chessboard_mapping –ø—É—Å—Ç–∞')
    }

    // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä–∏–º cost_category_id –∏ cost_type_id
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ cost_category_id –∏ cost_type_id...')

    const { data: costSample, error: costError } = await supabase
      .from('chessboard_mapping')
      .select('cost_category_id, cost_type_id')
      .not('cost_category_id', 'is', null)
      .limit(3)

    if (costError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è cost –¥–∞–Ω–Ω—ã—Ö:', costError)
    } else if (costSample && costSample.length > 0) {
      console.log(`üìä –ü—Ä–∏–º–µ—Ä—ã cost –ø–æ–ª–µ–π:`)
      costSample.forEach((row, i) => {
        console.log(`   ${i + 1}. cost_category_id: ${row.cost_category_id} (—Ç–∏–ø: ${typeof row.cost_category_id})`)
        console.log(`      cost_type_id: ${row.cost_type_id} (—Ç–∏–ø: ${typeof row.cost_type_id})`)
      })
    }

  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error)
  }
}

checkMappingSchema()
// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ supplier_names
// –≠—Ç–æ—Ç —Ñ–∞–π–ª –ø–æ–º–æ–∂–µ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—É —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤

import { createClient } from '@supabase/supabase-js'

const supabaseUrl = 'https://hfqgcaxmufzitdfafdlp.supabase.co'
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImhmcWdjYXhtdWZ6aXRkZmFmZGxwIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ4OTI5MjMsImV4cCI6MjA3MDQ2ODkyM30.XnOEKdwZdJM-DilhrjZ7PdzHU2rx3L72oQ1rJYo5pXc'

const supabase = createClient(supabaseUrl, supabaseKey)

async function checkSupplierNames() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É supplier_names...')

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
    const { count, error: countError } = await supabase
      .from('supplier_names')
      .select('*', { count: 'exact', head: true })

    if (countError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –∑–∞–ø–∏—Å–µ–π:', countError)
      return
    }

    console.log(`üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ supplier_names: ${count}`)

    // 2. –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –µ—Å—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
    if (count > 0) {
      const { data, error } = await supabase
        .from('supplier_names')
        .select('id, name')
        .limit(10)

      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö:', error)
        return
      }

      console.log('üìã –ü–µ—Ä–≤—ã–µ 10 –∑–∞–ø–∏—Å–µ–π:')
      data.forEach((supplier, index) => {
        console.log(`${index + 1}. ID: ${supplier.id}, Name: "${supplier.name}"`)
      })
    } else {
      console.log('‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ supplier_names –ø—É—Å—Ç–∞!')
    }

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É nomenclature
    const { count: nomenclatureCount, error: nomenclatureError } = await supabase
      .from('nomenclature')
      .select('*', { count: 'exact', head: true })

    if (nomenclatureError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ nomenclature:', nomenclatureError)
      return
    }

    console.log(`üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ nomenclature: ${nomenclatureCount}`)

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∏ nomenclature_supplier_mapping
    const { count: mappingCount, error: mappingError } = await supabase
      .from('nomenclature_supplier_mapping')
      .select('*', { count: 'exact', head: true })

    if (mappingError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ mapping:', mappingError)
      return
    }

    console.log(`üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤—è–∑–µ–π nomenclature_supplier_mapping: ${mappingCount}`)

  } catch (error) {
    console.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error)
  }
}

checkSupplierNames()
// –¢–ï–°–¢–û–í–´–ô –ö–û–ú–ü–û–ù–ï–ù–¢ –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –¢–ê–ë–õ–ò–¶ DEEPSEEK
// –≠—Ç–æ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –º–æ–∂–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ë–î

import { useEffect, useState } from 'react'
import { Card, Typography, Button, Alert, Space } from 'antd'
import { supabase } from '@/lib/supabase'

const { Title, Text } = Typography

interface TableCheckResult {
  exists: boolean
  error?: string
  columns?: string[]
}

export function TestDeepseekTables() {
  const [settingsTable, setSettingsTable] = useState<TableCheckResult>({ exists: false })
  const [statsTable, setStatsTable] = useState<TableCheckResult>({ exists: false })
  const [loading, setLoading] = useState(false)

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
  const checkTables = async () => {
    setLoading(true)
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü Deepseek...')

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É –Ω–∞—Å—Ç—Ä–æ–µ–∫
      const { data: settingsData, error: settingsError } = await supabase
        .from('deepseek_settings')
        .select('*')
        .limit(1)

      if (settingsError) {
        setSettingsTable({
          exists: false,
          error: settingsError.message
        })
        console.log('‚ùå deepseek_settings:', settingsError.message)
      } else {
        setSettingsTable({
          exists: true,
          columns: settingsData && settingsData.length > 0 ? Object.keys(settingsData[0]) : []
        })
        console.log('‚úÖ deepseek_settings –Ω–∞–π–¥–µ–Ω–∞')
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      const { data: statsData, error: statsError } = await supabase
        .from('deepseek_usage_stats')
        .select('*')
        .limit(1)

      if (statsError) {
        setStatsTable({
          exists: false,
          error: statsError.message
        })
        console.log('‚ùå deepseek_usage_stats:', statsError.message)
      } else {
        setStatsTable({
          exists: true,
          columns: statsData && statsData.length > 0 ? Object.keys(statsData[0]) : []
        })
        console.log('‚úÖ deepseek_usage_stats –Ω–∞–π–¥–µ–Ω–∞')
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–±–ª–∏—Ü:', error)
    } finally {
      setLoading(false)
    }
  }

  // –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü —á–µ—Ä–µ–∑ INSERT (—Ö–∞–∫)
  const createTablesHack = async () => {
    setLoading(true)
    console.log('üîß –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü —á–µ—Ä–µ–∑ INSERT...')

    try {
      // –ü–æ–ø—Ä–æ–±—É–µ–º –≤—Å—Ç–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ deepseek_settings
      const { error: settingsError } = await supabase
        .from('deepseek_settings')
        .insert({
          api_key: '',
          base_url: 'https://api.deepseek.com',
          model: 'deepseek-chat',
          enabled: false,
          temperature: 0.7,
          max_tokens: 1000,
          system_prompt: null
        })

      if (settingsError) {
        console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å deepseek_settings:', settingsError.message)
      } else {
        console.log('‚úÖ deepseek_settings —Å–æ–∑–¥–∞–Ω–∞')
      }

      // –ü–æ–ø—Ä–æ–±—É–µ–º –≤—Å—Ç–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ deepseek_usage_stats
      const { error: statsError } = await supabase
        .from('deepseek_usage_stats')
        .insert({
          requests_count: 0,
          tokens_input: 0,
          tokens_output: 0,
          total_cost: 0,
          successful_requests: 0,
          failed_requests: 0
        })

      if (statsError) {
        console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å deepseek_usage_stats:', statsError.message)
      } else {
        console.log('‚úÖ deepseek_usage_stats —Å–æ–∑–¥–∞–Ω–∞')
      }

      // –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
      await checkTables()
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü:', error)
    } finally {
      setLoading(false)
    }
  }

  useEffect(() => {
    checkTables()
  }, [])

  return (
    <Card title="üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü Deepseek" style={{ marginBottom: 16 }}>
      <Space direction="vertical" style={{ width: '100%' }}>

        {/* –°—Ç–∞—Ç—É—Å —Ç–∞–±–ª–∏—Ü—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫ */}
        <Alert
          message="–¢–∞–±–ª–∏—Ü–∞ deepseek_settings"
          description={
            settingsTable.exists ? (
              <div>
                ‚úÖ –¢–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                {settingsTable.columns && (
                  <div>
                    <strong>–ü–æ–ª—è:</strong> {settingsTable.columns.join(', ')}
                    <br />
                    <strong>system_prompt:</strong> {settingsTable.columns.includes('system_prompt') ? '‚úÖ –ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç' : '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}
                  </div>
                )}
              </div>
            ) : (
              <div>
                ‚ùå –¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
                <br />
                <strong>–û—à–∏–±–∫–∞:</strong> {settingsTable.error}
              </div>
            )
          }
          type={settingsTable.exists ? 'success' : 'error'}
          showIcon
        />

        {/* –°—Ç–∞—Ç—É—Å —Ç–∞–±–ª–∏—Ü—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ */}
        <Alert
          message="–¢–∞–±–ª–∏—Ü–∞ deepseek_usage_stats"
          description={
            statsTable.exists ? (
              <div>
                ‚úÖ –¢–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                {statsTable.columns && (
                  <div>
                    <strong>–ü–æ–ª—è:</strong> {statsTable.columns.join(', ')}
                  </div>
                )}
              </div>
            ) : (
              <div>
                ‚ùå –¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
                <br />
                <strong>–û—à–∏–±–∫–∞:</strong> {statsTable.error}
              </div>
            )
          }
          type={statsTable.exists ? 'success' : 'error'}
          showIcon
        />

        {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
        <Space>
          <Button onClick={checkTables} loading={loading}>
            üîÑ –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∞–±–ª–∏—Ü—ã
          </Button>
          <Button
            type="primary"
            onClick={createTablesHack}
            loading={loading}
            disabled={settingsTable.exists && statsTable.exists}
          >
            üîß –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã
          </Button>
        </Space>

        {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ */}
        <Alert
          message="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"
          description={
            <div>
              <p><strong>–ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã:</strong></p>
              <ol>
                <li>–û—Ç–∫—Ä–æ–π—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Supabase: <a href="https://hfqgcaxmufzitdfafdlp.supabase.co" target="_blank">https://hfqgcaxmufzitdfafdlp.supabase.co</a></li>
                <li>–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª "Table Editor"</li>
                <li>–í—ã–ø–æ–ª–Ω–∏—Ç–µ SQL –∏–∑ —Ñ–∞–π–ª–∞: <code>temp/create_deepseek_tables.sql</code></li>
                <li>–û–±–Ω–æ–≤–∏—Ç–µ —ç—Ç—É —Å—Ç—Ä–∞–Ω–∏—Ü—É</li>
              </ol>
            </div>
          }
          type="info"
          showIcon
        />
      </Space>
    </Card>
  )
}
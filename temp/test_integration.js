// –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–ò DEEPSEEK + API SETTINGS
// –§–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã –≤—Å–µ—Ö —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤

console.log('=== –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò API SETTINGS –ò DEEPSEEK ===')

// –°–ø–∏—Å–æ–∫ –ø—Ä–æ–≤–µ—Ä—è–µ–º—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
const testsToRun = [
  {
    name: 'Entity API-Settings —Å–æ–∑–¥–∞–Ω',
    check: () => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
      const fs = require('fs')
      const path = require('path')

      const entityPath = path.join(process.cwd(), 'src/entities/api-settings')
      return fs.existsSync(entityPath) &&
             fs.existsSync(path.join(entityPath, 'index.ts')) &&
             fs.existsSync(path.join(entityPath, 'types.ts')) &&
             fs.existsSync(path.join(entityPath, 'api'))
    }
  },
  {
    name: 'Deepseek API –º–æ–¥—É–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç',
    check: () => {
      const fs = require('fs')
      const path = require('path')

      const deepseekPath = path.join(process.cwd(), 'src/entities/api-settings/api/deepseek-api.ts')
      return fs.existsSync(deepseekPath)
    }
  },
  {
    name: 'Yandex Disk API –º–æ–¥—É–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç',
    check: () => {
      const fs = require('fs')
      const path = require('path')

      const yandexPath = path.join(process.cwd(), 'src/entities/api-settings/api/yandex-disk-api.ts')
      return fs.existsSync(yandexPath)
    }
  },
  {
    name: 'ML API –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Deepseek',
    check: () => {
      const fs = require('fs')
      const path = require('path')

      const mlApiPath = path.join(process.cwd(), 'src/entities/ml/api/ml-api.ts')
      if (!fs.existsSync(mlApiPath)) return false

      const content = fs.readFileSync(mlApiPath, 'utf8')
      return content.includes('deepseekApi') &&
             content.includes('mlModeApi') &&
             content.includes('predictWithDeepseek')
    }
  },
  {
    name: 'ML types –æ–±–Ω–æ–≤–ª–µ–Ω—ã —Å deepseek',
    check: () => {
      const fs = require('fs')
      const path = require('path')

      const mlTypesPath = path.join(process.cwd(), 'src/entities/ml/model/types.ts')
      if (!fs.existsSync(mlTypesPath)) return false

      const content = fs.readFileSync(mlTypesPath, 'utf8')
      return content.includes("'deepseek'")
    }
  },
  {
    name: 'API Settings —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞',
    check: () => {
      const fs = require('fs')
      const path = require('path')

      const apiSettingsPath = path.join(process.cwd(), 'src/pages/admin/ApiSettings.tsx')
      return fs.existsSync(apiSettingsPath)
    }
  },
  {
    name: 'ChessboardML –æ–±–Ω–æ–≤–ª–µ–Ω —Å AI/ML –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–º',
    check: () => {
      const fs = require('fs')
      const path = require('path')

      const chessboardMLPath = path.join(process.cwd(), 'src/pages/experiments/ChessboardML.tsx')
      if (!fs.existsSync(chessboardMLPath)) return false

      const content = fs.readFileSync(chessboardMLPath, 'utf8')
      return content.includes('mlMode') &&
             content.includes('setMLMode') &&
             content.includes('deepseekAvailable')
    }
  },
  {
    name: 'App.tsx –æ–±–Ω–æ–≤–ª–µ–Ω —Å –Ω–æ–≤–æ–π –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–µ–π',
    check: () => {
      const fs = require('fs')
      const path = require('path')

      const appPath = path.join(process.cwd(), 'src/App.tsx')
      if (!fs.existsSync(appPath)) return false

      const content = fs.readFileSync(appPath, 'utf8')
      return content.includes('ApiSettings') &&
             content.includes('/admin/api-settings') &&
             !content.includes('import Disk from')
    }
  },
  {
    name: 'FileUpload –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –Ω–æ–≤–æ–≥–æ API',
    check: () => {
      const fs = require('fs')
      const path = require('path')

      const fileUploadPath = path.join(process.cwd(), 'src/components/FileUpload.tsx')
      if (!fs.existsSync(fileUploadPath)) return false

      const content = fs.readFileSync(fileUploadPath, 'utf8')
      return content.includes('@/entities/api-settings')
    }
  },
  {
    name: '–ú–∏–≥—Ä–∞—Ü–∏—è –ë–î —Å–æ–∑–¥–∞–Ω–∞',
    check: () => {
      const fs = require('fs')
      const path = require('path')

      const migrationPath = path.join(process.cwd(), 'sql/002_api_settings_migration.sql')
      return fs.existsSync(migrationPath)
    }
  }
]

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
console.log('\nüîç –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–æ–∫...\n')

let passedTests = 0
let failedTests = 0

testsToRun.forEach((test, index) => {
  try {
    const result = test.check()
    if (result) {
      console.log(`‚úÖ ${index + 1}. ${test.name}`)
      passedTests++
    } else {
      console.log(`‚ùå ${index + 1}. ${test.name}`)
      failedTests++
    }
  } catch (error) {
    console.log(`‚ùå ${index + 1}. ${test.name} (–æ—à–∏–±–∫–∞: ${error.message})`)
    failedTests++
  }
})

console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:')
console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${passedTests}`)
console.log(`‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ: ${failedTests}`)
console.log(`üéØ –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${Math.round((passedTests / testsToRun.length) * 100)}%`)

if (failedTests === 0) {
  console.log('\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.')
} else {
  console.log('\n‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞.')
}

console.log('\n=== –ö–û–ù–ï–¶ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ===')
import { createClient } from '@supabase/supabase-js';

const supabaseUrl = 'https://hfqgcaxmufzitdfafdlp.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImhmcWdjYXhtdWZ6aXRkZmFmZGxwIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ4OTI5MjMsImV4cCI6MjA3MDQ2ODkyM30.XnOEKdwZdJM-DilhrjZ7PdzHU2rx3L72oQ1rJYo5pXc';

const supabase = createClient(supabaseUrl, supabaseKey);

async function getAllEnumValues() {
  try {
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase');

    // –ü–æ–ª—É—á–∏–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è type_blocks –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π type_blocks –≤ —Ç–∞–±–ª–∏—Ü–µ blocks:');

    const { data: uniqueTypes, error: typesError } = await supabase
      .from('blocks')
      .select('type_blocks')
      .not('type_blocks', 'is', null);

    if (typesError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–ø–æ–≤:', typesError);
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    const uniqueValues = [...new Set(uniqueTypes.map(item => item.type_blocks))].sort();

    console.log('‚úÖ –ù–∞–π–¥–µ–Ω–Ω—ã–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è type_blocks:');
    uniqueValues.forEach((value, index) => {
      console.log(`${index + 1}. "${value}"`);
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    const hasTargetValue = uniqueValues.includes('–¢–∏–ø–æ–≤–æ–π –∫–æ—Ä–ø—É—Å.–¢–µ—Ö.—ç—Ç–∞–∂');
    console.log(`\n‚úì –ó–Ω–∞—á–µ–Ω–∏–µ '–¢–∏–ø–æ–≤–æ–π –∫–æ—Ä–ø—É—Å.–¢–µ—Ö.—ç—Ç–∞–∂' ${hasTargetValue ? '–ù–ê–ô–î–ï–ù–û' : '–ù–ï –ù–ê–ô–î–ï–ù–û'} –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å—è—Ö`);

    // –ü—Ä–æ–≤–µ—Ä–∏–º —Ç–∞–∫–∂–µ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
    const { count, error: countError } = await supabase
      .from('blocks')
      .select('*', { count: 'exact', head: true });

    if (!countError) {
      console.log(`\n‚ÑπÔ∏è –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ blocks: ${count}`);
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
}

getAllEnumValues();
// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π –ë–î –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ 20K+ –∑–∞–ø–∏—Å–µ–π
import { createClient } from '@supabase/supabase-js'
import { readFileSync } from 'fs'

const supabaseUrl = 'https://hfqgcaxmufzitdfafdlp.supabase.co'
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImhmcWdjYXhtdWZ6aXRkZmFmZGxwIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ4OTI5MjMsImV4cCI6MjA3MDQ2ODkyM30.XnOEKdwZdJM-DilhrjZ7PdzHU2rx3L72oQ1rJYo5pXc'
const supabase = createClient(supabaseUrl, supabaseKey)

async function applyOptimizations() {
  console.log('üöÄ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π –ë–î –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å 20K+ –∑–∞–ø–∏—Å—è–º–∏...')

  try {
    // 1. –ß–∏—Ç–∞–µ–º –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    console.log('\nüìã –≠–¢–ê–ü 1: –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö SQL —Ñ—É–Ω–∫—Ü–∏–π...')

    let functionsSQL
    try {
      functionsSQL = readFileSync('sql/chessboard_optimized_functions.sql', 'utf8')
    } catch (e) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª sql/chessboard_optimized_functions.sql')
      console.log('   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —á—Ç–µ–Ω–∏—è')
      return
    }

    // –†–∞–∑–±–∏–≤–∞–µ–º SQL –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    const functions = functionsSQL
      .split('-- =============================================================================')
      .filter(chunk => chunk.trim().length > 0)

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${functions.length} –±–ª–æ–∫–æ–≤ SQL –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è`)

    for (let i = 0; i < functions.length; i++) {
      const func = functions[i].trim()
      if (func && func.includes('CREATE OR REPLACE FUNCTION')) {
        console.log(`üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ ${i + 1}...`)

        try {
          // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–∞–∂–¥—É—é —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–¥–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ supabase-js
          const { error } = await supabase.rpc('query', { sql: func })

          if (error) {
            console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ ${i + 1}:`, error.message)
          } else {
            console.log(`‚úÖ –§—É–Ω–∫—Ü–∏—è ${i + 1} –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`)
          }
        } catch (e) {
          console.log(`‚ÑπÔ∏è –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ ${i + 1}`)
          // –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è

          // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –µ—ë —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
          const funcNameMatch = func.match(/CREATE OR REPLACE FUNCTION\s+(\w+)/i)
          if (funcNameMatch) {
            const funcName = funcNameMatch[1]
            console.log(`   –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏: ${funcName}`)

            // –ü—Ä–æ–±—É–µ–º –≤—ã–∑–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            try {
              if (funcName === 'get_chessboard_page') {
                // –¢–µ—Å—Ç–æ–≤—ã–π –≤—ã–∑–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                const { data: testResult } = await supabase.rpc(funcName, {
                  p_project_id: 'cf1eb082-1907-49c8-92e7-2616e4b2027d',
                  p_page_size: 1,
                  p_offset: 0
                })
                console.log(`   ‚úÖ –§—É–Ω–∫—Ü–∏—è ${funcName} —Ä–∞–±–æ—Ç–∞–µ—Ç: –ø–æ–ª—É—á–µ–Ω–æ ${testResult?.length || 0} –∑–∞–ø–∏—Å–µ–π`)
              }
            } catch (testError) {
              console.log(`   ‚ùå –§—É–Ω–∫—Ü–∏—è ${funcName} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞:`, testError.message)
            }
          }
        }
      }
    }

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–ª—é—á–µ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
    console.log('\nüìã –≠–¢–ê–ü 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–π...')

    const functionsToTest = [
      { name: 'get_chessboard_page', required: true },
      { name: 'get_chessboard_filter_stats', required: false },
      { name: 'get_chessboard_ids_filtered', required: false }
    ]

    const kingProjectId = 'cf1eb082-1907-49c8-92e7-2616e4b2027d'

    for (const func of functionsToTest) {
      try {
        console.log(`üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏: ${func.name}`)

        let result
        if (func.name === 'get_chessboard_page') {
          result = await supabase.rpc(func.name, {
            p_project_id: kingProjectId,
            p_page_size: 5,
            p_offset: 0
          })
        } else if (func.name === 'get_chessboard_filter_stats') {
          result = await supabase.rpc(func.name, {
            p_project_id: kingProjectId
          })
        } else if (func.name === 'get_chessboard_ids_filtered') {
          result = await supabase.rpc(func.name, {
            p_project_id: kingProjectId
          })
        }

        if (result.error) {
          console.log(`   ‚ùå ${func.name}: ${result.error.message}`)
          if (func.required) {
            console.log('   üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!')
          }
        } else {
          console.log(`   ‚úÖ ${func.name}: —Ä–∞–±–æ—Ç–∞–µ—Ç (${result.data?.length || 'N/A'} –∑–∞–ø–∏—Å–µ–π)`)
        }
      } catch (e) {
        console.log(`   ‚ùå ${func.name}: ${e.message}`)
      }
    }

    // 3. –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    console.log('\nüìã –≠–¢–ê–ü 3: –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...')

    const testStart = performance.now()

    try {
      const { data: performanceData, error: perfError } = await supabase.rpc('get_chessboard_page', {
        p_project_id: kingProjectId,
        p_page_size: 100,
        p_offset: 0
      })

      const testEnd = performance.now()
      const testDuration = testEnd - testStart

      if (perfError) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: ${perfError.message}`)
      } else {
        const totalCount = performanceData?.[0]?.total_count || 0
        console.log(`üìä –†–ï–ó–£–õ–¨–¢–ê–¢ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò:`)
        console.log(`   –ó–∞–ø–∏—Å–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: ${performanceData?.length || 0}`)
        console.log(`   –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${totalCount}`)
        console.log(`   –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${Math.round(testDuration)}ms`)
        console.log(`   –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${Math.round(1000 / testDuration)} —Å—Ç—Ä–∞–Ω–∏—Ü/—Å–µ–∫`)

        if (testDuration < 1000) {
          console.log(`   ‚úÖ –û—Ç–ª–∏—á–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è 20K –∑–∞–ø–∏—Å–µ–π`)
        } else if (testDuration < 3000) {
          console.log(`   ‚ö†Ô∏è –ü—Ä–∏–µ–º–ª–µ–º–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å`)
        } else {
          console.log(`   ‚ùå –ú–µ–¥–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –Ω—É–∂–Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è`)
        }
      }
    } catch (e) {
      console.log(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: ${e.message}`)
    }

    console.log('\nüéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:')
    console.log('   –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã')
    console.log('   –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–æ–≤—ã–π —Ö—É–∫ useOptimizedChessboardData –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏')
    console.log('   –°–µ—Ä–≤–µ—Ä–Ω–∞—è –ø–∞–≥–∏–Ω–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ —Å 20K+ –∑–∞–ø–∏—Å—è–º–∏')

  } catch (error) {
    console.error('üí• –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π:', error)
  }
}

applyOptimizations()
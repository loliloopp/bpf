import { supabase } from '@/lib/supabase'
import type { BlockType } from '../model/types'

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤
export interface Project {
  id: string
  name: string
  address: string
}

export interface Block {
  id: string
  name: string
  type_blocks?: BlockType
}

export interface ProjectBlock {
  project_id: string
  block_id: string
  created_at: string
  updated_at: string
}

export interface BlockFloorMapping {
  id: string
  block_id: string
  floor_number: number
  type_blocks: BlockType
  created_at: string
  updated_at: string
}

export interface BlockConnectionsMapping {
  id: string
  project_id: string
  from_block_id: string
  to_block_id?: string
  connection_type: BlockType
  floors_count: number
  created_at: string
  updated_at: string
}

// API —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏
export const projectsApi = {
  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã
  async getProjects() {
    if (!supabase) throw new Error('Supabase client not initialized')
    const { data, error } = await supabase
      .from('projects')
      .select('*')
      .order('created_at', { ascending: false })

    if (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤:', error)
      throw error
    }

    return data as Project[]
  },

  // –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–µ–∫—Ç –ø–æ ID
  async getProjectById(id: string) {
    if (!supabase) throw new Error('Supabase client not initialized')
    const { data, error } = await supabase.from('projects').select('*').eq('id', id).single()

    if (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:', error)
      throw error
    }

    return data as Project
  },

  // –ü–æ–ª—É—á–∏—Ç—å –±–ª–æ–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
  async getProjectBlocks(projectId: string) {
    if (!supabase) throw new Error('Supabase client not initialized')
    const { data, error } = await supabase
      .from('projects_blocks')
      .select(
        `
        project_id,
        block_id,
        created_at,
        updated_at,
        blocks (
          id,
          name,
          type_blocks,
          created_at,
          updated_at
        )
      `,
      )
      .eq('project_id', projectId)

    if (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–ª–æ–∫–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞:', error)
      throw error
    }

    return data
  },

  // –ü–æ–ª—É—á–∏—Ç—å —ç—Ç–∞–∂–∏ –±–ª–æ–∫–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
  async getProjectBlockFloors(projectId: string) {
    if (!supabase) throw new Error('Supabase client not initialized')
    const { data, error } = await supabase
      .from('block_floor_mapping')
      .select(
        `
        id,
        block_id,
        floor_number,
        type_blocks,
        created_at,
        updated_at,
        blocks!inner (
          id,
          name,
          projects_blocks!inner (
            project_id
          )
        )
      `,
      )
      .eq('blocks.projects_blocks.project_id', projectId)
      .order('floor_number', { ascending: false })

    if (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —ç—Ç–∞–∂–µ–π –±–ª–æ–∫–æ–≤:', error)
      throw error
    }

    return data as BlockFloorMapping[]
  },

  // –ü–æ–ª—É—á–∏—Ç—å —Å–≤—è–∑–∏ –º–µ–∂–¥—É –±–ª–æ–∫–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–∞
  async getProjectBlockConnections(projectId: string) {
    if (!supabase) throw new Error('Supabase client not initialized')
    const { data, error } = await supabase
      .from('block_connections_mapping')
      .select(
        `
        id,
        project_id,
        from_block_id,
        to_block_id,
        connection_type,
        floors_count,
        created_at,
        updated_at,
        from_block:blocks!from_block_id (
          id,
          name
        ),
        to_block:blocks!to_block_id (
          id,
          name
        )
      `,
      )
      .eq('project_id', projectId)

    if (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤—è–∑–µ–π –±–ª–æ–∫–æ–≤:', error)
      throw error
    }

    return data as BlockConnectionsMapping[]
  },
}

// API —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–ª–æ–∫–∞–º–∏
export const blocksApi = {
  // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –±–ª–æ–∫
  async createBlock(name: string, type_blocks: BlockType = '–¢–∏–ø–æ–≤–æ–π –∫–æ—Ä–ø—É—Å') {
    if (!supabase) throw new Error('Supabase client not initialized')

    console.log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –±–ª–æ–∫–∞:', name, '—Ç–∏–ø–∞:', type_blocks)

    // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –±–ª–æ–∫ —Å type_blocks, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è - —Å–æ–∑–¥–∞–µ–º –±–µ–∑ –Ω–µ–≥–æ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    let insertData: any = { name, type_blocks }
    let { data, error } = await supabase.from('blocks').insert(insertData).select().single()

    if (
      error &&
      error.message.includes('column "type_blocks" of relation "blocks" does not exist')
    ) {
      console.warn('‚ö†Ô∏è –ö–æ–ª–æ–Ω–∫–∞ type_blocks –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –±–ª–æ–∫ –±–µ–∑ –Ω–µ—ë')
      insertData = { name }
      const fallbackResult = await supabase.from('blocks').insert(insertData).select().single()
      data = fallbackResult.data
      error = fallbackResult.error
    }

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–ª–æ–∫–∞:', error)
      throw error
    }

    console.log('‚úÖ –ë–ª–æ–∫ —Å–æ–∑–¥–∞–Ω:', data)
    return data as Block
  },

  // –ü—Ä–∏–≤—è–∑–∞—Ç—å –±–ª–æ–∫ –∫ –ø—Ä–æ–µ–∫—Ç—É
  async linkBlockToProject(projectId: string, blockId: string) {
    if (!supabase) throw new Error('Supabase client not initialized')
    const { data, error } = await supabase
      .from('projects_blocks')
      .insert({ project_id: projectId, block_id: blockId })
      .select()
      .single()

    if (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –±–ª–æ–∫–∞ –∫ –ø—Ä–æ–µ–∫—Ç—É:', error)
      throw error
    }

    return data as ProjectBlock
  },

  // –î–æ–±–∞–≤–∏—Ç—å —ç—Ç–∞–∂–∏ –∫ –±–ª–æ–∫—É
  async addFloorsToBlock(
    blockId: string,
    floors: { floor_number: number; type_blocks: BlockFloorMapping['type_blocks'] }[],
  ) {
    const floorsData = floors.map((floor) => ({
      block_id: blockId,
      floor_number: floor.floor_number,
      type_blocks: floor.type_blocks,
    }))

    console.log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —ç—Ç–∞–∂–µ–π –¥–ª—è –±–ª–æ–∫–∞:', blockId)
    console.log('üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–∞–∂–µ–π:', floorsData.length)
    console.log(
      'üìã –î–µ—Ç–∞–ª–∏ —ç—Ç–∞–∂–µ–π:',
      floorsData.map((f) => `${f.floor_number}:${f.type_blocks}`).join(', '),
    )

    if (!supabase) throw new Error('Supabase client not initialized')

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    for (const floor of floorsData) {
      if (!floor.block_id || typeof floor.floor_number !== 'number' || !floor.type_blocks) {
        console.error('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —ç—Ç–∞–∂–∞:', floor)
        throw new Error(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —ç—Ç–∞–∂–∞: ${JSON.stringify(floor)}`)
      }
    }

    const { error } = await supabase.from('block_floor_mapping').upsert(floorsData, {
      onConflict: 'block_id,floor_number',
      ignoreDuplicates: false,
    })

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç—Ç–∞–∂–µ–π –∫ –±–ª–æ–∫—É:', error)
      console.error('üìä –î–∞–Ω–Ω—ã–µ –∫–æ—Ç–æ—Ä—ã–µ –ø—ã—Ç–∞–ª–∏—Å—å –≤—Å—Ç–∞–≤–∏—Ç—å:', floorsData)
      throw error
    }

    console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã —ç—Ç–∞–∂–∏ –¥–ª—è –±–ª–æ–∫–∞:', blockId)
    return [] // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤, —Ç–∞–∫ –∫–∞–∫ –Ω–∞–º –Ω–µ –Ω—É–∂–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ
  },
}

// API —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–≤—è–∑—è–º–∏ –º–µ–∂–¥—É –±–ª–æ–∫–∞–º–∏
export const blockConnectionsApi = {
  // –°–æ–∑–¥–∞—Ç—å —Å–≤—è–∑—å –º–µ–∂–¥—É –±–ª–æ–∫–∞–º–∏ (—Å—Ç–∏–ª–æ–±–∞—Ç –∏–ª–∏ –ø–æ–¥–∑–µ–º–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ)
  async createBlockConnection(
    projectId: string,
    fromBlockId: string,
    toBlockId: string | null,
    connectionType: BlockConnectionsMapping['connection_type'],
    floorsCount: number = 1,
  ) {
    if (!supabase) throw new Error('Supabase client not initialized')
    const { data, error } = await supabase
      .from('block_connections_mapping')
      .insert({
        project_id: projectId,
        from_block_id: fromBlockId,
        to_block_id: toBlockId,
        connection_type: connectionType,
        floors_count: floorsCount,
      })
      .select()
      .single()

    if (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤—è–∑–∏ –±–ª–æ–∫–æ–≤:', error)
      throw error
    }

    return data as BlockConnectionsMapping
  },

  // –£–¥–∞–ª–∏—Ç—å —Å–≤—è–∑—å –º–µ–∂–¥—É –±–ª–æ–∫–∞–º–∏
  async deleteBlockConnection(connectionId: string) {
    if (!supabase) throw new Error('Supabase client not initialized')
    const { error } = await supabase
      .from('block_connections_mapping')
      .delete()
      .eq('id', connectionId)

    if (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–≤—è–∑–∏ –±–ª–æ–∫–æ–≤:', error)
      throw error
    }
  },

  // –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–∞–∂–µ–π —Å—Ç–∏–ª–æ–±–∞—Ç–∞
  async updateStylobateFloors(connectionId: string, floorsCount: number) {
    if (!supabase) throw new Error('Supabase client not initialized')
    const { data, error } = await supabase
      .from('block_connections_mapping')
      .update({ floors_count: floorsCount, updated_at: new Date().toISOString() })
      .eq('id', connectionId)
      .select()
      .single()

    if (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç—Ç–∞–∂–µ–π —Å—Ç–∏–ª–æ–±–∞—Ç–∞:', error)
      throw error
    }

    return data as BlockConnectionsMapping
  },
}

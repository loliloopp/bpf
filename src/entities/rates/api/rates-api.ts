import { supabase } from '@/lib/supabase'
import type { Rate, RateWithRelations, RateFormData } from '../model/types'

export const ratesApi = {
  async getAll(): Promise<RateWithRelations[]> {
    console.log('üîç ratesApi.getAll() - –Ω–∞—á–∞–ª–æ –∑–∞–ø—Ä–æ—Å–∞')
    if (!supabase) {
      console.error('‚ùå Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')
      throw new Error('Supabase is not configured')
    }

    const BATCH_SIZE = 1000
    let allData: any[] = []
    let from = 0
    let hasMore = true

    while (hasMore) {
      const to = from + BATCH_SIZE - 1
      const { data, error } = await supabase
        .from('rates')
        .select(
          `
          *,
          unit:units(id, name),
          detail_mapping:rates_detail_cost_categories_mapping(
            detail_cost_category:detail_cost_categories(id, name, cost_category:cost_categories(id, name, number))
          )
        `,
        )
        .order('created_at', { ascending: false })
        .range(from, to)

      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ rates:', error)
        throw error
      }

      if (!data || data.length === 0) {
        hasMore = false
      } else {
        allData = [...allData, ...data]
        console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω –±–∞—Ç—á ${from}-${to}, –≤—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${allData.length}`)

        if (data.length < BATCH_SIZE) {
          hasMore = false
        } else {
          from += BATCH_SIZE
        }
      }
    }

    const result = allData.map(({ detail_mapping, ...rate }) => {
      const detailCategory = detail_mapping?.[0]?.detail_cost_category
      return {
        ...rate,
        detail_cost_category: detailCategory || null,
        detail_cost_category_id: detailCategory?.id,
      }
    }) as RateWithRelations[]

    console.log('‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã', { count: result.length })
    return result
  },

  async create(data: RateFormData): Promise<Rate> {
    if (!supabase) throw new Error('Supabase is not configured')

    const { detail_cost_category_id, ...rateData } = data

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è active, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ
    const rateDataWithDefaults = {
      ...rateData,
      active: rateData.active !== undefined ? rateData.active : true
    }

    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Ä–∞—Å—Ü–µ–Ω–∫–∏
    const { data: rate, error: rateError } = await supabase
      .from('rates')
      .insert({ ...rateDataWithDefaults })
      .select()
      .single()

    if (rateError) {
      console.error('Failed to create rate:', rateError)
      throw rateError
    }

    // –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑—å —Å –≤–∏–¥–æ–º –∑–∞—Ç—Ä–∞—Ç
    if (detail_cost_category_id) {
      const { error: mappingError } = await supabase
        .from('rates_detail_cost_categories_mapping')
        .insert({ rate_id: rate.id, detail_cost_category_id })

      if (mappingError) {
        console.error('Failed to create rate-detail cost category mapping:', mappingError)
        throw mappingError
      }
    }

    return rate as Rate
  },

  async update(id: string, data: RateFormData): Promise<Rate> {
    if (!supabase) throw new Error('Supabase is not configured')

    const { detail_cost_category_id, ...rateData } = data

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å —Ä–∞—Å—Ü–µ–Ω–∫–∏ (–≤–∫–ª—é—á–∞—è –ø–æ–ª–µ active)
    const { data: rate, error: rateError } = await supabase
      .from('rates')
      .update({ ...rateData })
      .eq('id', id)
      .select()
      .single()

    if (rateError) {
      console.error('Failed to update rate:', rateError)
      throw rateError
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤—è–∑—å —Å –≤–∏–¥–æ–º –∑–∞—Ç—Ä–∞—Ç
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–≤—è–∑–∏
    const { error: deleteError } = await supabase
      .from('rates_detail_cost_categories_mapping')
      .delete()
      .eq('rate_id', id)

    if (deleteError) {
      console.error('Failed to delete old rate-detail cost category mapping:', deleteError)
      throw deleteError
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–≤—è–∑—å
    if (detail_cost_category_id) {
      const { error: mappingError } = await supabase
        .from('rates_detail_cost_categories_mapping')
        .insert({ rate_id: id, detail_cost_category_id })

      if (mappingError) {
        console.error('Failed to create new rate-detail cost category mapping:', mappingError)
        throw mappingError
      }
    }

    return rate as Rate
  },

  async delete(id: string): Promise<void> {
    if (!supabase) throw new Error('Supabase is not configured')

    const { error } = await supabase.from('rates').delete().eq('id', id)

    if (error) {
      console.error('Failed to delete rate:', error)
      throw error
    }
  },

  async bulkDelete(ids: string[]): Promise<void> {
    if (!supabase) throw new Error('Supabase is not configured')

    const { error } = await supabase.from('rates').delete().in('id', ids)

    if (error) {
      console.error('Failed to bulk delete rates:', error)
      throw error
    }
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø–æ ID —Ä–∞—Å—Ü–µ–Ω–∫–∏
  async getUnitByRateId(rateId: string): Promise<string | null> {
    if (!supabase) throw new Error('Supabase is not configured')

    const { data, error } = await supabase
      .from('rates')
      .select('unit:units(name)')
      .eq('id', rateId)
      .single()

    if (error) {
      console.error('Failed to get unit by rate id:', error)
      return null
    }

    return data?.unit?.name || null
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç –ø–æ –≤–∏–¥—É –∑–∞—Ç—Ä–∞—Ç —á–µ—Ä–µ–∑ rates_detail_cost_categories_mapping
  async getWorksByCategory(
    costTypeId?: string,
    costCategoryId?: string,
  ): Promise<{ value: string; label: string }[]> {
    if (!supabase) throw new Error('Supabase is not configured')

    // –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω –Ω–∏ –≤–∏–¥ –∑–∞—Ç—Ä–∞—Ç, –Ω–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∑–∞—Ç—Ä–∞—Ç - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
    if (!costTypeId && !costCategoryId) {
      return []
    }


    // –ó–∞–ø—Ä–æ—Å: –ø–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞—Å—Ü–µ–Ω–∫–∏ —Å –∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∑–∞—Ç—Ä–∞—Ç
    const { data, error } = await supabase.from('rates').select(`
        id,
        work_name,
        active,
        rates_detail_cost_categories_mapping(detail_cost_category_id)
      `)
      .eq('active', true) // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞—Å—Ü–µ–Ω–∫–∏


    if (error) {
      console.error('Failed to get works by category:', error)
      throw error
    }

    if (!data || data.length === 0) {
      return []
    }

    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–∞—Å—Ü–µ–Ω–∫–∏ –ø–æ –≤–∏–¥—É –∑–∞—Ç—Ä–∞—Ç (–∫–∞–∫ –≤ backup —Ñ–∞–π–ª–µ)
    const filteredRates = data.filter((rate) => {
      const categoryIds =
        rate.rates_detail_cost_categories_mapping?.map((m) =>
          m.detail_cost_category_id.toString(),
        ) ?? []

      // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∏ –∫–∞–∫ —Å—Ç—Ä–æ–∫—É, –∏ –∫–∞–∫ —á–∏—Å–ª–æ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
      const targetIdAsString = costTypeId?.toString() || ''
      const targetIdAsNumber = parseInt(costTypeId || '0')
      const categoryIdsAsNumbers = rate.rates_detail_cost_categories_mapping?.map((m) => m.detail_cost_category_id) ?? []


      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞: —Å—Ç—Ä–æ–∫–∞ –∏ —á–∏—Å–ª–æ
      return categoryIds.includes(targetIdAsString) || categoryIdsAsNumbers.includes(targetIdAsNumber)
    })

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ä–∞–±–æ—Ç—ã
    const result = filteredRates
      .filter((rate) => rate.work_name) // –¢–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–∏ —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ —Ä–∞–±–æ—Ç–∞–º–∏
      .map((rate) => ({
        value: rate.id.toString(), // ID —Ä–∞—Å—Ü–µ–Ω–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ chessboard_rates_mapping
        label: rate.work_name, // –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      }))
      .sort((a, b) => a.label.localeCompare(b.label)) // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ä–∞–±–æ—Ç—ã

    return result
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–±–æ—á–∏—Ö –Ω–∞–±–æ—Ä–æ–≤ –ø–æ –≤–∏–¥—É –∑–∞—Ç—Ä–∞—Ç –¥–ª—è —Å—Ç–æ–ª–±—Ü–∞ "–†–∞–±–æ—á–∏–π –Ω–∞–±–æ—Ä" –≤ —à–∞—Ö–º–∞—Ç–∫–µ
  async getWorkSetsByCategory(costTypeId?: string, costCategoryId?: string): Promise<{ value: string; label: string }[]> {
    if (!supabase) throw new Error('Supabase is not configured')

    // –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω –≤–∏–¥ –∑–∞—Ç—Ä–∞—Ç - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
    if (!costTypeId) {
      console.log('‚ùå getWorkSetsByCategory: costTypeId –Ω–µ —É–∫–∞–∑–∞–Ω') // LOG
      return []
    }

    console.log('üîç getWorkSetsByCategory –≤—ã–∑–≤–∞–Ω —Å:', { costTypeId, costCategoryId }) // LOG

    // –®–ê–ì 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–≤—è–∑–∫–∏ (–∫–∞—Ç–µ–≥–æ—Ä–∏—è + –≤–∏–¥ –∑–∞—Ç—Ä–∞—Ç) —á–µ—Ä–µ–∑ detail_cost_categories_mapping
    if (costCategoryId) {
      const categoryIdInt = parseInt(costCategoryId)
      const costTypeIdInt = parseInt(costTypeId)

      console.log('üîç –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ –∫ detail_cost_categories_mapping:', { // LOG
        categoryId: costCategoryId,
        categoryIdInt,
        costTypeId,
        costTypeIdInt
      })

      const { data: mappingExists, error: mappingError } = await supabase
        .from('detail_cost_categories_mapping')
        .select('*')
        .eq('cost_category_id', categoryIdInt)
        .eq('detail_cost_category_id', costTypeIdInt)
        .limit(1)

      console.log('üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ detail_cost_categories_mapping:', mappingExists) // LOG
      console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∫–∏ (categoryId + costTypeId):', { // LOG
        categoryId: costCategoryId,
        costTypeId,
        exists: mappingExists && mappingExists.length > 0
      })

      if (mappingError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–≤—è–∑–∫–∏:', mappingError) // LOG
        throw mappingError
      }

      // –ï—Å–ª–∏ —Å–≤—è–∑–∫–∏ –Ω–µ—Ç –≤ detail_cost_categories_mapping - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
      if (!mappingExists || mappingExists.length === 0) {
        console.log('‚ö†Ô∏è –ù–µ—Ç —Å–≤—è–∑–∫–∏ (categoryId + costTypeId) –≤ detail_cost_categories_mapping - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º []') // LOG
        return []
      }
    }

    // –®–ê–ì 2: –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞—Å—Ü–µ–Ω–∫–∏ —Å —Ä–∞–±–æ—á–∏–º–∏ –Ω–∞–±–æ—Ä–∞–º–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –≤–∏–¥–æ–º –∑–∞—Ç—Ä–∞—Ç
    const { data, error } = await supabase.from('rates').select(`
        id,
        work_set,
        active,
        rates_detail_cost_categories_mapping(detail_cost_category_id)
      `)
      .eq('active', true) // –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞—Å—Ü–µ–Ω–∫–∏
      .not('work_set', 'is', null) // –¢–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–∏ —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º work_set

    console.log('üìä –ü–æ–ª—É—á–µ–Ω–æ —Ä–∞—Å—Ü–µ–Ω–æ–∫ –∏–∑ –ë–î:', data?.length || 0) // LOG

    if (error) {
      console.error('‚ùå Failed to get work sets by category:', error)
      throw error
    }

    if (!data || data.length === 0) {
      console.log('‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î') // LOG
      return []
    }

    // –®–ê–ì 3: –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–∞—Å—Ü–µ–Ω–∫–∏ –ø–æ –≤–∏–¥—É –∑–∞—Ç—Ä–∞—Ç
    const targetIdAsString = costTypeId.toString()
    const targetIdAsNumber = parseInt(costTypeId)

    console.log('üîç –ò—â–µ–º —Ä–∞—Å—Ü–µ–Ω–∫–∏ —Å detail_cost_category_id:', { targetIdAsString, targetIdAsNumber }) // LOG

    // –ü—Ä–æ–≤–µ—Ä–∏–º –ø–µ—Ä–≤—ã–µ 3 –∑–∞–ø–∏—Å–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log('üîç –ü–µ—Ä–≤—ã–µ 3 —Ä–∞—Å—Ü–µ–Ω–∫–∏ –∏–∑ –ë–î:', data.slice(0, 3).map(r => ({ // LOG
      id: r.id,
      work_set: r.work_set,
      mapping: r.rates_detail_cost_categories_mapping,
      mappingDetailIds: r.rates_detail_cost_categories_mapping?.map(m => m.detail_cost_category_id) || []
    })))

    // –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—å –æ–¥–Ω–∞ —Ä–∞—Å—Ü–µ–Ω–∫–∞ —Å –Ω—É–∂–Ω—ã–º detail_cost_category_id
    const sampleMatchingRate = data.find(r =>
      r.rates_detail_cost_categories_mapping?.some(m =>
        m.detail_cost_category_id === targetIdAsNumber ||
        m.detail_cost_category_id.toString() === targetIdAsString
      )
    )
    console.log('üîç –ù–∞–π–¥–µ–Ω–∞ –ª–∏ —Ö–æ—Ç—å –æ–¥–Ω–∞ —Ä–∞—Å—Ü–µ–Ω–∫–∞ —Å costTypeId=' + targetIdAsString + '?', !!sampleMatchingRate) // LOG
    if (sampleMatchingRate) {
      console.log('üîç –ü—Ä–∏–º–µ—Ä —Ä–∞—Å—Ü–µ–Ω–∫–∏ —Å –Ω—É–∂–Ω—ã–º costTypeId:', { // LOG
        id: sampleMatchingRate.id,
        work_set: sampleMatchingRate.work_set,
        mappingDetailIds: sampleMatchingRate.rates_detail_cost_categories_mapping?.map(m => m.detail_cost_category_id)
      })
    }

    const filteredRates = data.filter((rate) => {
      const categoryIds = rate.rates_detail_cost_categories_mapping?.map((m) => m.detail_cost_category_id.toString()) ?? []
      const categoryIdsAsNumbers = rate.rates_detail_cost_categories_mapping?.map((m) => m.detail_cost_category_id) ?? []

      const matches = categoryIds.includes(targetIdAsString) || categoryIdsAsNumbers.includes(targetIdAsNumber)
      return matches
    })

    console.log('üîç –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ —Ä–∞—Å—Ü–µ–Ω–æ–∫:', filteredRates.length, '–∏–∑', data.length) // LOG
    if (filteredRates.length > 0) {
      console.log('üîç –ü–µ—Ä–≤–∞—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–∞—Å—Ü–µ–Ω–∫–∞:', { // LOG
        id: filteredRates[0].id,
        work_set: filteredRates[0].work_set,
        mapping: filteredRates[0].rates_detail_cost_categories_mapping
      })
    }

    // –®–ê–ì 4: –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã —Ä–∞–±–æ—á–∏—Ö –Ω–∞–±–æ—Ä–æ–≤ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    const uniqueWorkSets = new Map<string, string>()
    filteredRates.forEach((rate) => {
      if (rate.work_set && !uniqueWorkSets.has(rate.id)) {
        uniqueWorkSets.set(rate.id, rate.work_set)
      }
    })

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
    const result = Array.from(uniqueWorkSets.entries())
      .map(([rateId, workSetName]) => ({
        value: rateId, // ID –∑–∞–ø–∏—Å–∏ rates –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ chessboard_rates_mapping.work_set
        label: workSetName, // –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –Ω–∞–±–æ—Ä–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      }))
      .sort((a, b) => a.label.localeCompare(b.label))

    console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç getWorkSetsByCategory:', result.length, '—É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–∞–±–æ—á–∏—Ö –Ω–∞–±–æ—Ä–æ–≤') // LOG

    return result
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Ä–∞–±–æ—á–µ–º—É –Ω–∞–±–æ—Ä—É (–ø–æ rate_id)
  async getWorksByWorkSet(workSetRateId?: string): Promise<{ value: string; label: string }[]> {
    if (!supabase) throw new Error('Supabase is not configured')

    // –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω ID —Ä–∞–±–æ—á–µ–≥–æ –Ω–∞–±–æ—Ä–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
    if (!workSetRateId) {
      return []
    }


    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ä–∞—Å—Ü–µ–Ω–∫—É –ø–æ ID —Ä–∞–±–æ—á–µ–≥–æ –Ω–∞–±–æ—Ä–∞
    const { data, error } = await supabase
      .from('rates')
      .select('id, work_name, work_set, active')
      .eq('id', workSetRateId)
      .eq('active', true) // –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞—Å—Ü–µ–Ω–∫–∏
      .single()


    if (error) {
      console.error('Failed to get works by work set:', error)
      throw error
    }

    if (!data) {
      return []
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –Ω–∞–±–æ—Ä–∞
    const result = [{
      value: data.id.toString(), // ID —Ä–∞—Å—Ü–µ–Ω–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ chessboard_rates_mapping
      label: data.work_name, // –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    }]

    return result
  },
}

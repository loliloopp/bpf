import { supabase } from '@/lib/supabase'
import type { Rate, RateWithRelations, RateFormData } from '../model/types'

export const ratesApi = {
  async getAll(): Promise<RateWithRelations[]> {
    console.log('üîç ratesApi.getAll() - –Ω–∞—á–∞–ª–æ –∑–∞–ø—Ä–æ—Å–∞')
    if (!supabase) {
      console.error('‚ùå Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')
      throw new Error('Supabase is not configured')
    }

    const { data, error } = await supabase
      .from('rates')
      .select(
        `
        *,
        unit:units(id, name),
        detail_mapping:rates_detail_cost_categories_mapping(
          detail_cost_category:detail_cost_categories(id, name, cost_category:cost_categories(id, name, number))
        )
      `,
      )
      .order('created_at', { ascending: false })

    console.log('üìä SQL –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω', { data, error })

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ rates:', error)
      throw error
    }

    const result = data.map(({ detail_mapping, ...rate }) => {
      const detailCategory = detail_mapping?.[0]?.detail_cost_category
      return {
        ...rate,
        detail_cost_category: detailCategory || null,
        detail_cost_category_id: detailCategory?.id,
      }
    }) as RateWithRelations[]

    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã', { count: result.length, result })
    return result
  },

  async create(data: RateFormData): Promise<Rate> {
    if (!supabase) throw new Error('Supabase is not configured')

    const { detail_cost_category_id, ...rateData } = data

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è active, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ
    const rateDataWithDefaults = {
      ...rateData,
      active: rateData.active !== undefined ? rateData.active : true
    }

    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Ä–∞—Å—Ü–µ–Ω–∫–∏
    const { data: rate, error: rateError } = await supabase
      .from('rates')
      .insert({ ...rateDataWithDefaults })
      .select()
      .single()

    if (rateError) {
      console.error('Failed to create rate:', rateError)
      throw rateError
    }

    // –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑—å —Å –≤–∏–¥–æ–º –∑–∞—Ç—Ä–∞—Ç
    if (detail_cost_category_id) {
      const { error: mappingError } = await supabase
        .from('rates_detail_cost_categories_mapping')
        .insert({ rate_id: rate.id, detail_cost_category_id })

      if (mappingError) {
        console.error('Failed to create rate-detail cost category mapping:', mappingError)
        throw mappingError
      }
    }

    return rate as Rate
  },

  async update(id: string, data: RateFormData): Promise<Rate> {
    if (!supabase) throw new Error('Supabase is not configured')

    const { detail_cost_category_id, ...rateData } = data

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å —Ä–∞—Å—Ü–µ–Ω–∫–∏ (–≤–∫–ª—é—á–∞—è –ø–æ–ª–µ active)
    const { data: rate, error: rateError } = await supabase
      .from('rates')
      .update({ ...rateData })
      .eq('id', id)
      .select()
      .single()

    if (rateError) {
      console.error('Failed to update rate:', rateError)
      throw rateError
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤—è–∑—å —Å –≤–∏–¥–æ–º –∑–∞—Ç—Ä–∞—Ç
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–≤—è–∑–∏
    const { error: deleteError } = await supabase
      .from('rates_detail_cost_categories_mapping')
      .delete()
      .eq('rate_id', id)

    if (deleteError) {
      console.error('Failed to delete old rate-detail cost category mapping:', deleteError)
      throw deleteError
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–≤—è–∑—å
    if (detail_cost_category_id) {
      const { error: mappingError } = await supabase
        .from('rates_detail_cost_categories_mapping')
        .insert({ rate_id: id, detail_cost_category_id })

      if (mappingError) {
        console.error('Failed to create new rate-detail cost category mapping:', mappingError)
        throw mappingError
      }
    }

    return rate as Rate
  },

  async delete(id: string): Promise<void> {
    if (!supabase) throw new Error('Supabase is not configured')

    const { error } = await supabase.from('rates').delete().eq('id', id)

    if (error) {
      console.error('Failed to delete rate:', error)
      throw error
    }
  },

  async bulkDelete(ids: string[]): Promise<void> {
    if (!supabase) throw new Error('Supabase is not configured')

    const { error } = await supabase.from('rates').delete().in('id', ids)

    if (error) {
      console.error('Failed to bulk delete rates:', error)
      throw error
    }
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø–æ ID —Ä–∞—Å—Ü–µ–Ω–∫–∏
  async getUnitByRateId(rateId: string): Promise<string | null> {
    if (!supabase) throw new Error('Supabase is not configured')

    const { data, error } = await supabase
      .from('rates')
      .select('unit:units(name)')
      .eq('id', rateId)
      .single()

    if (error) {
      console.error('Failed to get unit by rate id:', error)
      return null
    }

    return data?.unit?.name || null
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç –ø–æ –≤–∏–¥—É –∑–∞—Ç—Ä–∞—Ç —á–µ—Ä–µ–∑ rates_detail_cost_categories_mapping
  async getWorksByCategory(
    costTypeId?: string,
    costCategoryId?: string,
  ): Promise<{ value: string; label: string }[]> {
    if (!supabase) throw new Error('Supabase is not configured')

    // –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω –Ω–∏ –≤–∏–¥ –∑–∞—Ç—Ä–∞—Ç, –Ω–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∑–∞—Ç—Ä–∞—Ç - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
    if (!costTypeId && !costCategoryId) {
      return []
    }

    console.log('üîç getWorksByCategory called with:', { costTypeId, costCategoryId }) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

    // –ó–∞–ø—Ä–æ—Å: –ø–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞—Å—Ü–µ–Ω–∫–∏ —Å –∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∑–∞—Ç—Ä–∞—Ç
    const { data, error } = await supabase.from('rates').select(`
        id,
        work_name,
        active,
        rates_detail_cost_categories_mapping(detail_cost_category_id)
      `)
      .eq('active', true) // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞—Å—Ü–µ–Ω–∫–∏

    console.log('üìä SQL —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', { data, error }) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

    if (error) {
      console.error('Failed to get works by category:', error)
      throw error
    }

    if (!data || data.length === 0) {
      console.log('‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è costTypeId:', costTypeId) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
      return []
    }

    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–∞—Å—Ü–µ–Ω–∫–∏ –ø–æ –≤–∏–¥—É –∑–∞—Ç—Ä–∞—Ç (–∫–∞–∫ –≤ backup —Ñ–∞–π–ª–µ)
    const filteredRates = data.filter((rate) => {
      const categoryIds =
        rate.rates_detail_cost_categories_mapping?.map((m) =>
          m.detail_cost_category_id.toString(),
        ) ?? []

      // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∏ –∫–∞–∫ —Å—Ç—Ä–æ–∫—É, –∏ –∫–∞–∫ —á–∏—Å–ª–æ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
      const targetIdAsString = costTypeId?.toString() || ''
      const targetIdAsNumber = parseInt(costTypeId || '0')
      const categoryIdsAsNumbers = rate.rates_detail_cost_categories_mapping?.map((m) => m.detail_cost_category_id) ?? []

      console.log('üîç Checking active rate:', { // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        rateId: rate.id,
        workName: rate.work_name,
        active: rate.active,
        categoryIds,
        categoryIdsAsNumbers,
        targetCostTypeId: costTypeId,
        targetIdAsString,
        targetIdAsNumber,
        includesString: categoryIds.includes(targetIdAsString),
        includesNumber: categoryIdsAsNumbers.includes(targetIdAsNumber)
      })

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞: —Å—Ç—Ä–æ–∫–∞ –∏ —á–∏—Å–ª–æ
      return categoryIds.includes(targetIdAsString) || categoryIdsAsNumbers.includes(targetIdAsNumber)
    })

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ä–∞–±–æ—Ç—ã
    const result = filteredRates
      .filter((rate) => rate.work_name) // –¢–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–∏ —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ —Ä–∞–±–æ—Ç–∞–º–∏
      .map((rate) => ({
        value: rate.id.toString(), // ID —Ä–∞—Å—Ü–µ–Ω–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ chessboard_rates_mapping
        label: rate.work_name, // –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      }))
      .sort((a, b) => a.label.localeCompare(b.label)) // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ä–∞–±–æ—Ç—ã

    console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å—Ü–µ–Ω–æ–∫:', result) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    return result
  },
}

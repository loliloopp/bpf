import { supabase } from '@/lib/supabase'
import type {
  WorkSetRate,
  WorkSetRateFormData,
} from '../model/types'
import {
  createWorkSetRate,
  updateWorkSetRate,
  deleteWorkSetRate,
  updateRateCategoryMappings,
} from './work-set-rates-api'
import { getOrCreateWorkSet } from './work-sets-api'

// ============================================================================
// HIGH-LEVEL API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–æ—Ä–º–∞–º–∏ —Ä–∞—Å—Ü–µ–Ω–æ–∫
// (–∞–Ω–∞–ª–æ–≥ —Å—Ç–∞—Ä–æ–≥–æ ratesApi, –Ω–æ –¥–ª—è –Ω–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü work_set_rates)
// ============================================================================

/**
 * –•–µ–ª–ø–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏—è work_name_id
 */
async function resolveWorkNameId(data: WorkSetRateFormData): Promise<string> {
  if (!supabase) throw new Error('Supabase is not configured')

  // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω work_name_id - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
  if (data.work_name_id) {
    return data.work_name_id
  }

  // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω work_name (—Å—Ç—Ä–æ–∫–∞) - –∏—â–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º
  if (data.work_name) {
    const workNameTrimmed = data.work_name.trim()

    // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ (maybeSingle –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç null –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –±–µ–∑ –æ—à–∏–±–∫–∏)
    const { data: existing, error: searchError } = await supabase
      .from('work_names')
      .select('id')
      .eq('name', workNameTrimmed)
      .maybeSingle()

    if (searchError) {
      throw searchError
    }

    if (existing) {
      return existing.id
    }

    // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ
    const { data: created, error: createError } = await supabase
      .from('work_names')
      .insert({ name: workNameTrimmed })
      .select('id')
      .single()

    if (createError) throw createError
    if (!created) throw new Error('Failed to create work_name')

    return created.id
  }

  throw new Error('Either work_name_id or work_name must be provided')
}

/**
 * –•–µ–ª–ø–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏—è work_set_id
 */
async function resolveWorkSetId(data: WorkSetRateFormData): Promise<string> {
  // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω work_set_id - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
  if (data.work_set_id) {
    return data.work_set_id
  }

  // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω work_set_name (—Å—Ç—Ä–æ–∫–∞) - –ø–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º
  if (data.work_set_name) {
    const workSet = await getOrCreateWorkSet(data.work_set_name.trim())
    return workSet.id
  }

  throw new Error('Either work_set_id or work_set_name must be provided')
}

/**
 * –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Ü–µ–Ω–∫—É –∏–∑ —Ñ–æ—Ä–º—ã (—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Å–æ–∑–¥–∞–Ω–∏–µ–º work_name –∏ work_set)
 */
export async function createWorkSetRateFromForm(
  data: WorkSetRateFormData
): Promise<WorkSetRate> {
  // –†–µ–∑–æ–ª–≤–∏–º work_name_id –∏ work_set_id
  const workNameId = await resolveWorkNameId(data)
  const workSetId = await resolveWorkSetId(data)

  // –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—Ü–µ–Ω–∫—É
  const rate = await createWorkSetRate({
    work_set_id: workSetId,
    work_name_id: workNameId,
    base_rate: data.base_rate,
    unit_id: data.unit_id || null,
    active: data.active !== undefined ? data.active : true,
  })

  // –°–æ–∑–¥–∞–µ–º mapping —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∑–∞—Ç—Ä–∞—Ç (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã)
  if (data.detail_cost_category_id && data.cost_category_id) {
    await updateRateCategoryMappings(rate.id, [
      {
        detailCostCategoryId: data.detail_cost_category_id,
        costCategoryId: data.cost_category_id,
      },
    ])
  }

  return rate
}

/**
 * –û–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Ü–µ–Ω–∫—É –∏–∑ —Ñ–æ—Ä–º—ã (—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Å–æ–∑–¥–∞–Ω–∏–µ–º work_name –∏ work_set)
 */
export async function updateWorkSetRateFromForm(
  id: string,
  data: WorkSetRateFormData
): Promise<WorkSetRate> {
  // –†–µ–∑–æ–ª–≤–∏–º work_name_id –∏ work_set_id
  const workNameId = await resolveWorkNameId(data)
  const workSetId = await resolveWorkSetId(data)

  // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å—Ü–µ–Ω–∫—É
  const rate = await updateWorkSetRate(id, {
    work_set_id: workSetId,
    work_name_id: workNameId,
    base_rate: data.base_rate,
    unit_id: data.unit_id || null,
    active: data.active !== undefined ? data.active : true,
  })

  // –û–±–Ω–æ–≤–ª—è–µ–º mapping —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∑–∞—Ç—Ä–∞—Ç
  if (data.detail_cost_category_id && data.cost_category_id) {
    await updateRateCategoryMappings(rate.id, [
      {
        detailCostCategoryId: data.detail_cost_category_id,
        costCategoryId: data.cost_category_id,
      },
    ])
  } else {
    // –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã - —É–¥–∞–ª—è–µ–º –≤—Å–µ mappings
    await updateRateCategoryMappings(rate.id, [])
  }

  return rate
}

/**
 * –ú–∞—Å—Å–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Ü–µ–Ω–æ–∫ –∏–∑ —Ñ–æ—Ä–º—ã (–¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ Excel)
 */
export async function bulkCreateWorkSetRatesFromForm(
  dataArray: WorkSetRateFormData[]
): Promise<WorkSetRate[]> {
  if (!supabase) throw new Error('Supabase is not configured')
  if (dataArray.length === 0) return []

  const results: WorkSetRate[] = []
  const BATCH_SIZE = 50

  for (let i = 0; i < dataArray.length; i += BATCH_SIZE) {
    const batch = dataArray.slice(i, i + BATCH_SIZE)

    // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ (work_set_name, work_name, base_rate) —Å –∞–≥—Ä–µ–≥–∞—Ü–∏–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    const groupMap = new Map<
      string,
      {
        data: WorkSetRateFormData
        categories: Array<{ detail_cost_category_id: number; cost_category_id: number }>
      }
    >()

    batch.forEach((item) => {
      const workSetKey = item.work_set_name
        ? item.work_set_name.toLowerCase().trim()
        : `id_${item.work_set_id}`
      const workNameKey = item.work_name
        ? item.work_name.toLowerCase().trim()
        : `id_${item.work_name_id}`
      const priceKey = item.base_rate.toString()

      const key = `${workSetKey}:${workNameKey}:${priceKey}`

      if (!groupMap.has(key)) {
        groupMap.set(key, { data: item, categories: [] })
      }

      if (item.detail_cost_category_id && item.cost_category_id) {
        groupMap.get(key)!.categories.push({
          detail_cost_category_id: item.detail_cost_category_id,
          cost_category_id: item.cost_category_id,
        })
      }
    })

    const groupedBatch = Array.from(groupMap.values())
    const originalCount = batch.length
    const groupedCount = groupedBatch.length

    if (groupedCount < originalCount) {
      console.log(
        `üìä –ë–∞—Ç—á ${Math.floor(i / BATCH_SIZE) + 1}: —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–æ ${originalCount} —Å—Ç—Ä–æ–∫ ‚Üí ${groupedCount} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–∞—Å—Ü–µ–Ω–æ–∫ (${originalCount - groupedCount} —Å—Ç—Ä–æ–∫ –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—É—é —Ü–µ–Ω—É)`
      )
    }

    // –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–û —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ work_set_name –∏ work_name
    const uniqueWorkSetNames = new Set<string>()
    const uniqueWorkNames = new Set<string>()

    groupedBatch.forEach(({ data }) => {
      if (data.work_set_name) {
        uniqueWorkSetNames.add(data.work_set_name.trim())
      }
      if (data.work_name) {
        uniqueWorkNames.add(data.work_name.trim())
      }
    })

    console.log(`üì¶ –ë–∞—Ç—á ${Math.floor(i / BATCH_SIZE) + 1}: –Ω–∞–π–¥–µ–Ω–æ ${uniqueWorkSetNames.size} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö work_sets, ${uniqueWorkNames.size} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö work_names`)

    // –°–æ–∑–¥–∞—ë–º/–ø–æ–ª—É—á–∞–µ–º –≤—Å–µ work_sets –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û (—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å race condition)
    const workSetCache = new Map<string, string>()
    for (const workSetName of Array.from(uniqueWorkSetNames)) {
      try {
        const workSet = await getOrCreateWorkSet(workSetName)
        workSetCache.set(workSetName, workSet.id)
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è work_set "${workSetName}":`, error)
        throw error
      }
    }

    // –°–æ–∑–¥–∞—ë–º/–ø–æ–ª—É—á–∞–µ–º –≤—Å–µ work_names –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û
    const workNameCache = new Map<string, string>()
    for (const workName of Array.from(uniqueWorkNames)) {
      try {
        const { data: existing, error: searchError } = await supabase
          .from('work_names')
          .select('id')
          .eq('name', workName)
          .maybeSingle()

        if (searchError) throw searchError

        if (existing) {
          workNameCache.set(workName, existing.id)
        } else {
          const { data: created, error: createError } = await supabase
            .from('work_names')
            .insert({ name: workName })
            .select('id')
            .single()

          if (createError) throw createError
          if (!created) throw new Error(`Failed to create work_name "${workName}"`)
          workNameCache.set(workName, created.id)
        }
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è work_name "${workName}":`, error)
        throw error
      }
    }

    // –†–µ–∑–æ–ª–≤–∏–º work_name_id –∏ work_set_id –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏ –∏–∑ –∫–µ—à–∞
    const resolvedBatch = groupedBatch.map(({ data, categories }) => {
      // –†–µ–∑–æ–ª–≤–∏–º work_name_id
      let workNameId: string
      if (data.work_name_id) {
        workNameId = data.work_name_id
      } else if (data.work_name) {
        const cached = workNameCache.get(data.work_name.trim())
        if (!cached) throw new Error(`work_name "${data.work_name}" not found in cache`)
        workNameId = cached
      } else {
        throw new Error('Either work_name_id or work_name must be provided')
      }

      // –†–µ–∑–æ–ª–≤–∏–º work_set_id (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
      let workSetId: string | null = null
      if (data.work_set_id) {
        workSetId = data.work_set_id
      } else if (data.work_set_name) {
        const cached = workSetCache.get(data.work_set_name.trim())
        if (!cached) throw new Error(`work_set "${data.work_set_name}" not found in cache`)
        workSetId = cached
      }

      return { data, workNameId, workSetId, categories }
    })

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
    const ratesToInsert = resolvedBatch.map(({ workNameId, workSetId, data }) => ({
      work_set_id: workSetId,
      work_name_id: workNameId,
      base_rate: data.base_rate,
      unit_id: data.unit_id || null,
      active: data.active !== undefined ? data.active : true,
    }))

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ (work_set_id, work_name_id, base_rate) —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    const existingCombos = new Set<string>()

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ work_set_id –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    const workSetIds = Array.from(new Set(ratesToInsert.map(r => r.work_set_id).filter(Boolean)))

    if (workSetIds.length > 0) {
      const { data: existingRates, error: checkError } = await supabase
        .from('work_set_rates')
        .select('work_set_id, work_name_id, base_rate')
        .in('work_set_id', workSetIds)

      if (checkError) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ä–∞—Å—Ü–µ–Ω–æ–∫:', checkError)
      } else if (existingRates) {
        existingRates.forEach(rate => {
          existingCombos.add(`${rate.work_set_id}:${rate.work_name_id}:${rate.base_rate}`)
        })
      }
    }

    // –§–∏–ª—å—Ç—Ä—É–µ–º - –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
    const newRatesToInsert = ratesToInsert.filter(rate => {
      const key = `${rate.work_set_id}:${rate.work_name_id}:${rate.base_rate}`
      return !existingCombos.has(key)
    })

    const skippedDuplicates = ratesToInsert.length - newRatesToInsert.length

    if (skippedDuplicates > 0) {
      console.log(`‚è≠Ô∏è –ë–∞—Ç—á ${Math.floor(i / BATCH_SIZE) + 1}: –ø—Ä–æ–ø—É—â–µ–Ω–æ ${skippedDuplicates} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ (—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –ë–î)`)
    }

    // –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Ä–∞—Å—Ü–µ–Ω–∫–∏
    let rates: WorkSetRate[] = []

    if (newRatesToInsert.length > 0) {
      const { data: insertedRates, error: rateError } = await supabase
        .from('work_set_rates')
        .insert(newRatesToInsert)
        .select()

      if (rateError) {
        console.error('Failed to bulk create work set rates:', rateError)
        throw rateError
      }

      if (insertedRates) {
        rates = insertedRates as WorkSetRate[]
      }
    }

    // –°–æ–∑–¥–∞–µ–º mappings –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞—Ç—Ä–∞—Ç (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π)
    if (rates.length > 0) {
      // –°–æ–∑–¥–∞—ë–º Map –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ä–∞—Å—Ü–µ–Ω–æ–∫ —Å categories
      const rateToCategoriesMap = new Map<
        string,
        Array<{ detail_cost_category_id: number; cost_category_id: number }>
      >()

      resolvedBatch.forEach(({ data, workNameId, workSetId, categories }) => {
        const key = `${workSetId}:${workNameId}:${data.base_rate}`
        if (categories.length > 0) {
          rateToCategoriesMap.set(key, categories)
        }
      })

      // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ mappings –¥–ª—è –≤—Å–µ—Ö —Ä–∞—Å—Ü–µ–Ω–æ–∫
      const allMappings: Array<{
        work_set_rate_id: string
        detail_cost_category_id: number
        cost_category_id: number
      }> = []

      rates.forEach((rate) => {
        const key = `${rate.work_set_id}:${rate.work_name_id}:${rate.base_rate}`
        const categories = rateToCategoriesMap.get(key)

        if (categories && categories.length > 0) {
          // –°–æ–∑–¥–∞–µ–º mapping –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
          categories.forEach((category) => {
            allMappings.push({
              work_set_rate_id: rate.id,
              detail_cost_category_id: category.detail_cost_category_id,
              cost_category_id: category.cost_category_id,
            })
          })
        }
      })

      if (allMappings.length > 0) {
        const { error: mappingError } = await supabase
          .from('work_set_rates_categories_mapping')
          .insert(allMappings)

        if (mappingError) {
          console.error('Failed to create rate category mappings:', mappingError)
        } else {
          console.log(
            `‚úÖ –°–æ–∑–¥–∞–Ω–æ ${allMappings.length} —Å–≤—è–∑–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è ${rates.length} —Ä–∞—Å—Ü–µ–Ω–æ–∫`
          )
        }
      }

      results.push(...rates)
    }

    console.log(
      `‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω –±–∞—Ç—á ${Math.floor(i / BATCH_SIZE) + 1}/${Math.ceil(dataArray.length / BATCH_SIZE)}: —Å–æ–∑–¥–∞–Ω–æ ${rates.length}, –ø—Ä–æ–ø—É—â–µ–Ω–æ ${skippedDuplicates}, –≤—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${groupedBatch.length}`
    )
  }

  return results
}

/**
 * –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ü–µ–Ω–æ–∫ –∏–∑ —Ñ–æ—Ä–º—ã
 */
export async function bulkUpdateWorkSetRatesFromForm(
  updates: Array<{ id: string; data: WorkSetRateFormData }>
): Promise<void> {
  if (updates.length === 0) return

  const BATCH_SIZE = 50

  for (let i = 0; i < updates.length; i += BATCH_SIZE) {
    const batch = updates.slice(i, i + BATCH_SIZE)

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –≤ —Ä–∞–º–∫–∞—Ö –±–∞—Ç—á–∞
    await Promise.all(
      batch.map(async ({ id, data }) => {
        await updateWorkSetRateFromForm(id, data)
      })
    )

    console.log(
      `‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –±–∞—Ç—á ${Math.floor(i / BATCH_SIZE) + 1}/${Math.ceil(updates.length / BATCH_SIZE)} (${batch.length} –∑–∞–ø–∏—Å–µ–π)`
    )
  }
}

/**
 * –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ä–∞—Å—Ü–µ–Ω–æ–∫
 */
export async function bulkDeleteWorkSetRates(ids: string[]): Promise<void> {
  if (!supabase) throw new Error('Supabase is not configured')
  if (ids.length === 0) return

  const BATCH_SIZE = 100
  const batches = []

  for (let i = 0; i < ids.length; i += BATCH_SIZE) {
    batches.push(ids.slice(i, i + BATCH_SIZE))
  }

  console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ ${ids.length} –∑–∞–ø–∏—Å–µ–π –±–∞—Ç—á–∞–º–∏ –ø–æ ${BATCH_SIZE}`)

  for (let i = 0; i < batches.length; i++) {
    const batch = batches[i]

    // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º mappings (CASCADE –¥–æ–ª–∂–µ–Ω —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –Ω–æ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏)
    const { error: mappingError } = await supabase
      .from('work_set_rates_categories_mapping')
      .delete()
      .in('work_set_rate_id', batch)

    if (mappingError) {
      console.error(
        `Failed to delete mappings for batch ${i + 1}/${batches.length}:`,
        mappingError
      )
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∞–∂–µ –µ—Å–ª–∏ mapping –Ω–µ —É–¥–∞–ª–∏–ª–∏—Å—å (CASCADE –¥–æ–ª–∂–µ–Ω —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è)
    }

    // –£–¥–∞–ª—è–µ–º —Ä–∞—Å—Ü–µ–Ω–∫–∏
    const { error } = await supabase.from('work_set_rates').delete().in('id', batch)

    if (error) {
      console.error(`Failed to delete batch ${i + 1}/${batches.length}:`, error)
      throw error
    }

    console.log(`‚úÖ –£–¥–∞–ª–µ–Ω –±–∞—Ç—á ${i + 1}/${batches.length} (${batch.length} –∑–∞–ø–∏—Å–µ–π)`)
  }

  console.log(`‚úÖ –í—Å–µ ${ids.length} –∑–∞–ø–∏—Å–µ–π —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã`)
}

/**
 * –£–¥–∞–ª–∏—Ç—å –æ–¥–Ω—É —Ä–∞—Å—Ü–µ–Ω–∫—É
 */
export async function deleteWorkSetRateById(id: string): Promise<void> {
  await deleteWorkSetRate(id)
}

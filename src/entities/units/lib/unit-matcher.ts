import { unitsApi } from '../api/units-api'
import type { Unit } from '../model/types'

interface UnitMatch {
  unit: Unit | null
  confidence: 'exact' | 'synonym' | 'fuzzy' | 'none'
  originalText: string
}

class UnitMatcher {
  private units: Unit[] = []
  private synonymsMap: Map<string, Unit> = new Map()
  private initialized = false

  async initialize(): Promise<void> {
    if (this.initialized) return

    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –µ–¥–∏–Ω–∏—Ü—ã –∏ –∏—Ö —Å–∏–Ω–æ–Ω–∏–º—ã
      const [units, synonymsFlat] = await Promise.all([
        unitsApi.getAll(),
        unitsApi.getAllSynonymsFlat()
      ])

      this.units = units
      this.synonymsMap.clear()

      // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É —Å–∏–Ω–æ–Ω–∏–º–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
      for (const synonym of synonymsFlat) {
        const unit = units.find(u => u.id === synonym.unitId)
        if (unit) {
          // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å–∏–Ω–æ–Ω–∏–º –¥–ª—è –ø–æ–∏—Å–∫–∞ (lowercase, trim)
          const normalizedSynonym = synonym.synonym.toLowerCase().trim()
          this.synonymsMap.set(normalizedSynonym, unit)
        }
      }

      this.initialized = true
      console.log(`üîß UnitMatcher –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: ${units.length} –µ–¥–∏–Ω–∏—Ü, ${synonymsFlat.length} —Å–∏–Ω–æ–Ω–∏–º–æ–≤`) // LOG
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ UnitMatcher:', error) // LOG
      throw error
    }
  }

  /**
   * –ù–∞—Ö–æ–¥–∏—Ç –ø–æ–¥—Ö–æ–¥—è—â—É—é –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è –¥–ª—è —Ç–µ–∫—Å—Ç–∞
   */
  async findUnit(text: string): Promise<UnitMatch> {
    await this.initialize()

    if (!text || typeof text !== 'string') {
      return { unit: null, confidence: 'none', originalText: text || '' }
    }

    const normalizedText = text.toLowerCase().trim()

    // 1. –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –æ—Å–Ω–æ–≤–Ω–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é
    const exactMatch = this.units.find(unit =>
      unit.name.toLowerCase().trim() === normalizedText
    )
    if (exactMatch) {
      return { unit: exactMatch, confidence: 'exact', originalText: text }
    }

    // 2. –ü–æ–∏—Å–∫ –ø–æ —Å–∏–Ω–æ–Ω–∏–º–∞–º
    const synonymMatch = this.synonymsMap.get(normalizedText)
    if (synonymMatch) {
      return { unit: synonymMatch, confidence: 'synonym', originalText: text }
    }

    // 3. –ù–µ—á–µ—Ç–∫–∏–π –ø–æ–∏—Å–∫ (fuzzy matching)
    const fuzzyMatch = this.findFuzzyMatch(normalizedText)
    if (fuzzyMatch) {
      return { unit: fuzzyMatch, confidence: 'fuzzy', originalText: text }
    }

    return { unit: null, confidence: 'none', originalText: text }
  }

  /**
   * –ù–∞—Ö–æ–¥–∏—Ç –µ–¥–∏–Ω–∏—Ü—ã –¥–ª—è –º–∞—Å—Å–∏–≤–∞ —Ç–µ–∫—Å—Ç–æ–≤
   */
  async findUnits(texts: string[]): Promise<UnitMatch[]> {
    await this.initialize()

    const results: UnitMatch[] = []
    for (const text of texts) {
      results.push(await this.findUnit(text))
    }
    return results
  }

  /**
   * –ù–µ—á–µ—Ç–∫–∏–π –ø–æ–∏—Å–∫ —Å —É—á–µ—Ç–æ–º –æ–ø–µ—á–∞—Ç–æ–∫ –∏ –≤–∞—Ä–∏–∞—Ü–∏–π –Ω–∞–ø–∏—Å–∞–Ω–∏—è
   */
  private findFuzzyMatch(normalizedText: string): Unit | null {
    const variations = this.generateVariations(normalizedText)

    // –ò—â–µ–º —Å—Ä–µ–¥–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π
    for (const unit of this.units) {
      const unitName = unit.name.toLowerCase().trim()
      if (variations.includes(unitName) || this.isCloseMatch(normalizedText, unitName)) {
        return unit
      }
    }

    // –ò—â–µ–º —Å—Ä–µ–¥–∏ —Å–∏–Ω–æ–Ω–∏–º–æ–≤
    for (const [synonym, unit] of this.synonymsMap) {
      if (variations.includes(synonym) || this.isCloseMatch(normalizedText, synonym)) {
        return unit
      }
    }

    return null
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞—Ü–∏–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏—è
   */
  private generateVariations(text: string): string[] {
    const variations = [text]

    // –ó–∞–º–µ–Ω—ã –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    const replacements: Record<string, string[]> = {
      '¬≤': ['2', '^2', '–∫–≤'],
      '¬≥': ['3', '^3', '–∫—É–±'],
      '–º2': ['–º¬≤', '–∫–≤.–º', '–∫–≤–º'],
      '–º3': ['–º¬≥', '–∫—É–±.–º', '–∫—É–±–º'],
      '–∫–≤.–º': ['–º¬≤', '–º2', '–∫–≤–º'],
      '–∫—É–±.–º': ['–º¬≥', '–º3', '–∫—É–±–º'],
      '–∫–≥': ['–∫–∏–ª–æ–≥—Ä–∞–º–º', '–∫–∏–ª–æ–≥—Ä–∞–º–º—ã'],
      '—Ç': ['—Ç–æ–Ω–Ω', '—Ç–æ–Ω–Ω–∞', '—Ç–æ–Ω–Ω—ã'],
      '—à—Ç': ['—à—Ç—É–∫', '—à—Ç—É–∫–∞', '—à—Ç—É–∫–∏', '—à—Ç.'],
      '–º': ['–º–µ—Ç—Ä', '–º–µ—Ç—Ä—ã', '–º–µ—Ç—Ä–æ–≤'],
      '—Å–º': ['—Å–∞–Ω—Ç–∏–º–µ—Ç—Ä', '—Å–∞–Ω—Ç–∏–º–µ—Ç—Ä—ã'],
      '–º–º': ['–º–∏–ª–ª–∏–º–µ—Ç—Ä', '–º–∏–ª–ª–∏–º–µ—Ç—Ä—ã']
    }

    for (const [key, values] of Object.entries(replacements)) {
      if (text.includes(key)) {
        for (const value of values) {
          variations.push(text.replace(key, value))
        }
      }
    }

    return [...new Set(variations)]
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–ª–∏–∑–æ—Å—Ç—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è (—É—á–∏—Ç—ã–≤–∞–µ—Ç –Ω–µ–±–æ–ª—å—à–∏–µ –æ–ø–µ—á–∞—Ç–∫–∏)
   */
  private isCloseMatch(text1: string, text2: string): boolean {
    if (Math.abs(text1.length - text2.length) > 2) return false

    // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –õ–µ–≤–µ–Ω—à—Ç–µ–π–Ω–∞
    const distance = this.levenshteinDistance(text1, text2)
    const maxDistance = Math.max(1, Math.floor(Math.min(text1.length, text2.length) * 0.2))

    return distance <= maxDistance
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –õ–µ–≤–µ–Ω—à—Ç–µ–π–Ω–∞ –º–µ–∂–¥—É –¥–≤—É–º—è —Å—Ç—Ä–æ–∫–∞–º–∏
   */
  private levenshteinDistance(str1: string, str2: string): number {
    const matrix = Array(str2.length + 1).fill(null).map(() => Array(str1.length + 1).fill(null))

    for (let i = 0; i <= str1.length; i++) matrix[0][i] = i
    for (let j = 0; j <= str2.length; j++) matrix[j][0] = j

    for (let j = 1; j <= str2.length; j++) {
      for (let i = 1; i <= str1.length; i++) {
        const cost = str1[i - 1] === str2[j - 1] ? 0 : 1
        matrix[j][i] = Math.min(
          matrix[j][i - 1] + 1,     // insertion
          matrix[j - 1][i] + 1,     // deletion
          matrix[j - 1][i - 1] + cost // substitution
        )
      }
    }

    return matrix[str2.length][str1.length]
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Å–∏–Ω–æ–Ω–∏–º–æ–≤
   */
  getStats(): { totalUnits: number; totalSynonyms: number; initialized: boolean } {
    return {
      totalUnits: this.units.length,
      totalSynonyms: this.synonymsMap.size,
      initialized: this.initialized
    }
  }

  /**
   * –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∫—ç—à (–¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö)
   */
  reset(): void {
    this.initialized = false
    this.units = []
    this.synonymsMap.clear()
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton —ç–∫–∑–µ–º–ø–ª—è—Ä
export const unitMatcher = new UnitMatcher()

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø—ã
export type { UnitMatch }
import { supabase } from '@/lib/supabase'
import type {
  MLPredictionRequest,
  MLPredictionResponse,
  NomenclatureSuggestion,
  MLConfig,
  MLMetrics
} from '../model/types'

// ===============================
// DEEPSEEK AI –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø
// ===============================
// –ü–ê–¢–¢–ï–†–ù –î–õ–Ø –ö–û–ü–ò–†–û–í–ê–ù–ò–Ø: –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Deepseek AI –≤ ML –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
import {
  deepseekApi,
  mlModeApi,
  type DeepseekMaterialRequest,
  type MLMode
} from '@/entities/api-settings'

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ML
 */
export const getMLConfig = async (): Promise<MLConfig> => {
  // LOG: –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ML –∏–∑ localStorage
  const defaultConfig: MLConfig = {
    enabled: true,
    confidenceThreshold: 0.3,
    maxSuggestions: 15,

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
    algorithm: 'balanced',
    keywordBonus: 0.3,
    exactMatchBonus: 0.2,
    prefixBonus: 0.25,
    similarityWeight: 0.6,
    minWordLength: 3,
    ignoredTerms: ['–º3', '–º2', '–∫–≥', '—à—Ç', '–ø.–º.', '–∫–æ–º–ø–ª.', '–º.–ø.', '—Ç']
  }

  try {
    const saved = localStorage.getItem('ml-config')
    return saved ? { ...defaultConfig, ...JSON.parse(saved) } : defaultConfig
  } catch {
    return defaultConfig
  }
}

/**
 * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ML
 */
export const saveMLConfig = async (config: Partial<MLConfig>): Promise<void> => {
  // LOG: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ML
  const current = await getMLConfig()
  const updated = { ...current, ...config }
  localStorage.setItem('ml-config', JSON.stringify(updated))
}

/**
 * ===============================
 * –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ô –ù–û–ú–ï–ù–ö–õ–ê–¢–£–†–´
 * ===============================
 * –ü–ê–¢–¢–ï–†–ù –î–õ–Ø –ö–û–ü–ò–†–û–í–ê–ù–ò–Ø: –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π AI/ML —Ä–µ–∂–∏–º–æ–≤
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ—Ç –º–µ–∂–¥—É Deepseek AI –∏ –ª–æ–∫–∞–ª—å–Ω—ã–º ML –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º
 */
export const predictNomenclature = async (
  request: MLPredictionRequest,
  signal?: AbortSignal
): Promise<MLPredictionResponse> => {
  const startTime = Date.now()
  const config = await getMLConfig()

  // LOG: –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ AbortSignal –≤ predictNomenclature
  console.log('üîç ML Nomenclature DEBUG: AbortSignal status:', {
    hasSignal: !!signal,
    aborted: signal?.aborted || false,
    materialName: request.materialName
  })

  if (!config.enabled) {
    // LOG: ML –æ—Ç–∫–ª—é—á–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
    return getFallbackSuggestions(request, startTime)
  }

  try {
    // ===============================
    // –í–´–ë–û–† –ú–ï–ñ–î–£ AI –ò ML –†–ï–ñ–ò–ú–ê–ú–ò
    // ===============================
    // –ü–ê–¢–¢–ï–†–ù –î–õ–Ø –ö–û–ü–ò–†–û–í–ê–ù–ò–Ø: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã AI/ML
    const mlModeConfig = await mlModeApi.getCurrentMode()
    const currentMode = mlModeConfig.mode

    console.log('üîÑ ML Prediction: –†–µ–∂–∏–º', currentMode, '–¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞:', request.materialName)
    console.log('üîç DEBUG: –ü–æ–ª–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–µ–∂–∏–º–∞:', mlModeConfig) // DEBUG LOG: –ø–æ–ª–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    console.log('üîç DEBUG: localStorage ml-mode-config:', localStorage.getItem('ml-mode-config')) // DEBUG LOG: —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ localStorage

    // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω Deepseek AI —Ä–µ–∂–∏–º
    if (currentMode === 'deepseek') {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Deepseek
      const deepseekAvailable = await mlModeApi.isDeepseekAvailable()

      if (deepseekAvailable) {
        try {
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º Deepseek AI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
          console.log('ü§ñ AI Mode: –ó–∞–ø—É—Å–∫ Deepseek –∞–Ω–∞–ª–∏–∑–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞')
          const aiResult = await predictWithDeepseek(request, signal) // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–µ—Ä–µ–¥–∞–µ–º signal

          // –ï—Å–ª–∏ AI –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ö
          if (aiResult.suggestions.length > 0) {
            console.log('ü§ñ AI Mode: Deepseek –≤–µ—Ä–Ω—É–ª', aiResult.suggestions.length, '–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π')
            return {
              ...aiResult,
              processingTime: Date.now() - startTime,
              modelUsed: 'deepseek'
            }
          }
        } catch (aiError) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ - AbortError –Ω–µ —Ç—Ä–µ–±—É–µ—Ç fallback
          if (aiError instanceof Error && aiError.name === 'AbortError') {
            console.log('ü§ñ AI Mode: –ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (AbortError)') // LOG: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞–ø—Ä–æ—Å–∞
            throw aiError // –ü–µ—Ä–µ–¥–∞–µ–º AbortError –±–µ–∑ fallback
          }

          console.error('ü§ñ AI Mode: –û—à–∏–±–∫–∞ Deepseek, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π ML:', aiError)

          // –ï—Å–ª–∏ auto_fallback –≤–∫–ª—é—á–µ–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π ML
          if (mlModeConfig.auto_fallback) {
            console.log('üîÑ AI Mode: –ê–≤—Ç–æ—Ñ–æ–ª–ª–±—ç–∫ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π ML')
            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å –ª–æ–∫–∞–ª—å–Ω—ã–º ML –Ω–∏–∂–µ
          } else {
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É –±–µ–∑ fallback
            return getFallbackSuggestions(request, startTime, '–û—à–∏–±–∫–∞ Deepseek AI')
          }
        }
      } else {
        console.warn('ü§ñ AI Mode: Deepseek –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π ML')
      }
    }

    // ===============================
    // –õ–û–ö–ê–õ–¨–ù–´–ô ML –ê–õ–ì–û–†–ò–¢–ú
    // ===============================
    console.log('üî¨ ML Mode: –ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞')

    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ–π similarity –ø–æ–∏—Å–∫
    const suggestions = await getSimilarityBasedSuggestions(request)

    if (suggestions.length > 0) {
      console.log('üî¨ ML Mode: –õ–æ–∫–∞–ª—å–Ω—ã–π ML –≤–µ—Ä–Ω—É–ª', suggestions.length, '–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π')
      return {
        suggestions: suggestions.slice(0, config.maxSuggestions),
        processingTime: Date.now() - startTime,
        modelUsed: 'similarity'
      }
    }

    // –ï—Å–ª–∏ similarity –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
    console.log('üî¨ ML Mode: –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback')
    return getFallbackSuggestions(request, startTime)

  } catch (error) {
    console.error('‚ùå ML prediction error:', error) // LOG: –æ—à–∏–±–∫–∞ ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    return getFallbackSuggestions(request, startTime, '–û—à–∏–±–∫–∞ ML –º–æ–¥–µ–ª–∏')
  }
}

/**
 * –£–õ–£–ß–®–ï–ù–ù–´–ô similarity-based –ø–æ–∏—Å–∫ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏
 */
const getSimilarityBasedSuggestions = async (
  request: MLPredictionRequest
): Promise<NomenclatureSuggestion[]> => {
  if (!supabase) throw new Error('Supabase not initialized')

  const { materialName } = request
  const searchTerm = materialName.toLowerCase().trim()
  const config = await getMLConfig()

  if (searchTerm.length < 2) return []

  console.log('üîç ML: Starting enhanced search for:', searchTerm, 'with algorithm:', config.algorithm) // LOG: –Ω–∞—á–∞–ª–æ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
  console.log('üîç ML: Current config:', JSON.stringify(config, null, 2)) // LOG: —Ç–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ML

  // –†–∞—Å—à–∏—Ä—è–µ–º –ø–æ–∏—Å–∫ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ö–≤–∞—Ç–∞
  console.log('üîç ML: Executing Supabase query with term:', searchTerm) // LOG: –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ Supabase

  // –£–õ–£–ß–®–ï–ù–ù–´–ô –ø–æ–∏—Å–∫: –∏—â–µ–º –∫–∞–∫ –ø–æ –ø–æ–ª–Ω–æ–º—É —Ç–µ—Ä–º–∏–Ω—É, —Ç–∞–∫ –∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
  const searchWords = searchTerm.split(/[\s\-.,()]+/).filter(word => word.length >= 2)
  console.log('üîç ML: Search words extracted:', searchWords) // LOG: –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞

  // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: –¢–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –ø–æ–ª–Ω–æ–º—É —Ç–µ—Ä–º–∏–Ω—É
  let { data: matches, error } = await supabase
    .from('nomenclature')
    .select('id, name')
    .ilike('name', `%${searchTerm}%`)
    .limit(100)

  console.log('üîç ML: Exact search results:', matches?.length || 0) // LOG: —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞

  // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: –ï—Å–ª–∏ —Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –∏—â–µ–º –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
  if ((!matches || matches.length === 0) && searchWords.length > 0) {
    console.log('üîç ML: Trying keyword-based search...') // LOG: –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º

    // –ò—â–µ–º –ø–æ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–∞—Ç–µ—Ä–∏–∞–ª—É (–ø–µ—Ä–≤–æ–µ –∑–Ω–∞—á–∏–º–æ–µ —Å–ª–æ–≤–æ)
    const mainMaterial = searchWords[0]
    const { data: keywordMatches, error: keywordError } = await supabase
      .from('nomenclature')
      .select('id, name')
      .ilike('name', `%${mainMaterial}%`)
      .limit(200) // –ë–æ–ª—å—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏

    console.log(`üîç ML: Keyword search for "${mainMaterial}":`, keywordMatches?.length || 0) // LOG: —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É

    if (keywordMatches && keywordMatches.length > 0) {
      matches = keywordMatches
      error = keywordError
    }
  }

  // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 3: –ï—Å–ª–∏ –≤—Å—ë –µ—â—ë –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –ø—Ä–æ–±—É–µ–º —Å–∏–Ω–æ–Ω–∏–º—ã
  if ((!matches || matches.length === 0)) {
    console.log('üîç ML: Trying synonyms search...') // LOG: –ø–æ–∏—Å–∫ –ø–æ —Å–∏–Ω–æ–Ω–∏–º–∞–º
    const synonymSearchTerms = ['–ø–µ–Ω–æ–ø–ª–∞—Å—Ç', '–ø–æ–ª–∏—Å—Ç–∏—Ä–æ–ª', '–ø–µ–Ω–æ–ø–æ–ª–∏—Å—Ç–∏—Ä–æ–ª']

    for (const synonym of synonymSearchTerms) {
      if (searchTerm.includes(synonym) || searchTerm.includes('–ø—Å–±') || searchTerm.includes('–ø–µ–Ω–æ–ø–æ')) {
        const { data: synonymMatches, error: synonymError } = await supabase
          .from('nomenclature')
          .select('id, name')
          .or(`name.ilike.%–ø–µ–Ω–æ–ø–ª–∞—Å—Ç%,name.ilike.%–ø–µ–Ω–æ–ø–æ–ª–∏—Å—Ç–∏—Ä–æ–ª%,name.ilike.%–ø–æ–ª–∏—Å—Ç–∏—Ä–æ–ª%`)
          .limit(150)

        console.log(`üîç ML: Synonym search results:`, synonymMatches?.length || 0) // LOG: —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ —Å–∏–Ω–æ–Ω–∏–º–∞–º

        if (synonymMatches && synonymMatches.length > 0) {
          matches = synonymMatches
          error = synonymError
          break
        }
      }
    }
  }

  console.log('üîç ML: Supabase query result:', {
    matches: matches?.length || 0,
    error: error?.message || 'none',
    searchTerm,
    sampleData: matches?.slice(0, 3)?.map(m => m.name) || []
  }) // LOG: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ Supabase

  if (error) {
    console.error('üîç ML: Search failed:', error) // LOG: –æ—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞
    return []
  }

  if (!matches || matches.length === 0) {
    console.log('üîç ML: No matches found for:', searchTerm) // LOG: —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ

    // –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    console.log('üîç ML: Diagnostic - trying simple count query...') // LOG: –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å
    const { count, error: countError } = await supabase
      .from('nomenclature')
      .select('*', { count: 'exact', head: true })
      .limit(1)

    console.log('üîç ML: Diagnostic result:', { count, countError: countError?.message }) // LOG: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏

    return []
  }

  console.log('üîç ML: Found matches:', matches.length) // LOG: –Ω–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π

  // –û—á–∏—â–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π —Ç–µ—Ä–º–∏–Ω –æ—Ç –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
  const cleanedSearchTerm = cleanTermForMatching(searchTerm, config.ignoredTerms)
  const cleanedSearchWords = cleanedSearchTerm.split(/\s+/).filter(word => word.length >= config.minWordLength)

  console.log('üîç ML: Original term:', searchTerm) // LOG: –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫–æ–≤—ã–π —Ç–µ—Ä–º–∏–Ω
  console.log('üîç ML: Cleaned search term:', cleanedSearchTerm, 'words:', cleanedSearchWords) // LOG: –æ—á–∏—â–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫–æ–≤—ã–π —Ç–µ—Ä–º–∏–Ω

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ï—Å–ª–∏ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ —Ç–µ—Ä–º–∏–Ω —Å—Ç–∞–ª —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π
  const effectiveSearchTerm = cleanedSearchTerm.length < 3 ? searchTerm : cleanedSearchTerm
  console.log('üîç ML: Effective search term:', effectiveSearchTerm) // LOG: —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫–æ–≤—ã–π —Ç–µ—Ä–º–∏–Ω

  // –í—ã—á–∏—Å–ª—è–µ–º similarity —Å —É—á–µ—Ç–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫
  const suggestions = matches.map((nom, index) => {
    const nomLower = nom.name.toLowerCase()
    const cleanedNomName = cleanTermForMatching(nomLower, config.ignoredTerms)

    // –ë–∞–∑–æ–≤—ã–π similarity score —Å –ø–æ–º–æ—â—å—é Levenshtein
    const rawSimilarity = calculateStringSimilarity(effectiveSearchTerm, cleanedNomName)
    const similarity = rawSimilarity * config.similarityWeight

    let totalBonus = 0
    const bonusBreakdown = []

    // –ë–æ–Ω—É—Å –∑–∞ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø—Ä–µ—Ñ–∏–∫—Å–∞
    if (cleanedNomName.startsWith(effectiveSearchTerm) || nomLower.startsWith(searchTerm)) {
      totalBonus += config.prefixBonus
      bonusBreakdown.push(`prefix:${Math.round(config.prefixBonus * 100)}%`)
    }

    // –ë–æ–Ω—É—Å –∑–∞ —Ç–æ—á–Ω–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ
    if (cleanedNomName.includes(effectiveSearchTerm) || nomLower.includes(searchTerm)) {
      totalBonus += config.exactMatchBonus
      bonusBreakdown.push(`exact:${Math.round(config.exactMatchBonus * 100)}%`)
    }

    // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    const keywordScore = calculateKeywordScore(searchWords, cleanedNomName, config)
    const keywordBonus = keywordScore * config.keywordBonus
    totalBonus += keywordBonus
    bonusBreakdown.push(`keywords:${Math.round(keywordScore * 100)}%*${Math.round(config.keywordBonus * 100)}%=${Math.round(keywordBonus * 100)}%`)

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏
    let finalScore = similarity + totalBonus
    const beforeAlgorithm = finalScore
    finalScore = applyAlgorithmSettings(finalScore, config.algorithm)

    const finalConfidence = Math.max(0.1, Math.min(0.95, finalScore))

    // –î–µ—Ç–∞–ª—å–Ω—ã–π –ª–æ–≥ –¥–ª—è –ø–µ—Ä–≤—ã—Ö 3 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if (index < 3) {
      console.log(`üîç ML: [${index + 1}] "${nom.name}"`) // LOG: –¥–µ—Ç–∞–ª–∏ —Ä–∞—Å—á–µ—Ç–∞ –¥–ª—è —Ç–æ–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      console.log(`   Original: "${searchTerm}" vs "${nomLower}"`) // LOG: –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
      console.log(`   Effective: "${effectiveSearchTerm}" vs "${cleanedNomName}"`) // LOG: —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
      console.log(`   Raw similarity: ${Math.round(rawSimilarity * 100)}%`) // LOG: —Å—ã—Ä–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ
      console.log(`   Weighted similarity: ${Math.round(similarity * 100)}% (weight: ${Math.round(config.similarityWeight * 100)}%)`) // LOG: –≤–∑–≤–µ—à–µ–Ω–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ
      console.log(`   Bonuses: ${bonusBreakdown.join(', ')}`) // LOG: –±–æ–Ω—É—Å—ã
      console.log(`   Before algorithm: ${Math.round(beforeAlgorithm * 100)}%`) // LOG: –¥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞
      console.log(`   After ${config.algorithm}: ${Math.round(finalScore * 100)}%`) // LOG: –ø–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞
      console.log(`   Final confidence: ${Math.round(finalConfidence * 100)}%`) // LOG: –∏—Ç–æ–≥–æ–≤–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
    }

    return {
      id: nom.id,
      name: nom.name,
      confidence: finalConfidence,
      reasoning: `${config.algorithm.toUpperCase()}: ${Math.round(rawSimilarity * 100)}% sim * ${Math.round(config.similarityWeight * 100)}% + ${Math.round(totalBonus * 100)}% bonus ‚Üí ${Math.round(finalConfidence * 100)}%`
    }
  })
  .filter(suggestion => suggestion.confidence >= config.confidenceThreshold)
  .sort((a, b) => b.confidence - a.confidence)
  .slice(0, config.maxSuggestions)

  console.log('üîç ML: Returning suggestions:', suggestions.length, 'avg confidence:',
    suggestions.length > 0 ? Math.round(suggestions.reduce((sum, s) => sum + s.confidence, 0) / suggestions.length * 100) + '%' : 'N/A') // LOG: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è

  return suggestions
}

/**
 * Fallback –ø–æ–∏—Å–∫ (–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫)
 */
const getFallbackSuggestions = async (
  request: MLPredictionRequest,
  startTime: number,
  reason?: string
): Promise<MLPredictionResponse> => {
  if (!supabase) throw new Error('Supabase not initialized')

  const { materialName } = request
  const searchTerm = materialName.toLowerCase().trim()

  // LOG: fallback –ø–æ–∏—Å–∫ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã
  const { data: nomenclatures, error } = await supabase
    .from('nomenclature')
    .select('id, name')
    .ilike('name', `%${searchTerm}%`)
    .limit(5)

  if (error) throw error

  const suggestions: NomenclatureSuggestion[] = (nomenclatures || []).map(nom => ({
    id: nom.id,
    name: nom.name,
    confidence: 0.5, // —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è confidence –¥–ª—è fallback
    reasoning: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫'
  }))

  return {
    suggestions,
    processingTime: Date.now() - startTime,
    modelUsed: 'fallback',
    fallbackReason: reason || 'ML –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
  }
}

/**
 * –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Ä–º–∏–Ω–∞ –æ—Ç –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏ —Å–∏–º–≤–æ–ª–æ–≤
 */
const cleanTermForMatching = (term: string, ignoredTerms: string[]): string => {
  let cleaned = term.toLowerCase()

  // –£–¥–∞–ª—è–µ–º –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ —Ç–µ—Ä–º–∏–Ω—ã
  ignoredTerms.forEach(ignored => {
    const regex = new RegExp(`\\b${ignored.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')}\\b`, 'gi')
    cleaned = cleaned.replace(regex, '')
  })

  // –£–¥–∞–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ NxNxN, NxN
  cleaned = cleaned.replace(/\b\d+(\.\d+)?[x√ó]\d+(\.\d+)?([x√ó]\d+(\.\d+)?)?\b/g, '')

  // –£–¥–∞–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞ —Å –µ–¥–∏–Ω–∏—Ü–∞–º–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è
  cleaned = cleaned.replace(/\b\d+(\.\d+)?\s*(–º–º|—Å–º|–º|–∫–≥|–≥|—Ç|–ª|—à—Ç\.?)\b/g, '')

  // –û—á–∏—â–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
  cleaned = cleaned.replace(/\s+/g, ' ').trim()

  return cleaned
}

/**
 * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ score –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
 */
const calculateKeywordScore = (searchWords: string[], nomName: string, config: any): number => {
  if (searchWords.length === 0) return 0

  let matchedWords = 0
  let partialMatches = 0
  const matchDetails: string[] = []

  searchWords.forEach(searchWord => {
    if (nomName.includes(searchWord)) {
      matchedWords++
      matchDetails.push(`"${searchWord}":exact`)
    } else {
      // –ò—â–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
      const partialMatch = findPartialMatch(searchWord, nomName)
      if (partialMatch) {
        partialMatches++
        matchDetails.push(`"${searchWord}":partial`)
      } else {
        matchDetails.push(`"${searchWord}":none`)
      }
    }
  })

  // –ü–æ–ª–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å–ª–æ–≤–∞ = 1.0, —á–∞—Å—Ç–∏—á–Ω–æ–µ = 0.5
  const totalScore = (matchedWords + partialMatches * 0.5) / searchWords.length

  // LOG: –¥–µ—Ç–∞–ª–∏ –∞–Ω–∞–ª–∏–∑–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ)
  if (searchWords.length > 0 && (matchedWords > 0 || partialMatches > 0)) {
    console.log(`üîç ML: Keyword analysis for "${nomName.substring(0, 40)}...": ${matchDetails.join(', ')} ‚Üí score: ${Math.round(totalScore * 100)}%`) // LOG: –∞–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
  }

  return Math.min(1.0, totalScore)
}

/**
 * –ü–æ–∏—Å–∫ —á–∞—Å—Ç–∏—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
 */
const findPartialMatch = (searchWord: string, nomName: string): boolean => {
  // –†–ê–°–®–ò–†–ï–ù–ù–´–ï —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
  const materialRules: { [key: string]: string[] } = {
    '–ø–µ–Ω–æ–ø–æ–ª–∏—Å—Ç–∏—Ä–æ–ª': ['–ø–µ–Ω–æ–ø–æ–ª–∏—Å—Ç–∏—Ä', '–ø—Å–±', '–ø—Å–±—Å', '–ø—Å', '–ø–µ–Ω–æ–ø–ª–∞—Å—Ç', '–ø–æ–ª–∏—Å—Ç–∏—Ä', '–ø–ø—Å', 'pps'],
    '–ø—Å–±': ['–ø—Å–±—Å', '–ø–µ–Ω–æ–ø–æ–ª–∏—Å—Ç–∏—Ä–æ–ª', '–ø–µ–Ω–æ–ø–ª–∞—Å—Ç', '–ø–æ–ª–∏—Å—Ç–∏—Ä', '–ø–ø—Å'],
    '–ø—Å–±—Å': ['–ø—Å–±', '–ø–µ–Ω–æ–ø–æ–ª–∏—Å—Ç–∏—Ä–æ–ª', '–ø–µ–Ω–æ–ø–ª–∞—Å—Ç', '–ø–æ–ª–∏—Å—Ç–∏—Ä', '–ø–ø—Å'],
    '–ø–µ–Ω–æ–ø–ª–∞—Å—Ç': ['–ø–µ–Ω–æ–ø–æ–ª–∏—Å—Ç–∏—Ä–æ–ª', '–ø—Å–±', '–ø—Å–±—Å', '–ø–æ–ª–∏—Å—Ç–∏—Ä', '–ø–ø—Å', '–ø—Å'],
    '—ç–∫—Å—Ç—Ä—É–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π': ['—ç–∫—Å—Ç—Ä', 'xps', '—ç–ø–ø—Å'],
    '–º–∏–Ω–µ—Ä–∞–ª—å–Ω—ã–π': ['–º–∏–Ω–≤–∞—Ç–∞', '–º–∏–Ω–ø–ª–∏—Ç–∞', '–±–∞–∑–∞–ª—å—Ç', '–∫–∞–º–µ–Ω–Ω–∞—è –≤–∞—Ç–∞'],
    '–∫–µ—Ä–∞–º–∑–∏—Ç–æ–±–µ—Ç–æ–Ω': ['–∫–µ—Ä–∞–º–∑–∏—Ç', '–ª–µ–≥–∫–∏–π –±–µ—Ç–æ–Ω'],
    '–∂–µ–ª–µ–∑–æ–±–µ—Ç–æ–Ω': ['–∂–±', '–∂/–±', '–±–µ—Ç–æ–Ω'],
    '–≥–∏–ø—Å–æ–∫–∞—Ä—Ç–æ–Ω': ['–≥–∫–ª', '–≥–∏–ø—Å'],
    '—É—Ç–µ–ø–ª–∏—Ç–µ–ª—å': ['—Ç–µ–ø–ª–æ–∏–∑–æ–ª—è—Ü–∏—è', '–∏–∑–æ–ª—è—Ü–∏—è'],
  }

  // –ò—â–µ–º –≤ –ø—Ä–∞–≤–∏–ª–∞—Ö
  for (const [material, synonyms] of Object.entries(materialRules)) {
    if (searchWord.includes(material) || material.includes(searchWord)) {
      return synonyms.some(synonym => nomName.includes(synonym))
    }
  }

  // –°–ü–ï–¶–ò–ê–õ–¨–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–∏—Å–ª–æ–≤—ã—Ö –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–π –ü–°–ë
  if (searchWord.includes('–ø—Å–±') || searchWord.includes('–ø—Å–±—Å')) {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ —Ç–µ—Ä–º–∏–Ω–∞
    const searchNumbers = searchWord.match(/\d+/g) || []
    const nomNumbers = nomName.match(/\d+/g) || []

    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —á–∏—Å–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 35 –∏–∑ "–ø—Å–±-—Å-35" –∏ "–ø—Å–±—Å 35")
    const hasMatchingNumbers = searchNumbers.some(searchNum =>
      nomNumbers.some(nomNum => Math.abs(parseInt(searchNum) - parseInt(nomNum)) <= 5)
    )

    if (hasMatchingNumbers) {
      console.log(`üîç ML: Number match found: search="${searchWord}" contains numbers [${searchNumbers.join(', ')}], nom="${nomName}" contains [${nomNumbers.join(', ')}]`) // LOG: —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —á–∏—Å–µ–ª
      return true
    }
  }

  // –ò—â–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ (–º–∏–Ω–∏–º—É–º 4 —Å–∏–º–≤–æ–ª–∞)
  if (searchWord.length >= 4) {
    const substrings = []
    for (let i = 0; i <= searchWord.length - 4; i++) {
      substrings.push(searchWord.substring(i, i + 4))
    }
    return substrings.some(substr => nomName.includes(substr))
  }

  return false
}

/**
 * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –∏—Ç–æ–≥–æ–≤–æ–≥–æ score
 */
const applyAlgorithmSettings = (score: number, algorithm: 'strict' | 'balanced' | 'fuzzy'): number => {
  switch (algorithm) {
    case 'strict':
      // –°—Ç—Ä–æ–≥–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º - —Å–Ω–∏–∂–∞–µ—Ç score –¥–ª—è –Ω–µ—Ç–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
      return score > 0.7 ? score : score * 0.8

    case 'fuzzy':
      // –ú—è–≥–∫–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º - –ø–æ–≤—ã—à–∞–µ—Ç score –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
      return Math.min(0.95, score * 1.2)

    case 'balanced':
    default:
      // –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º - –±–µ–∑ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫
      return score
  }
}

/**
 * –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å—Ö–æ–∂–µ—Å—Ç–∏ —Å—Ç—Ä–æ–∫
 */
const calculateStringSimilarity = (str1: string, str2: string): number => {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º Levenshtein distance
  const matrix: number[][] = []
  const len1 = str1.length
  const len2 = str2.length

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Ç—Ä–∏—Ü—ã
  for (let i = 0; i <= len1; i++) {
    matrix[i] = [i]
  }
  for (let j = 0; j <= len2; j++) {
    matrix[0][j] = j
  }

  // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã
  for (let i = 1; i <= len1; i++) {
    for (let j = 1; j <= len2; j++) {
      const cost = str1[i - 1] === str2[j - 1] ? 0 : 1
      matrix[i][j] = Math.min(
        matrix[i - 1][j] + 1,      // deletion
        matrix[i][j - 1] + 1,      // insertion
        matrix[i - 1][j - 1] + cost // substitution
      )
    }
  }

  const maxLen = Math.max(len1, len2)
  const distance = matrix[len1][len2]
  return maxLen === 0 ? 1 : (maxLen - distance) / maxLen
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ML
 */
export const getMLMetrics = async (): Promise<MLMetrics> => {
  // LOG: –ø–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ ML –∏–∑ localStorage
  const defaultMetrics: MLMetrics = {
    totalPredictions: 0,
    successfulPredictions: 0,
    averageConfidence: 0,
    averageProcessingTime: 0,
    modelUsageStats: {}
  }

  try {
    const saved = localStorage.getItem('ml-metrics')
    return saved ? JSON.parse(saved) : defaultMetrics
  } catch {
    return defaultMetrics
  }
}

/**
 * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ML
 */
export const updateMLMetrics = async (
  response: MLPredictionResponse,
  successful: boolean
): Promise<void> => {
  // LOG: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ ML
  const metrics = await getMLMetrics()

  metrics.totalPredictions++
  if (successful) metrics.successfulPredictions++

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
  const currentAvg = metrics.averageProcessingTime
  const count = metrics.totalPredictions
  metrics.averageProcessingTime = (currentAvg * (count - 1) + response.processingTime) / count

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω—é—é confidence
  if (response.suggestions.length > 0) {
    const avgConfidence = response.suggestions.reduce((sum, s) => sum + s.confidence, 0) / response.suggestions.length
    const successCount = metrics.successfulPredictions
    metrics.averageConfidence = (metrics.averageConfidence * (successCount - 1) + avgConfidence) / successCount
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π
  metrics.modelUsageStats[response.modelUsed] = (metrics.modelUsageStats[response.modelUsed] || 0) + 1

  localStorage.setItem('ml-metrics', JSON.stringify(metrics))
}

/**
 * Server-side –ø–æ–∏—Å–∫ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã –¥–ª—è –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤ –¥–∞–Ω–Ω—ã—Ö
 */
export const searchNomenclature = async (searchTerm: string, limit: number = 50): Promise<Array<{ id: string; name: string }>> => {
  if (!supabase) throw new Error('Supabase not initialized')

  if (!searchTerm || searchTerm.length < 1) return []

  const trimmedTerm = searchTerm.trim()

  console.log('üîç Server search for nomenclature:', trimmedTerm) // LOG: —Å–µ—Ä–≤–µ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã

  try {
    // –£–ü–†–û–©–ï–ù–ò–ï: –ü—Ä–æ—Å—Ç–æ–π ILIKE –ø–æ–∏—Å–∫ –≤–º–µ—Å—Ç–æ —Å–ª–æ–∂–Ω–æ–≥–æ OR —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
    const { data, error } = await supabase
      .from('nomenclature')
      .select('id, name')
      .ilike('name', `%${trimmedTerm}%`)
      .order('name')
      .limit(limit)

    if (error) {
      console.error('üîç Nomenclature search error:', error) // LOG: –æ—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã
      throw error
    }

    console.log('üîç Found nomenclature items:', data?.length || 0) // LOG: –Ω–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã
    return data || []
  } catch (error) {
    console.error('üîç Nomenclature search failed:', error) // LOG: –ø–æ–∏—Å–∫ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã –Ω–µ —É–¥–∞–ª—Å—è
    return []
  }
}

/**
 * –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –º–∞—Ç–µ—Ä–∏–∞–ª–∞
 */
export const predictSuppliers = async (
  request: MLPredictionRequest,
  signal?: AbortSignal
): Promise<MLPredictionResponse> => {
  const startTime = Date.now()
  const config = await getMLConfig()

  // LOG: –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ AbortSignal –≤ predictSuppliers
  console.log('üîç ML Suppliers DEBUG: AbortSignal status:', {
    hasSignal: !!signal,
    aborted: signal?.aborted || false,
    materialName: request.materialName
  })

  if (!config.enabled) {
    return {
      suggestions: [],
      processingTime: Date.now() - startTime,
      modelUsed: 'fallback (ML disabled)'
    }
  }

  try {
    // ===============================
    // –í–´–ë–û–† –ú–ï–ñ–î–£ AI –ò ML –†–ï–ñ–ò–ú–ê–ú–ò (–ü–û–°–¢–ê–í–©–ò–ö–ò)
    // ===============================
    // –ü–ê–¢–¢–ï–†–ù –î–õ–Ø –ö–û–ü–ò–†–û–í–ê–ù–ò–Ø: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã AI/ML –¥–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
    const mlModeConfig = await mlModeApi.getCurrentMode()
    const currentMode = mlModeConfig.mode

    console.log('üîÑ ML Suppliers: –†–µ–∂–∏–º', currentMode, '–¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞:', request.materialName)
    console.log('üîç DEBUG Suppliers: –ü–æ–ª–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–µ–∂–∏–º–∞:', mlModeConfig) // DEBUG LOG

    // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω Deepseek AI —Ä–µ–∂–∏–º
    if (currentMode === 'deepseek') {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Deepseek
      const deepseekAvailable = await mlModeApi.isDeepseekAvailable()

      if (deepseekAvailable) {
        try {
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º Deepseek AI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –∏ –ø–æ–∏—Å–∫–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
          console.log('ü§ñ AI Mode Suppliers: –ó–∞–ø—É—Å–∫ Deepseek –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤')
          const aiResult = await predictWithDeepseek(request, signal) // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–µ—Ä–µ–¥–∞–µ–º signal

          // –ï—Å–ª–∏ AI –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ö
          if (aiResult.suggestions.length > 0) {
            console.log('ü§ñ AI Mode Suppliers: Deepseek –≤–µ—Ä–Ω—É–ª', aiResult.suggestions.length, '–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤')
            return {
              ...aiResult,
              processingTime: Date.now() - startTime,
              modelUsed: 'deepseek'
            }
          }
        } catch (aiError) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ - AbortError –Ω–µ —Ç—Ä–µ–±—É–µ—Ç fallback
          if (aiError instanceof Error && aiError.name === 'AbortError') {
            console.log('ü§ñ AI Mode Suppliers: –ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (AbortError)') // LOG: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞–ø—Ä–æ—Å–∞
            throw aiError // –ü–µ—Ä–µ–¥–∞–µ–º AbortError –±–µ–∑ fallback
          }

          console.error('ü§ñ AI Mode Suppliers: –û—à–∏–±–∫–∞ Deepseek, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π ML:', aiError)

          // –ï—Å–ª–∏ auto_fallback –≤–∫–ª—é—á–µ–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π ML
          if (mlModeConfig.auto_fallback) {
            console.log('üîÑ AI Mode Suppliers: –ê–≤—Ç–æ—Ñ–æ–ª–ª–±—ç–∫ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π ML')
            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å –ª–æ–∫–∞–ª—å–Ω—ã–º ML –Ω–∏–∂–µ
          } else {
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É –±–µ–∑ fallback
            return {
              suggestions: [],
              processingTime: Date.now() - startTime,
              modelUsed: 'fallback',
              fallbackReason: '–û—à–∏–±–∫–∞ Deepseek AI –¥–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤'
            }
          }
        }
      } else {
        console.warn('ü§ñ AI Mode Suppliers: Deepseek –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π ML')
      }
    }

    // ===============================
    // –õ–û–ö–ê–õ–¨–ù–´–ô ML –ê–õ–ì–û–†–ò–¢–ú (–ü–û–°–¢–ê–í–©–ò–ö–ò)
    // ===============================
    console.log('üîÑ Local ML Suppliers: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ–∏—Å–∫–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤')

    // –ò—â–µ–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –º–∞—Ç–µ—Ä–∏–∞–ª–∞
    const suggestions = await getSupplierBasedSuggestions(request)

    if (suggestions.length > 0) {
      return {
        suggestions: suggestions.slice(0, config.maxSuggestions),
        processingTime: Date.now() - startTime,
        modelUsed: 'supplier-similarity'
      }
    }

    return {
      suggestions: [],
      processingTime: Date.now() - startTime,
      modelUsed: 'fallback (no matches)'
    }

  } catch (error) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ - AbortError –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã—à–µ
    if (error instanceof Error && error.name === 'AbortError') {
      console.log('ü§ñ ML Suppliers: –ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (AbortError)') // LOG: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞–ø—Ä–æ—Å–∞
      throw error // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º AbortError –±–µ–∑ fallback
    }

    console.error('ML supplier prediction error:', error)
    return {
      suggestions: [],
      processingTime: Date.now() - startTime,
      modelUsed: 'fallback (error)'
    }
  }
}

/**
 * –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø–æ—Å—Ç–∞–≤—â–∏–∫—É
 */
export const getNomenclatureBySupplier = async (supplierId: string): Promise<any[]> => {
  if (!supabase) throw new Error('Supabase not initialized')

  try {
    console.log('üîç ML: Getting nomenclature for supplier:', supplierId) // LOG: –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã –ø–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É

    const { data, error } = await supabase
      .from('nomenclature_supplier_mapping')
      .select(`
        nomenclature:nomenclature!inner(
          id,
          name
        )
      `)
      .eq('supplier_id', supplierId)

    if (error) {
      console.error('üîç Error fetching nomenclature by supplier:', error)
      return []
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã
    const uniqueNomenclatures = new Map()
    data?.forEach(item => {
      const nom = item.nomenclature
      if (nom && !uniqueNomenclatures.has(nom.id)) {
        uniqueNomenclatures.set(nom.id, nom)
      }
    })

    const result = Array.from(uniqueNomenclatures.values())
    console.log('üîç ML: Found nomenclatures for supplier:', result.length) // LOG: –Ω–∞–π–¥–µ–Ω–æ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä

    return result

  } catch (error) {
    console.error('üîç Exception in getNomenclatureBySupplier:', error)
    return []
  }
}

/**
 * –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: ML –ø–æ–∏—Å–∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏
 */
const getSupplierBasedSuggestions = async (
  request: MLPredictionRequest
): Promise<NomenclatureSuggestion[]> => {
  if (!supabase) throw new Error('Supabase not initialized')

  const { materialName } = request
  const searchTerm = materialName.toLowerCase().trim()
  const config = await getMLConfig()

  if (searchTerm.length < 2) return []

  console.log('üîç ML: Starting supplier search for:', searchTerm, 'with algorithm:', config.algorithm) // LOG: –Ω–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤

  // –£–õ–£–ß–®–ï–ù–ù–´–ô –ø–æ–∏—Å–∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤: –∏—â–µ–º –∫–∞–∫ –ø–æ –ø–æ–ª–Ω–æ–º—É —Ç–µ—Ä–º–∏–Ω—É, —Ç–∞–∫ –∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
  const supplierSearchWords = searchTerm.split(/[\s\-.,()]+/).filter(word => word.length >= 2)
  console.log('üîç ML: Supplier search words extracted:', supplierSearchWords) // LOG: –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤

  // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: –¢–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –ø–æ–ª–Ω–æ–º—É —Ç–µ—Ä–º–∏–Ω—É
  let { data: matches, error } = await supabase
    .from('supplier_names')
    .select('id, name')
    .ilike('name', `%${searchTerm}%`)
    .limit(100)

  console.log('üîç ML: Exact supplier search results:', matches?.length || 0) // LOG: —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤

  // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: –ï—Å–ª–∏ —Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –∏—â–µ–º –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
  if ((!matches || matches.length === 0) && supplierSearchWords.length > 0) {
    console.log('üîç ML: Trying supplier keyword-based search...') // LOG: –ø–æ–∏—Å–∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º

    const mainMaterial = supplierSearchWords[0]
    const { data: keywordMatches, error: keywordError } = await supabase
      .from('supplier_names')
      .select('id, name')
      .ilike('name', `%${mainMaterial}%`)
      .limit(200)

    console.log(`üîç ML: Supplier keyword search for "${mainMaterial}":`, keywordMatches?.length || 0) // LOG: —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É

    if (keywordMatches && keywordMatches.length > 0) {
      matches = keywordMatches
      error = keywordError
    }
  }

  // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 3: –ü–æ–∏—Å–∫ –ø–æ —Å–∏–Ω–æ–Ω–∏–º–∞–º –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
  if ((!matches || matches.length === 0)) {
    console.log('üîç ML: Trying supplier synonyms search...') // LOG: –ø–æ–∏—Å–∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –ø–æ —Å–∏–Ω–æ–Ω–∏–º–∞–º

    if (searchTerm.includes('–ø–µ–Ω–æ–ø–æ') || searchTerm.includes('–ø—Å–±') || searchTerm.includes('–ø–µ–Ω–æ–ø–ª–∞—Å—Ç')) {
      const { data: synonymMatches, error: synonymError } = await supabase
        .from('supplier_names')
        .select('id, name')
        .or(`name.ilike.%–ø–µ–Ω–æ–ø–ª–∞—Å—Ç%,name.ilike.%–ø–µ–Ω–æ–ø–æ–ª–∏—Å—Ç–∏—Ä–æ–ª%,name.ilike.%–ø–æ–ª–∏—Å—Ç–∏—Ä–æ–ª%`)
        .limit(150)

      console.log(`üîç ML: Supplier synonym search results:`, synonymMatches?.length || 0) // LOG: —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –ø–æ —Å–∏–Ω–æ–Ω–∏–º–∞–º

      if (synonymMatches && synonymMatches.length > 0) {
        matches = synonymMatches
        error = synonymError
      }
    }
  }

  if (error) {
    console.error('üîç ML: Supplier search failed:', error) // LOG: –ø–æ–∏—Å–∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –Ω–µ —É–¥–∞–ª—Å—è
    return []
  }

  if (!matches || matches.length === 0) {
    console.log('üîç ML: No supplier matches found for:', searchTerm) // LOG: —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    return []
  }

  console.log('üîç ML: Found supplier matches:', matches.length) // LOG: –Ω–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤

  // –û—á–∏—â–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π —Ç–µ—Ä–º–∏–Ω –æ—Ç –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
  const cleanedSearchTerm = cleanTermForMatching(searchTerm, config.ignoredTerms)
  const cleanedSearchWords = cleanedSearchTerm.split(/\s+/).filter(word => word.length >= config.minWordLength)

  console.log('üîç ML: Original term:', searchTerm) // LOG: –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫–æ–≤—ã–π —Ç–µ—Ä–º–∏–Ω
  console.log('üîç ML: Cleaned search term:', cleanedSearchTerm, 'words:', cleanedSearchWords) // LOG: –æ—á–∏—â–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫–æ–≤—ã–π —Ç–µ—Ä–º–∏–Ω

  const effectiveSearchTerm = cleanedSearchTerm.length < 3 ? searchTerm : cleanedSearchTerm
  console.log('üîç ML: Effective search term:', effectiveSearchTerm) // LOG: —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫–æ–≤—ã–π —Ç–µ—Ä–º–∏–Ω

  // –í—ã—á–∏—Å–ª—è–µ–º similarity —Å —É—á–µ—Ç–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
  const suggestions = matches.map((supplier, index) => {
    const supplierLower = supplier.name.toLowerCase()
    const cleanedSupplierName = cleanTermForMatching(supplierLower, config.ignoredTerms)

    // –ë–∞–∑–æ–≤—ã–π similarity score —Å –ø–æ–º–æ—â—å—é Levenshtein
    const rawSimilarity = calculateStringSimilarity(effectiveSearchTerm, cleanedSupplierName)
    const similarity = rawSimilarity * config.similarityWeight

    let totalBonus = 0
    const bonusBreakdown = []

    // –ë–æ–Ω—É—Å –∑–∞ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø—Ä–µ—Ñ–∏–∫—Å–∞
    if (cleanedSupplierName.startsWith(effectiveSearchTerm) || supplierLower.startsWith(searchTerm)) {
      totalBonus += config.prefixBonus
      bonusBreakdown.push(`prefix:${Math.round(config.prefixBonus * 100)}%`)
    }

    // –ë–æ–Ω—É—Å –∑–∞ —Ç–æ—á–Ω–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ
    if (cleanedSupplierName.includes(effectiveSearchTerm) || supplierLower.includes(searchTerm)) {
      totalBonus += config.exactMatchBonus
      bonusBreakdown.push(`exact:${Math.round(config.exactMatchBonus * 100)}%`)
    }

    // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –≤ –Ω–∞–∑–≤–∞–Ω–∏—è—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
    const keywordScore = calculateKeywordScore(supplierSearchWords, cleanedSupplierName, config)
    const keywordBonus = keywordScore * config.keywordBonus
    totalBonus += keywordBonus
    bonusBreakdown.push(`keywords:${Math.round(keywordScore * 100)}%*${Math.round(config.keywordBonus * 100)}%=${Math.round(keywordBonus * 100)}%`)

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏
    let finalScore = similarity + totalBonus
    const beforeAlgorithm = finalScore
    finalScore = applyAlgorithmSettings(finalScore, config.algorithm)

    const finalConfidence = Math.max(0.1, Math.min(0.95, finalScore))

    const algorithmAdjustment = finalScore - beforeAlgorithm

    if (process.env.NODE_ENV === 'development') {
      console.log(`üîç ML: Supplier "${supplier.name}" (${index + 1}/${matches.length}):`, {
        similarity: Math.round(similarity * 100) + '%',
        bonuses: bonusBreakdown.join(' + '),
        algorithm: config.algorithm + (algorithmAdjustment !== 0 ? ` (${algorithmAdjustment > 0 ? '+' : ''}${Math.round(algorithmAdjustment * 100)}%)` : ''),
        confidence: Math.round(finalConfidence * 100) + '%'
      })
    }

    return {
      id: supplier.id,
      name: supplier.name,
      confidence: finalConfidence,
      reasoning: `${Math.round(similarity * 100)}% similarity + [${bonusBreakdown.join(', ')}] via ${config.algorithm} algorithm`
    }
  })

  // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø–æ—Ä–æ–≥—É —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
  const filteredSuggestions = suggestions
    .filter(s => s.confidence >= config.confidenceThreshold)
    .sort((a, b) => b.confidence - a.confidence)

  console.log('üîç ML: Supplier suggestions above threshold:', filteredSuggestions.length) // LOG: –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –≤—ã—à–µ –ø–æ—Ä–æ–≥–∞

  return filteredSuggestions
}

/**
 * ===============================
 * DEEPSEEK AI PREDICTION
 * ===============================
 * –ü–ê–¢–¢–ï–†–ù –î–õ–Ø –ö–û–ü–ò–†–û–í–ê–ù–ò–Ø: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Deepseek AI –≤–º–µ—Å—Ç–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ ML
 * –ê–¥–∞–ø—Ç–∏—Ä—É–µ—Ç ML –∑–∞–ø—Ä–æ—Å –∫ —Ñ–æ—Ä–º–∞—Ç—É Deepseek –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç
 */
async function predictWithDeepseek(request: MLPredictionRequest, externalSignal?: AbortSignal): Promise<MLPredictionResponse> {
  console.log('ü§ñ Deepseek: –ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞:', request.materialName)
  console.log('üîç DEEPSEEK DEBUG: External signal status:', {
    hasSignal: !!externalSignal,
    aborted: externalSignal?.aborted || false
  })

  try {
    // –ü–æ–ª—É—á–∞–µ–º ML –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const mlConfig = await getMLConfig()

    const maxSuggestions = mlConfig?.maxSuggestions || 15
    console.log(`üîç Deepseek: –ú–∞–∫—Å–∏–º—É–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑ ML –∫–æ–Ω—Ñ–∏–≥–∞: ${maxSuggestions}`) // LOG: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ML –∑–∞–ø—Ä–æ—Å –≤ —Ñ–æ—Ä–º–∞—Ç Deepseek
    const deepseekRequest: DeepseekMaterialRequest = {
      material_name: request.materialName,
      context: request.context ? {
        project_type: request.context.projectId ? '—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π' : undefined,
        cost_category: request.context.categoryId,
        cost_type: request.context.typeId,
        location: undefined // –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      } : undefined,
      preferences: {
        prefer_eco_friendly: false,
        budget_conscious: true,
        quality_priority: true,
        max_suggestions: maxSuggestions // –ü–µ—Ä–µ–¥–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      }
    }

    console.log('ü§ñ Deepseek: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å:', deepseekRequest)

    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï AbortError: –ü–µ—Ä–µ–¥–∞–µ–º externalSignal –≤ Deepseek API
    const deepseekResponse = await deepseekApi.analyzeMaterial(deepseekRequest, externalSignal)

    console.log('ü§ñ Deepseek: –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç —Å', deepseekResponse.recommendations.length, '—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏')
    console.log('üîç Deepseek: –ê–Ω–∞–ª–∏–∑ –º–∞—Ç–µ—Ä–∏–∞–ª–∞:', deepseekResponse.material_analysis)

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–≤–µ—Ç Deepseek –≤ —Ñ–æ—Ä–º–∞—Ç ML —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    const suggestions: NomenclatureSuggestion[] = await Promise.all(
      deepseekResponse.recommendations.map(async (rec) => {
        // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ ID –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        let nomenclatureId = rec.nomenclature_id

        // –ï—Å–ª–∏ ID –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        if (!nomenclatureId || nomenclatureId.startsWith('ai-suggestion-') || nomenclatureId.startsWith('fallback-')) {
          const searchResults = await searchNomenclatureByName(rec.nomenclature_name)
          nomenclatureId = searchResults.length > 0 ? searchResults[0].id : rec.nomenclature_id
        }

        // –ù–û–í–´–ô –ê–õ–ì–û–†–ò–¢–ú: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –æ—Ç AI (—ç—Ç–∞–ø 3)
        // AI —É–∂–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª –ø—Ä–µ–¥–æ—Ç–æ–±—Ä–∞–Ω–Ω—ã–µ ML –∑–∞–ø–∏—Å–∏, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–µ –Ω—É–∂–µ–Ω
        let fullMaterialName = rec.supplier_name || rec.nomenclature_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'

        console.log(`üéØ AI –í—ã–±–æ—Ä: –ú–∞—Ç–µ—Ä–∏–∞–ª "${fullMaterialName}" —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω AI –∏–∑ –ø—Ä–µ–¥–æ—Ç–æ–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π`) // LOG: AI –≤—ã–±–æ—Ä –∏–∑ –ø—Ä–µ–¥–æ—Ç–æ–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ª—É–∂–µ–±–Ω—ã–º fallback-—Ç–µ–∫—Å—Ç–æ–º
        const fallbackTexts = [
          '–¢—Ä–µ–±—É–µ—Ç—Å—è —É—Ç–æ—á–Ω–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞',
          '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
          '–£—Ç–æ—á–Ω—è–µ—Ç—Å—è',
          '–ú–∞—Ç–µ—Ä–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'
        ]

        if (fallbackTexts.some(fallback => fullMaterialName.includes(fallback))) {
          console.log(`‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω fallback —Ç–µ–∫—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª: ${deepseekRequest.material_name}`)
          // –ï—Å–ª–∏ AI –≤–µ—Ä–Ω—É–ª —Å–ª—É–∂–µ–±–Ω—ã–π —Ç–µ–∫—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
          fullMaterialName = deepseekRequest.material_name
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ —Å –∞–Ω–∞–ª–∏–∑–æ–º —Ü–µ–Ω –∏ –∫–∞—á–µ—Å—Ç–≤–∞
        let enhancedReasoning = `AI: ${rec.reasoning}`

        if (rec.price_analysis) {
          enhancedReasoning += `\nüí∞ –¶–µ–Ω–∞: ${rec.price_analysis}`
        }

        if (rec.quality_score) {
          enhancedReasoning += `\n‚≠ê –ö–∞—á–µ—Å—Ç–≤–æ: ${rec.quality_score}/10`
        }

        if (rec.characteristics_match) {
          enhancedReasoning += `\nüìä –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: ${rec.characteristics_match}`
        }

        return {
          id: nomenclatureId,
          name: fullMaterialName, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –∏–∑ –ë–î
          confidence: Math.max(0.1, Math.min(0.95, rec.confidence)), // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º confidence
          reasoning: enhancedReasoning,
          // –†–ê–°–®–ò–†–ï–ù–ù–´–ï –ü–û–õ–Ø –î–õ–Ø TOOLTIP –ò UI
          tooltip_info: rec.tooltip_info, // –î–ª—è –ø–æ–∫–∞–∑–∞ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
          price_analysis: rec.price_analysis, // –ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω
          quality_score: rec.quality_score, // –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
          supplier_name: rec.supplier_name // –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –æ—Ç AI
        }
      })
    )

    console.log('ü§ñ Deepseek: –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:', suggestions.length)

    return {
      suggestions,
      processingTime: deepseekResponse.usage_stats.processing_time_ms,
      modelUsed: 'deepseek'
    }

  } catch (error) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ - AbortError –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø—Ä–æ—Å–∞
    if (error instanceof Error && error.name === 'AbortError') {
      console.log('ü§ñ Deepseek: –ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (AbortError)') // LOG: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞–ø—Ä–æ—Å–∞
    } else {
      console.error('ü§ñ Deepseek: –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞:', error)
    }
    throw error
  }
}

/**
 * ===============================
 * –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø DEEPSEEK
 * ===============================
 */

/**
 * –ü–û–ò–°–ö –ú–ê–¢–ï–†–ò–ê–õ–ê –í –¢–ê–ë–õ–ò–¶–ï SUPPLIER_NAMES
 * –ù–∞—Ö–æ–¥–∏—Ç –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ supplier_names –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é
 * –í —Ç–∞–±–ª–∏—Ü–µ supplier_names –ø–æ–ª–µ name —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
 */
async function searchMaterialInSuppliers(materialName: string): Promise<Array<{ id?: string; name: string }>> {
  if (!supabase || !materialName) return []

  try {
    // –û—á–∏—â–∞–µ–º –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
    const cleanedName = materialName.trim().toLowerCase()

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
    const keywords = cleanedName
      .replace(/[^\w\s–∞-—è—ë]/g, ' ')
      .split(/\s+/)
      .filter(word => word.length >= 3)
      .filter(word => !['–¥–ª—è', '–ø—Ä–∏', '–ø–æ–¥', '–Ω–∞–¥', '–±–µ–∑', '–ø—Ä–æ', '–∏–ª–∏'].includes(word))

    // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (–±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞)
    const { data: exactMatch, error: exactError } = await supabase
      .from('supplier_names')
      .select('name')
      .ilike('name', cleanedName)
      .limit(1)

    if (!exactError && exactMatch && exactMatch.length > 0) {
      return exactMatch
    }

    // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: –ü–æ–∏—Å–∫ –ø–æ –Ω–∞—á–∞–ª—É –Ω–∞–∑–≤–∞–Ω–∏—è
    const { data: startsWith, error: startsError } = await supabase
      .from('supplier_names')
      .select('name')
      .ilike('name', `${cleanedName}%`)
      .limit(3)

    if (!startsError && startsWith && startsWith.length > 0) {
      return startsWith
    }

    // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 3: –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º (–±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π)
    if (keywords.length > 0) {
      // –ò—â–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
      const keywordQueries = keywords.map(keyword => `%${keyword}%`)

      for (const keyword of keywordQueries) {
        const { data: keywordMatch, error: keywordError } = await supabase
          .from('supplier_names')
          .select('name')
          .ilike('name', keyword)
          .limit(5)

        if (!keywordError && keywordMatch && keywordMatch.length > 0) {
          // –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
          const relevantResults = keywordMatch.filter(item => {
            const itemLower = item.name.toLowerCase()
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ö–æ—Ç—è –±—ã 2 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤–∞ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            const matchingKeywords = keywords.filter(kw => itemLower.includes(kw))
            return matchingKeywords.length >= Math.min(2, keywords.length)
          })

          if (relevantResults.length > 0) {
            return relevantResults
          }
        }
      }
    }

    // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 4: –®–∏—Ä–æ–∫–∏–π –ø–æ–∏—Å–∫ –ø–æ –æ–¥–Ω–æ–º—É –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–ø—ã—Ç–∫–∏)
    if (keywords.length > 0) {
      const mainKeyword = keywords[0] // –°–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ —Å–ª–æ–≤–æ

      const { data: broadMatch, error: broadError } = await supabase
        .from('supplier_names')
        .select('name')
        .ilike('name', `%${mainKeyword}%`)
        .limit(10)

      if (!broadError && broadMatch && broadMatch.length > 0) {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö
        return broadMatch.slice(0, 3)
      }
    }

    return []
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –≤ supplier_names:', error) // LOG: –æ—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
    return []
  }
}

/**
 * –ü–û–ò–°–ö –ù–û–ú–ï–ù–ö–õ–ê–¢–£–†–´ –ü–û –ù–ê–ó–í–ê–ù–ò–Æ
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è AI –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
 */
async function searchNomenclatureByName(name: string): Promise<Array<{ id: string; name: string }>> {
  if (!supabase) return []

  try {
    const { data, error } = await supabase
      .from('nomenclature')
      .select('id, name')
      .ilike('name', `%${name}%`)
      .limit(5)

    if (error) {
      console.error('ü§ñ Deepseek: –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã:', error)
      return []
    }

    return data || []
  } catch (error) {
    console.error('ü§ñ Deepseek: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã:', error)
    return []
  }
}

// ===============================
// –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –ü–û–ò–°–ö–ê –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø AI
// ===============================

/**
 * –í–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ supplier_names
 * –≠–º—É–ª–∏—Ä—É–µ—Ç –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ
 */
export async function vectorSearchSupplierNames(
  materialName: string,
  limit: number = 20
): Promise<Array<{ id: string; name: string; confidence: number }>> {
  if (!supabase || !materialName) return []

  try {
    console.log('üîç –í–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –≤ supplier_names –¥–ª—è:', materialName) // LOG: –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    const { data, error } = await supabase
      .from('supplier_names')
      .select('id, name')
      .limit(1000) // –ë–µ—Ä–µ–º –±–æ–ª—å—à–µ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞

    if (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö supplier_names:', error) // LOG: –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
      return []
    }

    if (!data || data.length === 0) {
      console.log('–¢–∞–±–ª–∏—Ü–∞ supplier_names –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞') // LOG: –ø—É—Å—Ç–∞—è —Ç–∞–±–ª–∏—Ü–∞
      return []
    }

    // –ü—Ä–æ—Å—Ç–∞—è —ç–º—É–ª—è—Ü–∏—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ
    const searchTerms = materialName.toLowerCase().split(/\s+/)

    const results = data
      .map(item => {
        const itemName = item.name.toLowerCase()
        let confidence = 0

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º confidence –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
        searchTerms.forEach(term => {
          if (itemName.includes(term)) {
            confidence += 0.3
          }
          if (itemName.startsWith(term)) {
            confidence += 0.2
          }
          if (itemName.endsWith(term)) {
            confidence += 0.1
          }
        })

        // –ë–æ–Ω—É—Å –∑–∞ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if (itemName === materialName.toLowerCase()) {
          confidence = 1.0
        }

        return {
          id: item.id,
          name: item.name,
          confidence: Math.min(confidence, 1.0)
        }
      })
      .filter(item => item.confidence > 0.1) // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
      .sort((a, b) => b.confidence - a.confidence) // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é confidence
      .slice(0, limit)

    console.log(`üéØ –í–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫: –Ω–∞–π–¥–µ–Ω–æ ${results.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`) // LOG: —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
    return results

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –≤ supplier_names:', error) // LOG: –æ—à–∏–±–∫–∞ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
    return []
  }
}

/**
 * –£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ supplier_names
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–µ—Ä–º–∏–Ω–æ–≤, —Å–∏–Ω–æ–Ω–∏–º—ã –∏ –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—é
 */
export async function keywordSearchSupplierNames(
  materialName: string,
  limit: number = 20
): Promise<Array<{ id: string; name: string; matchedKeywords: string[]; relevanceScore: number; matchType: string }>> {
  if (!supabase || !materialName) return []

  try {
    console.log('üîç –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –≤ supplier_names –¥–ª—è:', materialName) // LOG: —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫

    // –°–ª–æ–≤–∞—Ä—å —Å–∏–Ω–æ–Ω–∏–º–æ–≤ –∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π
    const synonyms: Record<string, string[]> = {
      '—Ç–µ–ø–ª–æ–∏–∑–æ–ª—è—Ü–∏—è': ['—É—Ç–µ–ø–ª–∏—Ç–µ–ª—å', '–∏–∑–æ–ª—è—Ü–∏—è', '—Ç–µ—Ä–º–æ–∏–∑–æ–ª—è—Ü–∏—è', '—Ç–µ–ø–ª–æ–∏–∑–æ–ª—è—Ç–æ—Ä'],
      '–º–∏–Ω–µ—Ä–∞–ª—å–Ω–∞—è': ['–º–∏–Ω–≤–∞—Ç–∞', '–∫–∞–º–µ–Ω–Ω–∞—è', '–±–∞–∑–∞–ª—å—Ç–æ–≤–∞—è', '—Å—Ç–µ–∫–ª–æ–≤–∞—Ç–∞'],
      '–ø–ª–∏—Ç–∞': ['–ø–ª–∏—Ç—ã', '–ª–∏—Å—Ç—ã', '–ø–∞–Ω–µ–ª–∏', '–±–ª–æ–∫–∏'],
      '–∫–∏—Ä–ø–∏—á': ['–∫–∏—Ä–ø–∏—á–∏', '–±–ª–æ–∫–∏', '–∫–∞–º–Ω–∏'],
      '–±–µ—Ç–æ–Ω': ['—Ä–∞—Å—Ç–≤–æ—Ä', '—Å–º–µ—Å—å', '—Å–æ—Å—Ç–∞–≤'],
      '–∞—Ä–º–∞—Ç—É—Ä–∞': ['–∞—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ', '—Å—Ç–∞–ª—å', '–ø—Ä—É—Ç–∫–∏', '—Å—Ç–µ—Ä–∂–Ω–∏'],
      '–≥–∏–ø—Å': ['–≥–∏–ø—Å–æ–≤—ã–π', '—à—Ç—É–∫–∞—Ç—É—Ä–∫–∞', '—à–ø–∞—Ç–ª–µ–≤–∫–∞'],
      '—Ü–µ–º–µ–Ω—Ç': ['–ø–æ—Ä—Ç–ª–∞–Ω–¥—Ü–µ–º–µ–Ω—Ç', '–≤—è–∂—É—â–µ–µ'],
      '–º–µ—Ç–∞–ª–ª': ['—Å—Ç–∞–ª—å–Ω–æ–π', '–∂–µ–ª–µ–∑–Ω—ã–π', '–º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–π'],
      '–ø–ª–∞—Å—Ç–∏–∫': ['–ø–ª–∞—Å—Ç–∏–∫–æ–≤—ã–π', '–ø–æ–ª–∏–º–µ—Ä', '–ü–í–•'],
      '–¥–µ—Ä–µ–≤–æ': ['–¥–µ—Ä–µ–≤—è–Ω–Ω—ã–π', '–¥—Ä–µ–≤–µ—Å–∏–Ω–∞', '–±—Ä—É—Å', '–¥–æ—Å–∫–∞'],
      '—Å—Ç–µ–∫–ª–æ': ['—Å—Ç–µ–∫–ª—è–Ω–Ω—ã–π', '–æ—Å—Ç–µ–∫–ª–µ–Ω–∏–µ']
    }

    // –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã –∏ –∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç—ã
    const technicalTerms: Record<string, string[]> = {
      '—Ñ–∞—Å–∞–¥': ['—Ñ–∞—Å–∞–¥–Ω—ã–π', '–Ω–∞—Ä—É–∂–Ω—ã–π', '–≤–Ω–µ—à–Ω–∏–π'],
      '–∫—Ä–æ–≤–ª—è': ['–∫—Ä–æ–≤–µ–ª—å–Ω—ã–π', '–∫—Ä—ã—à–∞', '–ø–æ–∫—Ä—ã—Ç–∏–µ'],
      '—Ñ—É–Ω–¥–∞–º–µ–Ω—Ç': ['—Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–Ω—ã–π', '–æ—Å–Ω–æ–≤–∞–Ω–∏–µ'],
      '—Å—Ç–µ–Ω–∞': ['—Å—Ç–µ–Ω–æ–≤–æ–π', '–ø–µ—Ä–µ–≥–æ—Ä–æ–¥–∫–∞'],
      '–ø–æ–ª': ['–Ω–∞–ø–æ–ª—å–Ω—ã–π', '–ø–æ–∫—Ä—ã—Ç–∏–µ'],
      '–ø–æ—Ç–æ–ª–æ–∫': ['–ø–æ—Ç–æ–ª–æ—á–Ω—ã–π', '–ø–æ–¥–≤–µ—Å–Ω–æ–π']
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    const processedQuery = materialName.toLowerCase()
      .replace(/[^\w–∞-—è—ë\s]/g, ' ') // –£–±–∏—Ä–∞–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
      .replace(/\s+/g, ' ') // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
      .trim()

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ç–µ—Ä–º–∏–Ω—ã
    const originalKeywords = processedQuery
      .split(/\s+/)
      .filter(word => word.length >= 2)
      .filter(word => !['–º–º', '—Å–º', '–º', '–∫–≥', '—à—Ç', '—Ç', '–≥—Ä', '–ª', '–º2', '–º3', '—à—Ç'].includes(word))

    // –†–∞—Å—à–∏—Ä—è–µ–º –ø–æ–∏—Å–∫ —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏
    const expandedKeywords = new Set<string>()
    originalKeywords.forEach(keyword => {
      expandedKeywords.add(keyword)

      // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–Ω–æ–Ω–∏–º—ã
      if (synonyms[keyword]) {
        synonyms[keyword].forEach(synonym => expandedKeywords.add(synonym))
      }

      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã
      if (technicalTerms[keyword]) {
        technicalTerms[keyword].forEach(term => expandedKeywords.add(term))
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
      if (keyword.endsWith('—ã–π') || keyword.endsWith('–æ–π')) {
        expandedKeywords.add(keyword.slice(0, -2)) // —É–±–∏—Ä–∞–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ
      }
      if (keyword.endsWith('–∞—è') || keyword.endsWith('—è—è')) {
        expandedKeywords.add(keyword.slice(0, -2))
      }
    })

    const allKeywords = Array.from(expandedKeywords)
    console.log('üîç –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:', allKeywords) // LOG: —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞

    if (allKeywords.length === 0) {
      return []
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    const { data, error } = await supabase
      .from('supplier_names')
      .select('id, name')
      .limit(2000) // –ë–µ—Ä–µ–º –±–æ–ª—å—à–µ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞

    if (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö supplier_names:', error) // LOG: –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
      return []
    }

    if (!data || data.length === 0) {
      console.log('–¢–∞–±–ª–∏—Ü–∞ supplier_names –ø—É—Å—Ç–∞') // LOG: –ø—É—Å—Ç–∞—è —Ç–∞–±–ª–∏—Ü–∞
      return []
    }

    // –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
    const results = data
      .map(item => {
        const itemName = item.name.toLowerCase()
        const itemWords = itemName.split(/\s+/)

        let relevanceScore = 0
        const matchedKeywords: string[] = []
        let matchType = 'partial'

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤—Å–µ–π —Ñ—Ä–∞–∑—ã
        if (itemName.includes(processedQuery)) {
          relevanceScore += 10
          matchType = 'exact'
          matchedKeywords.push('—Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ')
        }

        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ —Å–ª–æ–≤–∞–º
        originalKeywords.forEach(keyword => {
          if (itemName.includes(keyword)) {
            relevanceScore += 3
            matchedKeywords.push(keyword)

            // –ë–æ–Ω—É—Å –∑–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ –Ω–∞—á–∞–ª–µ –Ω–∞–∑–≤–∞–Ω–∏—è
            if (itemName.startsWith(keyword)) {
              relevanceScore += 1
            }

            // –ë–æ–Ω—É—Å –∑–∞ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å–ª–æ–≤–∞ (–Ω–µ —á–∞—Å—Ç–∏ —Å–ª–æ–≤–∞)
            if (itemWords.includes(keyword)) {
              relevanceScore += 1
            }
          }
        })

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω–æ–Ω–∏–º—ã –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã
        allKeywords.forEach(keyword => {
          if (keyword !== originalKeywords.find(ok => ok === keyword) && itemName.includes(keyword)) {
            relevanceScore += 1.5
            if (!matchedKeywords.includes(keyword)) {
              matchedKeywords.push(`${keyword} (—Å–∏–Ω–æ–Ω–∏–º)`)
            }
          }
        })

        // –ë–æ–Ω—É—Å –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≤–ø–∞–¥–∞—é—â–∏—Ö —Å–ª–æ–≤
        const matchRatio = matchedKeywords.length / originalKeywords.length
        relevanceScore += matchRatio * 2

        // –®—Ç—Ä–∞—Ñ –∑–∞ –¥–ª–∏–Ω—É - –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –æ–±—ã—á–Ω–æ —Ç–æ—á–Ω–µ–µ
        const lengthPenalty = Math.max(0, (itemName.length - 50) / 100)
        relevanceScore -= lengthPenalty

        return {
          id: item.id,
          name: item.name,
          matchedKeywords,
          relevanceScore,
          matchType,
          matchRatio
        }
      })
      .filter(item => item.relevanceScore > 0.5) // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
      .sort((a, b) => {
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è, –∑–∞—Ç–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
        if (a.matchType === 'exact' && b.matchType !== 'exact') return -1
        if (b.matchType === 'exact' && a.matchType !== 'exact') return 1
        return b.relevanceScore - a.relevanceScore
      })
      .slice(0, limit)

    console.log(`üéØ –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫: –Ω–∞–π–¥–µ–Ω–æ ${results.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`) // LOG: —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    return results.map(item => ({
      id: item.id,
      name: item.name,
      matchedKeywords: item.matchedKeywords,
      relevanceScore: Math.round(item.relevanceScore * 10) / 10,
      matchType: item.matchType
    }))

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ –≤ supplier_names:', error) // LOG: –æ—à–∏–±–∫–∞ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞
    return []
  }
}

/**
 * –§–£–ù–ö–¶–ò–Ø 3: –ü–æ–∏—Å–∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –º–µ—Ç–æ–¥–æ–º –∏–∑ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (getSupplierBasedSuggestions)
 */
export const editingModeSearchSupplierNames = async (materialName: string): Promise<Array<{
  id: string
  name: string
  confidence: number
}>> => {
  if (!materialName || materialName.trim().length < 2) {
    return []
  }

  try {
    const request: MLPredictionRequest = {
      materialName: materialName.trim()
    }

    const suggestions = await getSupplierBasedSuggestions(request)

    // –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–µ–Ω—å—à–µ 60, –¥–µ–ª–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫
    if (suggestions.length < 60) {
      console.log(`üîç –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: –Ω–∞–π–¥–µ–Ω–æ ${suggestions.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 60. –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫...`) // LOG: —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫

      const additionalResults = await getAdditionalSupplierResults(materialName.trim(), suggestions)

      // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ id
      const existingIds = new Set(suggestions.map(s => s.id))
      const uniqueAdditional = additionalResults.filter(result => !existingIds.has(result.id))

      const allResults = [...suggestions, ...uniqueAdditional]
      console.log(`üîç –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω: –∏—Ç–æ–≥–æ ${allResults.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`) // LOG: —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞

      return allResults.map(suggestion => ({
        id: suggestion.id,
        name: suggestion.name,
        confidence: suggestion.confidence
      }))
    }

    return suggestions.map(suggestion => ({
      id: suggestion.id,
      name: suggestion.name,
      confidence: suggestion.confidence
    }))
  } catch (error) {
    console.error('Editing mode supplier search error:', error)
    return []
  }
}

/**
 * –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–≥–¥–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ–∏—Å–∫ –¥–∞–µ—Ç –º–µ–Ω—å—à–µ 60 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
 */
const getAdditionalSupplierResults = async (
  materialName: string,
  existingResults: NomenclatureSuggestion[]
): Promise<NomenclatureSuggestion[]> => {
  if (!supabase) return []

  try {
    console.log('üîç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –¥–ª—è:', materialName) // LOG: –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫

    const searchTerm = materialName.toLowerCase()
    const additionalResults: NomenclatureSuggestion[] = []

    // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: –ü–æ–∏—Å–∫ –ø–æ –ø–µ—Ä–≤–æ–º—É —Å–ª–æ–≤—É –º–∞—Ç–µ—Ä–∏–∞–ª–∞
    const firstWord = searchTerm.split(/[\s\-.,()]+/)[0]
    if (firstWord && firstWord.length >= 2) {
      const { data: firstWordResults } = await supabase
        .from('supplier_names')
        .select('id, name')
        .ilike('name', `%${firstWord}%`)
        .limit(80)

      if (firstWordResults) {
        firstWordResults.forEach(item => {
          additionalResults.push({
            id: item.id,
            name: item.name,
            confidence: 0.3, // –ë–∞–∑–æ–≤–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
            reasoning: `–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ —Å–ª–æ–≤—É "${firstWord}"`
          })
        })
      }
    }

    // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: –ü–æ–∏—Å–∫ –ø–æ –æ–±—â–∏–º —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º
    const materialSynonyms = {
      '–ø–µ–Ω–æ–ø–ª—ç–∫—Å': ['–ø–µ–Ω–æ–ø–ª–∞—Å—Ç', '–ø–æ–ª–∏—Å—Ç–∏—Ä–æ–ª', '–ø–µ–Ω–æ–ø–æ–ª–∏—Å—Ç–∏—Ä–æ–ª', '–ø—Å–±', 'xps'],
      '—É—Ç–µ–ø–ª–∏—Ç–µ–ª—å': ['—Ç–µ–ø–ª–æ–∏–∑–æ–ª—è—Ü–∏—è', '–∏–∑–æ–ª—è—Ü–∏—è', '—Ç–µ—Ä–º–æ–∏–∑–æ–ª—è—Ü–∏—è'],
      '–º–∏–Ω–µ—Ä–∞–ª—å–Ω–∞—è': ['–º–∏–Ω–≤–∞—Ç–∞', '–∫–∞–º–µ–Ω–Ω–∞—è', '–±–∞–∑–∞–ª—å—Ç–æ–≤–∞—è', '—Å—Ç–µ–∫–ª–æ–≤–∞—Ç–∞'],
      '–ø–ª–∏—Ç–∞': ['–ø–ª–∏—Ç—ã', '–ª–∏—Å—Ç—ã', '–ø–∞–Ω–µ–ª–∏', '–±–ª–æ–∫–∏'],
      '–∫–∏—Ä–ø–∏—á': ['–±–ª–æ–∫', '–∫–∞–º–µ–Ω—å', '–∫–µ—Ä–∞–º–∏—á–µ—Å–∫–∏–π'],
      '–±–µ—Ç–æ–Ω': ['—Ä–∞—Å—Ç–≤–æ—Ä', '—Å–º–µ—Å—å', '—Ü–µ–º–µ–Ω—Ç'],
      '–∞—Ä–º–∞—Ç—É—Ä–∞': ['—Å—Ç–µ—Ä–∂–Ω–∏', '–ø—Ä—É—Ç–∫–∏', '—Å—Ç–∞–ª—å'],
      '–∫—Ä–∞–Ω': ['–≤–µ–Ω—Ç–∏–ª—å', '–∫–ª–∞–ø–∞–Ω', '—Ñ–∏—Ç–∏–Ω–≥', '—à–∞—Ä–æ–≤–æ–π']
    }

    for (const [material, synonyms] of Object.entries(materialSynonyms)) {
      if (searchTerm.includes(material)) {
        for (const synonym of synonyms) {
          const { data: synonymResults } = await supabase
            .from('supplier_names')
            .select('id, name')
            .ilike('name', `%${synonym}%`)
            .limit(20)

          if (synonymResults) {
            synonymResults.forEach(item => {
              additionalResults.push({
                id: item.id,
                name: item.name,
                confidence: 0.25,
                reasoning: `–ü–æ–∏—Å–∫ –ø–æ —Å–∏–Ω–æ–Ω–∏–º—É "${synonym}" –¥–ª—è "${material}"`
              })
            })
          }
        }
        break // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª—É
      }
    }

    // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 3: –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –º–∞–ª–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –±–µ—Ä–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏
    if (additionalResults.length < 40) {
      const { data: randomResults } = await supabase
        .from('supplier_names')
        .select('id, name')
        .limit(60)
        .order('id', { ascending: false }) // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ

      if (randomResults) {
        randomResults.forEach(item => {
          additionalResults.push({
            id: item.id,
            name: item.name,
            confidence: 0.15,
            reasoning: '–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤—ã–±–æ—Ä–∫–∞ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –º–∏–Ω–∏–º—É–º–∞ 60 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤'
          })
        })
      }
    }

    // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ –ø–æ–ø–∞–ª–∏ –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    const uniqueResults: NomenclatureSuggestion[] = []
    const seenIds = new Set()

    additionalResults.forEach(result => {
      if (!seenIds.has(result.id)) {
        seenIds.add(result.id)
        uniqueResults.push(result)
      }
    })

    console.log(`üîç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–∞—à–µ–ª ${uniqueResults.length} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`) // LOG: —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
    return uniqueResults

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞:', error) // LOG: –æ—à–∏–±–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
    return []
  }
}

/**
 * –§–£–ù–ö–¶–ò–Ø 4: –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –≥–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ (4-–π –∞–ª–≥–æ—Ä–∏—Ç–º)
 * –û—Å–Ω–æ–≤–∞–Ω –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ MCP –∞–≥–µ–Ω—Ç–∞ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –∫ —Ç–∏–ø—É –º–∞—Ç–µ—Ä–∏–∞–ª–∞
 */
export const adaptiveHybridSearchSupplierNames = async (materialName: string): Promise<Array<{
  id: string
  name: string
  confidence: number
  matchDetails: {
    materialTokens: string[]
    sizeTokens: string[]
    brandTokens: string[]
    articleTokens: string[]
    matchType: 'EXACT' | 'PARTIAL' | 'SEMANTIC' | 'BRAND' | 'SIZE'
    score: number
    explanation: string
  }
}>> => {
  if (!materialName || materialName.trim().length < 2) {
    return []
  }

  if (!supabase) throw new Error('Supabase not initialized')

  try {
    const query = materialName.toLowerCase().trim()
    console.log('ü§ñ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –¥–ª—è:', query) // LOG: –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫

    // 1. –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–Ø –ó–ê–ü–†–û–°–ê
    const classification = classifyMaterialQuery(query)
    console.log('üìä –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è:', classification) // LOG: –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞

    // 2. –ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–ê–Ø –¢–û–ö–ï–ù–ò–ó–ê–¶–ò–Ø
    const tokens = intelligentTokenize(query)
    console.log('üî§ –¢–æ–∫–µ–Ω—ã:', tokens) // LOG: —Ç–æ–∫–µ–Ω–∏–∑–∞—Ü–∏—è

    // 3. –ê–î–ê–ü–¢–ò–í–ù–´–ô –ü–û–ò–°–ö
    const searchResults = await performAdaptiveSearch(tokens, classification)
    console.log('üéØ –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π:', searchResults.length) // LOG: —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞

    // 4. –£–ú–ù–û–ï –†–ê–ù–ñ–ò–†–û–í–ê–ù–ò–ï
    const rankedResults = intelligentRanking(searchResults, tokens, classification)
    console.log('üìà –†–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ') // LOG: —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ

    return rankedResults.slice(0, 60) // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ç–æ–ø-60

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞:', error)
    return []
  }
}

// –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–∏–ø–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
function classifyMaterialQuery(query: string): 'SIMPLE' | 'TECHNICAL' | 'MIXED' {
  const technicalPatterns = [
    /\b[A-Z]{2,}-[A-Z0-9]+\b/, // –ê—Ä—Ç–∏–∫—É–ª—ã —Ç–∏–ø–∞ BVR-R
    /\bDN\d+\b/i, // –†–∞–∑–º–µ—Ä—ã —Ç—Ä—É–±
    /\b\d+[x—ÖX]\d+([x—ÖX]\d+)?\b/, // –†–∞–∑–º–µ—Ä—ã 1200x600x20
    /\b[–ê-–Ø]{2,}\s+\d+\b/, // –°–µ—Ä–∏–∏ —Ç–∏–ø–∞ –ü–°–ë–° 25
    /\b\d{6,}\b/, // –î–ª–∏–Ω–Ω—ã–µ –∞—Ä—Ç–∏–∫—É–ª—ã
  ]

  const simpleMaterials = [
    '–ø–µ–Ω–æ–ø–ª—ç–∫—Å', '–ø–µ–Ω–æ–ø–ª–∞—Å—Ç', '—É—Ç–µ–ø–ª–∏—Ç–µ–ª—å', '–∏–∑–æ–ª—è—Ü–∏—è', '–ø–ª–∏—Ç–∞', '–ø–ª–∏—Ç—ã',
    '—Ç–µ–ø–ª–æ–∏–∑–æ–ª—è—Ü–∏—è', '–º–∏–Ω–µ—Ä–∞–ª—å–Ω–∞—è', '–±–∞–∑–∞–ª—å—Ç–æ–≤–∞—è', '–∫–∞–º–µ–Ω–Ω–∞—è', '—Å—Ç–µ–∫–ª–æ–≤–∞—Ç–∞', '–≤–∞—Ç–∞',
    '–±–µ—Ç–æ–Ω', '—Ü–µ–º–µ–Ω—Ç', '–∫–∏—Ä–ø–∏—á', '–±–ª–æ–∫', '–∞—Ä–º–∞—Ç—É—Ä–∞', '–∫—Ä–∞—Å–∫–∞', '—Ç—Ä—É–±–∞', '–∫—Ä–∞–Ω'
  ]

  const hasTechnical = technicalPatterns.some(pattern => pattern.test(query))
  const hasSimple = simpleMaterials.some(material => query.includes(material))

  if (hasSimple && !hasTechnical) return 'SIMPLE'
  if (hasTechnical && !hasSimple) return 'TECHNICAL'
  return 'MIXED'
}

// –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Ç–æ–∫–µ–Ω–∏–∑–∞—Ü–∏—è
function intelligentTokenize(query: string) {
  const tokens = {
    material: [] as string[],
    size: [] as string[],
    brand: [] as string[],
    article: [] as string[],
    all: query.split(/[\s\-.,()]+/).filter(t => t.length > 1)
  }

  // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ (—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã)
  const materials = [
    // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    '–∫—Ä–∞–Ω', '–ø–µ–Ω–æ–ø–ª—ç–∫—Å', '–ø–µ–Ω–æ–ø–ª–∞—Å—Ç', '—à–∞—Ä–æ–≤–æ–π', '—Ä–µ–∑—å–±–æ–≤–æ–π',
    // –¢–µ–ø–ª–æ–∏–∑–æ–ª—è—Ü–∏—è
    '—Ç–µ–ø–ª–æ–∏–∑–æ–ª—è—Ü–∏—è', '—É—Ç–µ–ø–ª–∏—Ç–µ–ª—å', '–∏–∑–æ–ª—è—Ü–∏—è', '–º–∏–Ω–µ—Ä–∞–ª—å–Ω–∞—è', '–ø–ª–∏—Ç–∞', '–ø–ª–∏—Ç—ã',
    '–±–∞–∑–∞–ª—å—Ç–æ–≤–∞—è', '–∫–∞–º–µ–Ω–Ω–∞—è', '—Å—Ç–µ–∫–ª–æ–≤–∞—Ç–∞', '–≤–∞—Ç–∞',
    // –°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
    '–±–µ—Ç–æ–Ω', '—Ü–µ–º–µ–Ω—Ç', '—Ä–∞—Å—Ç–≤–æ—Ä', '–∫–∏—Ä–ø–∏—á', '–±–ª–æ–∫', '–±–ª–æ–∫–∏',
    '–∞—Ä–º–∞—Ç—É—Ä–∞', '–º–µ—Ç–∞–ª–ª', '—Å—Ç–∞–ª—å', '–∂–µ–ª–µ–∑–æ', '–∞–ª—é–º–∏–Ω–∏–π',
    // –û—Ç–¥–µ–ª–æ—á–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
    '–∫—Ä–∞—Å–∫–∞', '–≥—Ä—É–Ω—Ç–æ–≤–∫–∞', '—à—Ç—É–∫–∞—Ç—É—Ä–∫–∞', '—à–ø–∞–∫–ª–µ–≤–∫–∞', '–∫–ª–µ–π',
    '–ø–ª–∏—Ç–∫–∞', '–∫–µ—Ä–∞–º–∏–∫–∞', '–ª–∞–º–∏–Ω–∞—Ç', '–ø–∞—Ä–∫–µ—Ç', '–ª–∏–Ω–æ–ª–µ—É–º',
    // –¢—Ä—É–±—ã –∏ —Ñ–∏—Ç–∏–Ω–≥–∏
    '—Ç—Ä—É–±–∞', '—Ç—Ä—É–±—ã', '—Ñ–∏—Ç–∏–Ω–≥', '—Ñ–∏—Ç–∏–Ω–≥–∏', '–º—É—Ñ—Ç–∞', '—Ç—Ä–æ–π–Ω–∏–∫',
    '–ø–æ–ª–∏—ç—Ç–∏–ª–µ–Ω', '–ø–æ–ª–∏–ø—Ä–æ–ø–∏–ª–µ–Ω', '–º–µ—Ç–∞–ª–ª–æ–ø–ª–∞—Å—Ç–∏–∫',
    // –ö—Ä–µ–ø–µ–∂
    '–≤–∏–Ω—Ç', '–±–æ–ª—Ç', '–≥–∞–π–∫–∞', '—à—É—Ä—É–ø', '—Å–∞–º–æ—Ä–µ–∑', '–¥—é–±–µ–ª—å', '–∞–Ω–∫–µ—Ä'
  ]

  materials.forEach(mat => {
    if (query.toLowerCase().includes(mat)) tokens.material.push(mat)
  })

  // –†–∞–∑–º–µ—Ä—ã (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ)
  const sizes = query.match(/\b(DN\d+|\d+[x—ÖX]\d+([x—ÖX]\d+)?|\d+\s*–º–º|\d+\s*—Å–º|\d+\s*–º)\b/gi) || []
  tokens.size.push(...sizes)

  // –ë—Ä–µ–Ω–¥—ã (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫)
  const brands = [
    '—Ä–∏–¥–∞–Ω', '–ø–µ–Ω–æ–ø–ª—ç–∫—Å', '—Ç–µ—Ö–Ω–æ–Ω–∏–∫–æ–ª—å', 'rockwool', 'isover',
    'ursa', 'knauf', 'paroc', 'baswool', '—Ç–µ—Ä–º–æ–ª–∞–π—Ñ',
    '—ç–∫–æ–≤–µ—Ä', 'izovol', '–∏–∑–æ–≤–æ–ª', '–∏–∑–æ–º–∏–Ω', 'izomin'
  ]
  brands.forEach(brand => {
    if (query.toLowerCase().includes(brand)) tokens.brand.push(brand)
  })

  // –ê—Ä—Ç–∏–∫—É–ª—ã
  const articles = query.match(/\b[A-Z]{2,}-[A-Z0-9]+\b/g) || []
  tokens.article.push(...articles)

  return tokens
}

// –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫
async function performAdaptiveSearch(tokens: any, classification: string) {
  const results = []

  // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: –¢–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º
  if (tokens.article.length > 0) {
    for (const article of tokens.article) {
      const { data } = await supabase!
        .from('supplier_names')
        .select('id, name')
        .ilike('name', `%${article}%`)
        .limit(80)
      if (data) results.push(...data.map((item: any) => ({...item, matchType: 'EXACT', baseScore: 10})))
    }
  }

  // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: –ü–æ–∏—Å–∫ –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª—É + —Ä–∞–∑–º–µ—Ä—É
  if (tokens.material.length > 0 && tokens.size.length > 0) {
    for (const material of tokens.material) {
      for (const size of tokens.size) {
        const { data } = await supabase!
          .from('supplier_names')
          .select('id, name')
          .and(`name.ilike.%${material}%, name.ilike.%${size}%`)
          .limit(50)
        if (data) results.push(...data.map((item: any) => ({...item, matchType: 'PARTIAL', baseScore: 8})))
      }
    }
  }

  // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 3: –ü–æ–∏—Å–∫ –ø–æ –±—Ä–µ–Ω–¥—É
  if (tokens.brand.length > 0) {
    for (const brand of tokens.brand) {
      const { data } = await supabase!
        .from('supplier_names')
        .select('id, name')
        .ilike('name', `%${brand}%`)
        .limit(60)
      if (data) results.push(...data.map((item: any) => ({...item, matchType: 'BRAND', baseScore: 7})))
    }
  }

  // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 4: –ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –∑–Ω–∞—á–∏–º—ã–º —Å–ª–æ–≤–∞–º (fallback)
  // –ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–µ –¥–∞–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–ª–∏ –¥–∞–ª–∏ –º–∞–ª–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  if (results.length < 10) {
    const significantWords = tokens.all.filter((word: string) =>
      word.length >= 3 && // –ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞
      !['–¥–ª—è', '–∏–∑', '–ø–æ–¥', '–ø—Ä–∏', '–±–µ–∑', '–Ω–∞–¥', '–ø—Ä–æ', '–∏–ª–∏'].includes(word.toLowerCase()) // –ò—Å–∫–ª—é—á–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–ª–æ–≤–∞
    )

    for (const word of significantWords) {
      const { data } = await supabase!
        .from('supplier_names')
        .select('id, name')
        .ilike('name', `%${word}%`)
        .limit(25)
      if (data) results.push(...data.map((item: any) => ({...item, matchType: 'PARTIAL', baseScore: 5})))
    }
  }

  // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 5: –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫
  const semanticTerms = getSemanticTerms(tokens)
  for (const term of semanticTerms) {
    const { data } = await supabase!
      .from('supplier_names')
      .select('id, name')
      .ilike('name', `%${term}%`)
      .limit(40)
    if (data) results.push(...data.map((item: any) => ({...item, matchType: 'SEMANTIC', baseScore: 6})))
  }

  // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ ID
  const uniqueResults = results.filter((item, index, arr) =>
    arr.findIndex(i => i.id === item.id) === index
  )

  return uniqueResults
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
function getSemanticTerms(tokens: any): string[] {
  const synonyms: Record<string, string[]> = {
    // –¢–µ–ø–ª–æ–∏–∑–æ–ª—è—Ü–∏—è
    '–ø–µ–Ω–æ–ø–ª—ç–∫—Å': ['–ø–µ–Ω–æ–ø–æ–ª–∏—Å—Ç–∏—Ä–æ–ª', '–ø–æ–ª–∏—Å—Ç–∏—Ä–æ–ª', '–ø–µ–Ω–æ–ø–ª–∞—Å—Ç', '—ç–∫—Å—Ç—Ä—É–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π', 'xps'],
    '—Ç–µ–ø–ª–æ–∏–∑–æ–ª—è—Ü–∏—è': ['—É—Ç–µ–ø–ª–∏—Ç–µ–ª—å', '–∏–∑–æ–ª—è—Ü–∏—è', '—Ç–µ–ø–ª–æ–∏–∑–æ–ª—è—Ç–æ—Ä', '—Ç–µ—Ä–º–æ–∏–∑–æ–ª—è—Ü–∏—è'],
    '–º–∏–Ω–µ—Ä–∞–ª—å–Ω–∞—è': ['–±–∞–∑–∞–ª—å—Ç–æ–≤–∞—è', '–∫–∞–º–µ–Ω–Ω–∞—è', 'rockwool', '—Ä–æ–∫–≤—É–ª'],
    '–ø–ª–∏—Ç–∞': ['–ø–ª–∏—Ç—ã', '–ø–∞–Ω–µ–ª—å', '–ø–∞–Ω–µ–ª–∏', '–ª–∏—Å—Ç', '–ª–∏—Å—Ç—ã'],
    '–≤–∞—Ç–∞': ['—Å—Ç–µ–∫–ª–æ–≤–∞—Ç–∞', '–º–∏–Ω–≤–∞—Ç–∞', '–±–∞–∑–∞–ª—å—Ç–æ–≤–∞—Ç–∞'],
    // –ö—Ä–∞–Ω—ã –∏ –∞—Ä–º–∞—Ç—É—Ä–∞
    '–∫—Ä–∞–Ω': ['–≤–µ–Ω—Ç–∏–ª—å', '–∑–∞—Ç–≤–æ—Ä', '–∫–ª–∞–ø–∞–Ω', '–∑–∞–ø–æ—Ä–Ω—ã–π'],
    '—à–∞—Ä–æ–≤–æ–π': ['—à–∞—Ä', 'ball', '—Å—Ñ–µ—Ä–∏—á–µ—Å–∫–∏–π'],
    '—Ä–µ–∑—å–±–æ–≤–æ–π': ['—Ä–µ–∑—å–±–∞', 'thread', '–º—É—Ñ—Ç–æ–≤—ã–π'],
    // –†–∞–∑–º–µ—Ä—ã
    '100': ['—Å—Ç–æ', '100–º–º', '10—Å–º'],
    '–º–º': ['–º–∏–ª–ª–∏–º–µ—Ç—Ä', '–º–∏–ª–ª–∏–º–µ—Ç—Ä—ã', 'mm'],
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    '–±–µ—Ç–æ–Ω': ['–∂–µ–ª–µ–∑–æ–±–µ—Ç–æ–Ω', '–∂/–±', '–∂–±', '—Ü–µ–º–µ–Ω—Ç–Ω—ã–π'],
    '—Ç—Ä—É–±–∞': ['—Ç—Ä—É–±—ã', '—Ç—Ä—É–±–æ–ø—Ä–æ–≤–æ–¥', '—Ç—Ä—É–±–Ω–∞—è']
  }

  const terms = new Set<string>()

  for (const token of tokens.all) {
    if (synonyms[token]) {
      synonyms[token].forEach(syn => terms.add(syn))
    }
  }

  return Array.from(terms)
}

// –£–º–Ω–æ–µ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ
function intelligentRanking(results: any[], tokens: any, classification: string) {
  return results.map(item => {
    const name = item.name.toLowerCase()
    let score = item.baseScore || 1
    const explanation = []

    // –ë–æ–Ω—É—Å—ã –∑–∞ —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
    if (tokens.article.some((art: string) => name.includes(art.toLowerCase()))) {
      score += 20
      explanation.push('–∞—Ä—Ç–∏–∫—É–ª')
    }

    if (tokens.size.some((size: string) => name.includes(size.toLowerCase()))) {
      score += 10
      explanation.push('—Ä–∞–∑–º–µ—Ä')
    }

    if (tokens.brand.some((brand: string) => name.includes(brand.toLowerCase()))) {
      score += 8
      explanation.push('–±—Ä–µ–Ω–¥')
    }

    if (tokens.material.some((mat: string) => name.includes(mat.toLowerCase()))) {
      score += 5
      explanation.push('–º–∞—Ç–µ—Ä–∏–∞–ª')
    }

    // –ë–æ–Ω—É—Å –∑–∞ –Ω–∞—á–∞–ª–æ —Å—Ç—Ä–æ–∫–∏
    if (tokens.all.some((token: string) => name.startsWith(token.toLowerCase()))) {
      score += 3
      explanation.push('–ø—Ä–µ—Ñ–∏–∫—Å')
    }

    const confidence = Math.min(0.95, Math.max(0.1, score / 40))

    return {
      id: item.id,
      name: item.name,
      confidence,
      matchDetails: {
        materialTokens: tokens.material,
        sizeTokens: tokens.size,
        brandTokens: tokens.brand,
        articleTokens: tokens.article,
        matchType: item.matchType,
        score,
        explanation: explanation.join(', ') || '–æ–±—â–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ'
      }
    }
  }).sort((a, b) => b.confidence - a.confidence)
}

/**
 * –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è AI
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Å–µ —á–µ—Ç—ã—Ä–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø–æ–∏—Å–∫–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
 */
export async function testSearchSupplierNames(
  materialName: string
): Promise<{
  vectorResults: Array<{ id: string; name: string; confidence: number }>
  keywordResults: Array<{ id: string; name: string; matchedKeywords: string[]; relevanceScore: number; matchType: string }>
  editingResults: Array<{ id: string; name: string; confidence: number }>
  adaptiveResults: Array<{ id: string; name: string; confidence: number; matchDetails: any }>
  formattedText: string
}> {
  if (!materialName) {
    return {
      vectorResults: [],
      keywordResults: [],
      editingResults: [],
      adaptiveResults: [],
      formattedText: '–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞'
    }
  }

  try {
    console.log('üîç –ó–∞–ø—É—Å–∫ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –¥–ª—è:', materialName) // LOG: –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫

    // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ —á–µ—Ç—ã—Ä–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø–æ–∏—Å–∫–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    const [vectorResults, keywordResults, editingResults, adaptiveResults] = await Promise.all([
      vectorSearchSupplierNames(materialName, 60),
      keywordSearchSupplierNames(materialName, 60),
      editingModeSearchSupplierNames(materialName),
      adaptiveHybridSearchSupplierNames(materialName)
    ])

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    let formattedText = `üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è: "${materialName}"\n\n`

    // 1. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
    formattedText += `üìä 1. –í–ï–ö–¢–û–†–ù–´–ô –ü–û–ò–°–ö (${vectorResults.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤):\n`
    if (vectorResults.length > 0) {
      vectorResults.forEach((item, index) => {
        formattedText += `   ${index + 1}. ${item.name} (${Math.round(item.confidence * 100)}%)\n`
      })
    } else {
      formattedText += '   –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n'
    }

    formattedText += '\n'

    // 2. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞
    formattedText += `üîç 2. –°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–ò–ô –ü–û–ò–°–ö (${keywordResults.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤):\n`
    if (keywordResults.length > 0) {
      keywordResults.forEach((item, index) => {
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã (–∫–∞–∫ –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–º –ø–æ–∏—Å–∫–µ)
        const confidencePercent = Math.min(100, Math.round((item.relevanceScore / 10) * 100))
        formattedText += `   ${index + 1}. ${item.name} (${confidencePercent}%)\n`
      })
    } else {
      formattedText += '   –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n'
    }

    formattedText += '\n'

    // 3. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –∏–∑ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    formattedText += `‚öôÔ∏è 3. –†–ï–ñ–ò–ú –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø (${editingResults.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤):\n`
    if (editingResults.length > 0) {
      editingResults.forEach((item, index) => {
        formattedText += `   ${index + 1}. ${item.name} (${Math.round(item.confidence * 100)}%)\n`
      })
    } else {
      formattedText += '   –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n'
    }

    formattedText += '\n'

    // 4. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
    formattedText += `ü§ñ 4. –ê–î–ê–ü–¢–ò–í–ù–´–ô –ì–ò–ë–†–ò–î–ù–´–ô –ü–û–ò–°–ö (${adaptiveResults.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤):\n`
    if (adaptiveResults.length > 0) {
      adaptiveResults.forEach((item, index) => {
        const explanation = item.matchDetails?.explanation || '–æ–±—â–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ'
        formattedText += `   ${index + 1}. ${item.name} (${Math.round(item.confidence * 100)}%) - ${explanation}\n`
      })
    } else {
      formattedText += '   –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n'
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const totalUnique = new Set([
      ...vectorResults.map(r => r.id),
      ...keywordResults.map(r => r.id),
      ...editingResults.map(r => r.id),
      ...adaptiveResults.map(r => r.id)
    ]).size

    formattedText += `\nüìà –ò–¢–û–ì–û: ${totalUnique} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –Ω–∞–π–¥–µ–Ω–æ`

    console.log(`üéØ –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω: –≤–µ–∫—Ç–æ—Ä–Ω—ã–π=${vectorResults.length}, —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π=${keywordResults.length}, —Ä–µ–∂–∏–º_—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è=${editingResults.length}, –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π=${adaptiveResults.length}`) // LOG: —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞

    return {
      vectorResults,
      keywordResults,
      editingResults,
      adaptiveResults,
      formattedText
    }

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞:', error) // LOG: –æ—à–∏–±–∫–∞ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
    return {
      vectorResults: [],
      keywordResults: [],
      editingResults: [],
      adaptiveResults: [],
      formattedText: `‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`
    }
  }
}

/**
 * ===============================
 * –§–£–ù–ö–¶–ò–Ø –ü–û–ò–°–ö–ê –ù–û–ú–ï–ù–ö–õ–ê–¢–£–†–´ –ü–û–°–¢–ê–í–©–ò–ö–ê –ü–û –ú–ê–¢–ï–†–ò–ê–õ–£
 * ===============================
 * –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –º–∞—Ç–µ—Ä–∏–∞–ª–∞
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ—Ç –∂–µ –¥–≤–∏–∂–æ–∫, —á—Ç–æ –∏ predictSuppliers, –Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ç–∞–±–ª–∏—Ü–µ–π supplier_names
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç 30 –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
 */
export const predictNomenclatureSuppliers = async (
  request: MLPredictionRequest,
  signal?: AbortSignal
): Promise<MLPredictionResponse> => {
  const startTime = Date.now()
  const config = await getMLConfig()

  console.log('üîç ML NomenclatureSuppliers DEBUG: AbortSignal status:', {
    hasSignal: !!signal,
    aborted: signal?.aborted || false,
    materialName: request.materialName
  })

  if (!config.enabled) {
    return getFallbackNomenclatureSuppliersResults(request, startTime)
  }

  try {
    // –í—ã–±–æ—Ä –º–µ–∂–¥—É AI –∏ ML —Ä–µ–∂–∏–º–∞–º–∏
    const mlModeConfig = await mlModeApi.getCurrentMode()
    const currentMode = mlModeConfig.mode

    console.log('üîÑ ML NomenclatureSuppliers: –†–µ–∂–∏–º', currentMode, '–¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞:', request.materialName)

    // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω Deepseek AI —Ä–µ–∂–∏–º
    if (currentMode === 'deepseek') {
      const deepseekAvailable = await mlModeApi.isDeepseekAvailable()

      if (deepseekAvailable) {
        console.log('ü§ñ ML NomenclatureSuppliers: –ò—Å–ø–æ–ª—å–∑—É–µ–º Deepseek AI –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞')
        return await predictNomenclatureSuppliersWithDeepseek(request, signal)
      } else {
        console.log('ü§ñ ML NomenclatureSuppliers: Deepseek –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π ML')
      }
    }

    // –õ–æ–∫–∞–ª—å–Ω—ã–π ML —Ä–µ–∂–∏–º –¥–ª—è –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
    console.log('üß† ML NomenclatureSuppliers: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π ML –∞–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞')
    const suggestions = await getNomenclatureSupplierSuggestions(request, config)

    return {
      suggestions,
      processingTime: Date.now() - startTime,
      modelUsed: 'local-nomenclature-suppliers'
    }

  } catch (error) {
    if (error instanceof Error && error.name === 'AbortError') {
      console.log('ü§ñ ML NomenclatureSuppliers: –ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω (AbortError)')
    } else {
      console.error('ü§ñ ML NomenclatureSuppliers: –û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:', error)
    }
    throw error
  }
}

/**
 * –õ–æ–∫–∞–ª—å–Ω—ã–π ML –∞–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
 * –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω –∏–∑ getSupplierBasedSuggestions –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å supplier_names
 */
const getNomenclatureSupplierSuggestions = async (
  request: MLPredictionRequest,
  config: MLConfig
): Promise<NomenclatureSuggestion[]> => {
  if (!supabase) throw new Error('Supabase is not configured')

  console.log('üîç ML NomenclatureSuppliers: –ü–æ–∏—Å–∫ –≤ supplier_names –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞:', request.materialName)

  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ supplier_names (–Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞)
  const { data: supplierNames, error } = await supabase
    .from('supplier_names')
    .select('id, name')
    .limit(3000) // –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –ª–∏–º–∏—Ç –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∏—Å–∫–∞

  if (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è supplier_names:', error)
    throw error
  }

  if (!supplierNames || supplierNames.length === 0) {
    console.log('–¢–∞–±–ª–∏—Ü–∞ supplier_names –ø—É—Å—Ç–∞')
    return []
  }

  console.log(`üîç ML NomenclatureSuppliers: –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${supplierNames.length} –∑–∞–ø–∏—Å–µ–π –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞`)

  // –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ–∏—Å–∫–∞ –¥–ª—è –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
  const searchTerm = request.materialName.toLowerCase().trim()
  const supplierSearchWords = searchTerm
    .replace(/[^\w–∞-—è—ë\s]/g, ' ')
    .split(/\s+/)
    .filter(word => word.length >= config.minWordLength)
    .filter(word => !config.ignoredTerms.includes(word))

  console.log('üîç ML NomenclatureSuppliers: –ü–æ–∏—Å–∫–æ–≤—ã–µ —Å–ª–æ–≤–∞:', supplierSearchWords)

  if (supplierSearchWords.length === 0) {
    console.log('–ù–µ—Ç –∑–Ω–∞—á–∏–º—ã—Ö —Å–ª–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞')
    return []
  }

  const effectiveSearchTerm = supplierSearchWords.join(' ')

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
  const matches = supplierNames.filter(supplier => {
    const supplierLower = supplier.name.toLowerCase()
    return supplierSearchWords.some(word => supplierLower.includes(word))
  })

  console.log(`üîç ML NomenclatureSuppliers: –ù–∞–π–¥–µ–Ω–æ ${matches.length} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π`)

  // –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å —Ä–∞—Å—á–µ—Ç–æ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
  const suggestions = matches.map((supplier, index) => {
    const supplierLower = supplier.name.toLowerCase()
    const cleanedSupplierName = cleanTermForMatching(supplierLower, config.ignoredTerms)

    // –ë–∞–∑–æ–≤—ã–π similarity score
    const rawSimilarity = calculateStringSimilarity(effectiveSearchTerm, cleanedSupplierName)
    const similarity = rawSimilarity * config.similarityWeight

    let totalBonus = 0
    const bonusBreakdown = []

    // –ë–æ–Ω—É—Å –∑–∞ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø—Ä–µ—Ñ–∏–∫—Å–∞
    if (cleanedSupplierName.startsWith(effectiveSearchTerm) || supplierLower.startsWith(searchTerm)) {
      totalBonus += config.prefixBonus
      bonusBreakdown.push(`prefix:${Math.round(config.prefixBonus * 100)}%`)
    }

    // –ë–æ–Ω—É—Å –∑–∞ —Ç–æ—á–Ω–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ
    if (cleanedSupplierName.includes(effectiveSearchTerm) || supplierLower.includes(searchTerm)) {
      totalBonus += config.exactMatchBonus
      bonusBreakdown.push(`exact:${Math.round(config.exactMatchBonus * 100)}%`)
    }

    // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    const keywordScore = calculateKeywordScore(supplierSearchWords, cleanedSupplierName, config)
    const keywordBonus = keywordScore * config.keywordBonus
    totalBonus += keywordBonus
    bonusBreakdown.push(`keywords:${Math.round(keywordScore * 100)}%*${Math.round(config.keywordBonus * 100)}%=${Math.round(keywordBonus * 100)}%`)

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏
    let finalScore = similarity + totalBonus
    const beforeAlgorithm = finalScore
    finalScore = applyAlgorithmSettings(finalScore, config.algorithm)

    const finalConfidence = Math.max(0.1, Math.min(0.95, finalScore))

    if (process.env.NODE_ENV === 'development') {
      console.log(`üîç ML NomenclatureSuppliers: "${supplier.name}" (${index + 1}/${matches.length}):`, {
        similarity: Math.round(similarity * 100) + '%',
        bonuses: bonusBreakdown.join(' + '),
        algorithm: config.algorithm,
        confidence: Math.round(finalConfidence * 100) + '%'
      })
    }

    return {
      id: supplier.id,
      name: supplier.name,
      confidence: finalConfidence,
      reasoning: `${Math.round(similarity * 100)}% similarity + [${bonusBreakdown.join(', ')}] via ${config.algorithm} algorithm`
    }
  })

  // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø–æ—Ä–æ–≥—É —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
  const filteredSuggestions = suggestions
    .filter(s => s.confidence >= config.confidenceThreshold)
    .sort((a, b) => b.confidence - a.confidence)
    .slice(0, 30) // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 30 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏

  console.log('üîç ML NomenclatureSuppliers: –§–∏–Ω–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π:', filteredSuggestions.length)

  return filteredSuggestions
}

/**
 * Deepseek AI –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
 */
async function predictNomenclatureSuppliersWithDeepseek(
  request: MLPredictionRequest,
  externalSignal?: AbortSignal
): Promise<MLPredictionResponse> {
  console.log('ü§ñ Deepseek NomenclatureSuppliers: –ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞:', request.materialName)

  try {
    const mlConfig = await getMLConfig()
    const maxSuggestions = Math.min(30, mlConfig?.maxSuggestions || 15) // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 30

    // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è Deepseek
    const deepseekRequest: DeepseekMaterialRequest = {
      material_name: request.materialName,
      context: request.context ? {
        project_type: request.context.projectId ? '—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π' : undefined,
        cost_category: request.context.categoryId,
        cost_type: request.context.typeId,
        location: undefined
      } : undefined,
      preferences: {
        prefer_eco_friendly: false,
        budget_conscious: true,
        quality_priority: true,
        max_suggestions: maxSuggestions
      }
    }

    console.log('ü§ñ Deepseek NomenclatureSuppliers: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å:', deepseekRequest)

    const deepseekResponse = await deepseekApi.analyzeMaterial(deepseekRequest, externalSignal)

    console.log('ü§ñ Deepseek NomenclatureSuppliers: –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç —Å', deepseekResponse.recommendations.length, '—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏')

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–≤–µ—Ç Deepseek –≤ —Ñ–æ—Ä–º–∞—Ç ML
    const suggestions: NomenclatureSuggestion[] = deepseekResponse.recommendations.map((rec, index) => {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º supplier_name –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞)
      const nomenclatureSupplierName = rec.supplier_name || rec.nomenclature_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ fallback —Ç–µ–∫—Å—Ç—ã
      const fallbackTexts = [
        '–¢—Ä–µ–±—É–µ—Ç—Å—è —É—Ç–æ—á–Ω–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞',
        '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
        '–£—Ç–æ—á–Ω—è–µ—Ç—Å—è',
        '–ú–∞—Ç–µ—Ä–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'
      ]

      let finalName = nomenclatureSupplierName
      if (fallbackTexts.some(fallback => nomenclatureSupplierName.includes(fallback))) {
        finalName = request.materialName
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ
      let enhancedReasoning = `AI: ${rec.reasoning}`
      if (rec.price_analysis) enhancedReasoning += `\nüí∞ –¶–µ–Ω–∞: ${rec.price_analysis}`
      if (rec.quality_score) enhancedReasoning += `\n‚≠ê –ö–∞—á–µ—Å—Ç–≤–æ: ${rec.quality_score}/10`

      return {
        id: rec.nomenclature_id || `ai-nomenclature-supplier-${index}`,
        name: finalName,
        confidence: Math.max(0.1, Math.min(0.95, rec.confidence)),
        reasoning: enhancedReasoning,
        tooltip_info: rec.tooltip_info,
        price_analysis: rec.price_analysis,
        quality_score: rec.quality_score,
        supplier_name: rec.supplier_name
      }
    })

    console.log('ü§ñ Deepseek NomenclatureSuppliers: –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:', suggestions.length)

    return {
      suggestions,
      processingTime: deepseekResponse.usage_stats.processing_time_ms,
      modelUsed: 'deepseek-nomenclature-suppliers'
    }

  } catch (error) {
    if (error instanceof Error && error.name === 'AbortError') {
      console.log('ü§ñ Deepseek NomenclatureSuppliers: –ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (AbortError)')
    } else {
      console.error('ü§ñ Deepseek NomenclatureSuppliers: –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞:', error)
    }
    throw error
  }
}

/**
 * Fallback —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
 */
const getFallbackNomenclatureSuppliersResults = async (
  request: MLPredictionRequest,
  startTime: number
): Promise<MLPredictionResponse> => {
  console.log('üîÑ ML NomenclatureSuppliers: –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (ML –æ—Ç–∫–ª—é—á–µ–Ω)')

  return {
    suggestions: [],
    processingTime: Date.now() - startTime,
    modelUsed: 'fallback-nomenclature-suppliers'
  }
}
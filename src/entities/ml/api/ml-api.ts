import { supabase } from '@/lib/supabase'
import type {
  MLPredictionRequest,
  MLPredictionResponse,
  NomenclatureSuggestion,
  MLConfig,
  MLMetrics
} from '../model/types'

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ML
 */
export const getMLConfig = async (): Promise<MLConfig> => {
  // LOG: –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ML –∏–∑ localStorage
  const defaultConfig: MLConfig = {
    enabled: true,
    confidenceThreshold: 0.3,
    maxSuggestions: 5,

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
    algorithm: 'balanced',
    keywordBonus: 0.3,
    exactMatchBonus: 0.2,
    prefixBonus: 0.25,
    similarityWeight: 0.6,
    minWordLength: 3,
    ignoredTerms: ['–º3', '–º2', '–∫–≥', '—à—Ç', '–ø.–º.', '–∫–æ–º–ø–ª.', '–º.–ø.', '—Ç']
  }

  try {
    const saved = localStorage.getItem('ml-config')
    return saved ? { ...defaultConfig, ...JSON.parse(saved) } : defaultConfig
  } catch {
    return defaultConfig
  }
}

/**
 * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ML
 */
export const saveMLConfig = async (config: Partial<MLConfig>): Promise<void> => {
  // LOG: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ML
  const current = await getMLConfig()
  const updated = { ...current, ...config }
  localStorage.setItem('ml-config', JSON.stringify(updated))
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã
 */
export const predictNomenclature = async (
  request: MLPredictionRequest
): Promise<MLPredictionResponse> => {
  const startTime = Date.now()
  const config = await getMLConfig()

  if (!config.enabled) {
    // LOG: ML –æ—Ç–∫–ª—é—á–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
    return getFallbackSuggestions(request, startTime)
  }

  try {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ–π similarity –ø–æ–∏—Å–∫
    const suggestions = await getSimilarityBasedSuggestions(request)

    if (suggestions.length > 0) {
      return {
        suggestions: suggestions.slice(0, config.maxSuggestions),
        processingTime: Date.now() - startTime,
        modelUsed: 'similarity'
      }
    }

    // –ï—Å–ª–∏ similarity –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
    return getFallbackSuggestions(request, startTime)

  } catch (error) {
    console.error('ML prediction error:', error) // LOG: –æ—à–∏–±–∫–∞ ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    return getFallbackSuggestions(request, startTime, '–û—à–∏–±–∫–∞ ML –º–æ–¥–µ–ª–∏')
  }
}

/**
 * –£–õ–£–ß–®–ï–ù–ù–´–ô similarity-based –ø–æ–∏—Å–∫ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏
 */
const getSimilarityBasedSuggestions = async (
  request: MLPredictionRequest
): Promise<NomenclatureSuggestion[]> => {
  if (!supabase) throw new Error('Supabase not initialized')

  const { materialName } = request
  const searchTerm = materialName.toLowerCase().trim()
  const config = await getMLConfig()

  if (searchTerm.length < 2) return []

  console.log('üîç ML: Starting enhanced search for:', searchTerm, 'with algorithm:', config.algorithm) // LOG: –Ω–∞—á–∞–ª–æ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
  console.log('üîç ML: Current config:', JSON.stringify(config, null, 2)) // LOG: —Ç–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ML

  // –†–∞—Å—à–∏—Ä—è–µ–º –ø–æ–∏—Å–∫ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ö–≤–∞—Ç–∞
  console.log('üîç ML: Executing Supabase query with term:', searchTerm) // LOG: –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ Supabase

  // –£–õ–£–ß–®–ï–ù–ù–´–ô –ø–æ–∏—Å–∫: –∏—â–µ–º –∫–∞–∫ –ø–æ –ø–æ–ª–Ω–æ–º—É —Ç–µ—Ä–º–∏–Ω—É, —Ç–∞–∫ –∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
  const searchWords = searchTerm.split(/[\s\-.,()]+/).filter(word => word.length >= 2)
  console.log('üîç ML: Search words extracted:', searchWords) // LOG: –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞

  // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: –¢–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –ø–æ–ª–Ω–æ–º—É —Ç–µ—Ä–º–∏–Ω—É
  let { data: matches, error } = await supabase
    .from('nomenclature')
    .select('id, name')
    .ilike('name', `%${searchTerm}%`)
    .limit(100)

  console.log('üîç ML: Exact search results:', matches?.length || 0) // LOG: —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞

  // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: –ï—Å–ª–∏ —Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –∏—â–µ–º –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
  if ((!matches || matches.length === 0) && searchWords.length > 0) {
    console.log('üîç ML: Trying keyword-based search...') // LOG: –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º

    // –ò—â–µ–º –ø–æ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–∞—Ç–µ—Ä–∏–∞–ª—É (–ø–µ—Ä–≤–æ–µ –∑–Ω–∞—á–∏–º–æ–µ —Å–ª–æ–≤–æ)
    const mainMaterial = searchWords[0]
    const { data: keywordMatches, error: keywordError } = await supabase
      .from('nomenclature')
      .select('id, name')
      .ilike('name', `%${mainMaterial}%`)
      .limit(200) // –ë–æ–ª—å—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏

    console.log(`üîç ML: Keyword search for "${mainMaterial}":`, keywordMatches?.length || 0) // LOG: —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É

    if (keywordMatches && keywordMatches.length > 0) {
      matches = keywordMatches
      error = keywordError
    }
  }

  // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 3: –ï—Å–ª–∏ –≤—Å—ë –µ—â—ë –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –ø—Ä–æ–±—É–µ–º —Å–∏–Ω–æ–Ω–∏–º—ã
  if ((!matches || matches.length === 0)) {
    console.log('üîç ML: Trying synonyms search...') // LOG: –ø–æ–∏—Å–∫ –ø–æ —Å–∏–Ω–æ–Ω–∏–º–∞–º
    const synonymSearchTerms = ['–ø–µ–Ω–æ–ø–ª–∞—Å—Ç', '–ø–æ–ª–∏—Å—Ç–∏—Ä–æ–ª', '–ø–µ–Ω–æ–ø–æ–ª–∏—Å—Ç–∏—Ä–æ–ª']

    for (const synonym of synonymSearchTerms) {
      if (searchTerm.includes(synonym) || searchTerm.includes('–ø—Å–±') || searchTerm.includes('–ø–µ–Ω–æ–ø–æ')) {
        const { data: synonymMatches, error: synonymError } = await supabase
          .from('nomenclature')
          .select('id, name')
          .or(`name.ilike.%–ø–µ–Ω–æ–ø–ª–∞—Å—Ç%,name.ilike.%–ø–µ–Ω–æ–ø–æ–ª–∏—Å—Ç–∏—Ä–æ–ª%,name.ilike.%–ø–æ–ª–∏—Å—Ç–∏—Ä–æ–ª%`)
          .limit(150)

        console.log(`üîç ML: Synonym search results:`, synonymMatches?.length || 0) // LOG: —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ —Å–∏–Ω–æ–Ω–∏–º–∞–º

        if (synonymMatches && synonymMatches.length > 0) {
          matches = synonymMatches
          error = synonymError
          break
        }
      }
    }
  }

  console.log('üîç ML: Supabase query result:', {
    matches: matches?.length || 0,
    error: error?.message || 'none',
    searchTerm,
    sampleData: matches?.slice(0, 3)?.map(m => m.name) || []
  }) // LOG: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ Supabase

  if (error) {
    console.error('üîç ML: Search failed:', error) // LOG: –æ—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞
    return []
  }

  if (!matches || matches.length === 0) {
    console.log('üîç ML: No matches found for:', searchTerm) // LOG: —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ

    // –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    console.log('üîç ML: Diagnostic - trying simple count query...') // LOG: –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å
    const { count, error: countError } = await supabase
      .from('nomenclature')
      .select('*', { count: 'exact', head: true })
      .limit(1)

    console.log('üîç ML: Diagnostic result:', { count, countError: countError?.message }) // LOG: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏

    return []
  }

  console.log('üîç ML: Found matches:', matches.length) // LOG: –Ω–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π

  // –û—á–∏—â–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π —Ç–µ—Ä–º–∏–Ω –æ—Ç –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
  const cleanedSearchTerm = cleanTermForMatching(searchTerm, config.ignoredTerms)
  const cleanedSearchWords = cleanedSearchTerm.split(/\s+/).filter(word => word.length >= config.minWordLength)

  console.log('üîç ML: Original term:', searchTerm) // LOG: –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫–æ–≤—ã–π —Ç–µ—Ä–º–∏–Ω
  console.log('üîç ML: Cleaned search term:', cleanedSearchTerm, 'words:', cleanedSearchWords) // LOG: –æ—á–∏—â–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫–æ–≤—ã–π —Ç–µ—Ä–º–∏–Ω

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ï—Å–ª–∏ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ —Ç–µ—Ä–º–∏–Ω —Å—Ç–∞–ª —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π
  const effectiveSearchTerm = cleanedSearchTerm.length < 3 ? searchTerm : cleanedSearchTerm
  console.log('üîç ML: Effective search term:', effectiveSearchTerm) // LOG: —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫–æ–≤—ã–π —Ç–µ—Ä–º–∏–Ω

  // –í—ã—á–∏—Å–ª—è–µ–º similarity —Å —É—á–µ—Ç–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫
  const suggestions = matches.map((nom, index) => {
    const nomLower = nom.name.toLowerCase()
    const cleanedNomName = cleanTermForMatching(nomLower, config.ignoredTerms)

    // –ë–∞–∑–æ–≤—ã–π similarity score —Å –ø–æ–º–æ—â—å—é Levenshtein
    const rawSimilarity = calculateStringSimilarity(effectiveSearchTerm, cleanedNomName)
    const similarity = rawSimilarity * config.similarityWeight

    let totalBonus = 0
    let bonusBreakdown = []

    // –ë–æ–Ω—É—Å –∑–∞ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø—Ä–µ—Ñ–∏–∫—Å–∞
    if (cleanedNomName.startsWith(effectiveSearchTerm) || nomLower.startsWith(searchTerm)) {
      totalBonus += config.prefixBonus
      bonusBreakdown.push(`prefix:${Math.round(config.prefixBonus * 100)}%`)
    }

    // –ë–æ–Ω—É—Å –∑–∞ —Ç–æ—á–Ω–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ
    if (cleanedNomName.includes(effectiveSearchTerm) || nomLower.includes(searchTerm)) {
      totalBonus += config.exactMatchBonus
      bonusBreakdown.push(`exact:${Math.round(config.exactMatchBonus * 100)}%`)
    }

    // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    const keywordScore = calculateKeywordScore(searchWords, cleanedNomName, config)
    const keywordBonus = keywordScore * config.keywordBonus
    totalBonus += keywordBonus
    bonusBreakdown.push(`keywords:${Math.round(keywordScore * 100)}%*${Math.round(config.keywordBonus * 100)}%=${Math.round(keywordBonus * 100)}%`)

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏
    let finalScore = similarity + totalBonus
    const beforeAlgorithm = finalScore
    finalScore = applyAlgorithmSettings(finalScore, config.algorithm)

    const finalConfidence = Math.max(0.1, Math.min(0.95, finalScore))

    // –î–µ—Ç–∞–ª—å–Ω—ã–π –ª–æ–≥ –¥–ª—è –ø–µ—Ä–≤—ã—Ö 3 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if (index < 3) {
      console.log(`üîç ML: [${index + 1}] "${nom.name}"`) // LOG: –¥–µ—Ç–∞–ª–∏ —Ä–∞—Å—á–µ—Ç–∞ –¥–ª—è —Ç–æ–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      console.log(`   Original: "${searchTerm}" vs "${nomLower}"`) // LOG: –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
      console.log(`   Effective: "${effectiveSearchTerm}" vs "${cleanedNomName}"`) // LOG: —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
      console.log(`   Raw similarity: ${Math.round(rawSimilarity * 100)}%`) // LOG: —Å—ã—Ä–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ
      console.log(`   Weighted similarity: ${Math.round(similarity * 100)}% (weight: ${Math.round(config.similarityWeight * 100)}%)`) // LOG: –≤–∑–≤–µ—à–µ–Ω–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ
      console.log(`   Bonuses: ${bonusBreakdown.join(', ')}`) // LOG: –±–æ–Ω—É—Å—ã
      console.log(`   Before algorithm: ${Math.round(beforeAlgorithm * 100)}%`) // LOG: –¥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞
      console.log(`   After ${config.algorithm}: ${Math.round(finalScore * 100)}%`) // LOG: –ø–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞
      console.log(`   Final confidence: ${Math.round(finalConfidence * 100)}%`) // LOG: –∏—Ç–æ–≥–æ–≤–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
    }

    return {
      id: nom.id,
      name: nom.name,
      confidence: finalConfidence,
      reasoning: `${config.algorithm.toUpperCase()}: ${Math.round(rawSimilarity * 100)}% sim * ${Math.round(config.similarityWeight * 100)}% + ${Math.round(totalBonus * 100)}% bonus ‚Üí ${Math.round(finalConfidence * 100)}%`
    }
  })
  .filter(suggestion => suggestion.confidence >= config.confidenceThreshold)
  .sort((a, b) => b.confidence - a.confidence)
  .slice(0, config.maxSuggestions)

  console.log('üîç ML: Returning suggestions:', suggestions.length, 'avg confidence:',
    suggestions.length > 0 ? Math.round(suggestions.reduce((sum, s) => sum + s.confidence, 0) / suggestions.length * 100) + '%' : 'N/A') // LOG: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è

  return suggestions
}

/**
 * Fallback –ø–æ–∏—Å–∫ (–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫)
 */
const getFallbackSuggestions = async (
  request: MLPredictionRequest,
  startTime: number,
  reason?: string
): Promise<MLPredictionResponse> => {
  if (!supabase) throw new Error('Supabase not initialized')

  const { materialName } = request
  const searchTerm = materialName.toLowerCase().trim()

  // LOG: fallback –ø–æ–∏—Å–∫ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã
  const { data: nomenclatures, error } = await supabase
    .from('nomenclature')
    .select('id, name')
    .ilike('name', `%${searchTerm}%`)
    .limit(5)

  if (error) throw error

  const suggestions: NomenclatureSuggestion[] = (nomenclatures || []).map(nom => ({
    id: nom.id,
    name: nom.name,
    confidence: 0.5, // —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è confidence –¥–ª—è fallback
    reasoning: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫'
  }))

  return {
    suggestions,
    processingTime: Date.now() - startTime,
    modelUsed: 'fallback',
    fallbackReason: reason || 'ML –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
  }
}

/**
 * –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Ä–º–∏–Ω–∞ –æ—Ç –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏ —Å–∏–º–≤–æ–ª–æ–≤
 */
const cleanTermForMatching = (term: string, ignoredTerms: string[]): string => {
  let cleaned = term.toLowerCase()

  // –£–¥–∞–ª—è–µ–º –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ —Ç–µ—Ä–º–∏–Ω—ã
  ignoredTerms.forEach(ignored => {
    const regex = new RegExp(`\\b${ignored.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')}\\b`, 'gi')
    cleaned = cleaned.replace(regex, '')
  })

  // –£–¥–∞–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ NxNxN, NxN
  cleaned = cleaned.replace(/\b\d+(\.\d+)?[x√ó]\d+(\.\d+)?([x√ó]\d+(\.\d+)?)?\b/g, '')

  // –£–¥–∞–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞ —Å –µ–¥–∏–Ω–∏—Ü–∞–º–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è
  cleaned = cleaned.replace(/\b\d+(\.\d+)?\s*(–º–º|—Å–º|–º|–∫–≥|–≥|—Ç|–ª|—à—Ç\.?)\b/g, '')

  // –û—á–∏—â–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
  cleaned = cleaned.replace(/\s+/g, ' ').trim()

  return cleaned
}

/**
 * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ score –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
 */
const calculateKeywordScore = (searchWords: string[], nomName: string, config: any): number => {
  if (searchWords.length === 0) return 0

  let matchedWords = 0
  let partialMatches = 0
  let matchDetails: string[] = []

  searchWords.forEach(searchWord => {
    if (nomName.includes(searchWord)) {
      matchedWords++
      matchDetails.push(`"${searchWord}":exact`)
    } else {
      // –ò—â–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
      const partialMatch = findPartialMatch(searchWord, nomName)
      if (partialMatch) {
        partialMatches++
        matchDetails.push(`"${searchWord}":partial`)
      } else {
        matchDetails.push(`"${searchWord}":none`)
      }
    }
  })

  // –ü–æ–ª–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å–ª–æ–≤–∞ = 1.0, —á–∞—Å—Ç–∏—á–Ω–æ–µ = 0.5
  const totalScore = (matchedWords + partialMatches * 0.5) / searchWords.length

  // LOG: –¥–µ—Ç–∞–ª–∏ –∞–Ω–∞–ª–∏–∑–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ)
  if (searchWords.length > 0 && (matchedWords > 0 || partialMatches > 0)) {
    console.log(`üîç ML: Keyword analysis for "${nomName.substring(0, 40)}...": ${matchDetails.join(', ')} ‚Üí score: ${Math.round(totalScore * 100)}%`) // LOG: –∞–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
  }

  return Math.min(1.0, totalScore)
}

/**
 * –ü–æ–∏—Å–∫ —á–∞—Å—Ç–∏—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
 */
const findPartialMatch = (searchWord: string, nomName: string): boolean => {
  // –†–ê–°–®–ò–†–ï–ù–ù–´–ï —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
  const materialRules: { [key: string]: string[] } = {
    '–ø–µ–Ω–æ–ø–æ–ª–∏—Å—Ç–∏—Ä–æ–ª': ['–ø–µ–Ω–æ–ø–æ–ª–∏—Å—Ç–∏—Ä', '–ø—Å–±', '–ø—Å–±—Å', '–ø—Å', '–ø–µ–Ω–æ–ø–ª–∞—Å—Ç', '–ø–æ–ª–∏—Å—Ç–∏—Ä', '–ø–ø—Å', 'pps'],
    '–ø—Å–±': ['–ø—Å–±—Å', '–ø–µ–Ω–æ–ø–æ–ª–∏—Å—Ç–∏—Ä–æ–ª', '–ø–µ–Ω–æ–ø–ª–∞—Å—Ç', '–ø–æ–ª–∏—Å—Ç–∏—Ä', '–ø–ø—Å'],
    '–ø—Å–±—Å': ['–ø—Å–±', '–ø–µ–Ω–æ–ø–æ–ª–∏—Å—Ç–∏—Ä–æ–ª', '–ø–µ–Ω–æ–ø–ª–∞—Å—Ç', '–ø–æ–ª–∏—Å—Ç–∏—Ä', '–ø–ø—Å'],
    '–ø–µ–Ω–æ–ø–ª–∞—Å—Ç': ['–ø–µ–Ω–æ–ø–æ–ª–∏—Å—Ç–∏—Ä–æ–ª', '–ø—Å–±', '–ø—Å–±—Å', '–ø–æ–ª–∏—Å—Ç–∏—Ä', '–ø–ø—Å', '–ø—Å'],
    '—ç–∫—Å—Ç—Ä—É–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π': ['—ç–∫—Å—Ç—Ä', 'xps', '—ç–ø–ø—Å'],
    '–º–∏–Ω–µ—Ä–∞–ª—å–Ω—ã–π': ['–º–∏–Ω–≤–∞—Ç–∞', '–º–∏–Ω–ø–ª–∏—Ç–∞', '–±–∞–∑–∞–ª—å—Ç', '–∫–∞–º–µ–Ω–Ω–∞—è –≤–∞—Ç–∞'],
    '–∫–µ—Ä–∞–º–∑–∏—Ç–æ–±–µ—Ç–æ–Ω': ['–∫–µ—Ä–∞–º–∑–∏—Ç', '–ª–µ–≥–∫–∏–π –±–µ—Ç–æ–Ω'],
    '–∂–µ–ª–µ–∑–æ–±–µ—Ç–æ–Ω': ['–∂–±', '–∂/–±', '–±–µ—Ç–æ–Ω'],
    '–≥–∏–ø—Å–æ–∫–∞—Ä—Ç–æ–Ω': ['–≥–∫–ª', '–≥–∏–ø—Å'],
    '—É—Ç–µ–ø–ª–∏—Ç–µ–ª—å': ['—Ç–µ–ø–ª–æ–∏–∑–æ–ª—è—Ü–∏—è', '–∏–∑–æ–ª—è—Ü–∏—è'],
  }

  // –ò—â–µ–º –≤ –ø—Ä–∞–≤–∏–ª–∞—Ö
  for (const [material, synonyms] of Object.entries(materialRules)) {
    if (searchWord.includes(material) || material.includes(searchWord)) {
      return synonyms.some(synonym => nomName.includes(synonym))
    }
  }

  // –°–ü–ï–¶–ò–ê–õ–¨–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–∏—Å–ª–æ–≤—ã—Ö –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–π –ü–°–ë
  if (searchWord.includes('–ø—Å–±') || searchWord.includes('–ø—Å–±—Å')) {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ —Ç–µ—Ä–º–∏–Ω–∞
    const searchNumbers = searchWord.match(/\d+/g) || []
    const nomNumbers = nomName.match(/\d+/g) || []

    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —á–∏—Å–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 35 –∏–∑ "–ø—Å–±-—Å-35" –∏ "–ø—Å–±—Å 35")
    const hasMatchingNumbers = searchNumbers.some(searchNum =>
      nomNumbers.some(nomNum => Math.abs(parseInt(searchNum) - parseInt(nomNum)) <= 5)
    )

    if (hasMatchingNumbers) {
      console.log(`üîç ML: Number match found: search="${searchWord}" contains numbers [${searchNumbers.join(', ')}], nom="${nomName}" contains [${nomNumbers.join(', ')}]`) // LOG: —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —á–∏—Å–µ–ª
      return true
    }
  }

  // –ò—â–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ (–º–∏–Ω–∏–º—É–º 4 —Å–∏–º–≤–æ–ª–∞)
  if (searchWord.length >= 4) {
    const substrings = []
    for (let i = 0; i <= searchWord.length - 4; i++) {
      substrings.push(searchWord.substring(i, i + 4))
    }
    return substrings.some(substr => nomName.includes(substr))
  }

  return false
}

/**
 * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –∏—Ç–æ–≥–æ–≤–æ–≥–æ score
 */
const applyAlgorithmSettings = (score: number, algorithm: 'strict' | 'balanced' | 'fuzzy'): number => {
  switch (algorithm) {
    case 'strict':
      // –°—Ç—Ä–æ–≥–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º - —Å–Ω–∏–∂–∞–µ—Ç score –¥–ª—è –Ω–µ—Ç–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
      return score > 0.7 ? score : score * 0.8

    case 'fuzzy':
      // –ú—è–≥–∫–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º - –ø–æ–≤—ã—à–∞–µ—Ç score –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
      return Math.min(0.95, score * 1.2)

    case 'balanced':
    default:
      // –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º - –±–µ–∑ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫
      return score
  }
}

/**
 * –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å—Ö–æ–∂–µ—Å—Ç–∏ —Å—Ç—Ä–æ–∫
 */
const calculateStringSimilarity = (str1: string, str2: string): number => {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º Levenshtein distance
  const matrix: number[][] = []
  const len1 = str1.length
  const len2 = str2.length

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Ç—Ä–∏—Ü—ã
  for (let i = 0; i <= len1; i++) {
    matrix[i] = [i]
  }
  for (let j = 0; j <= len2; j++) {
    matrix[0][j] = j
  }

  // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã
  for (let i = 1; i <= len1; i++) {
    for (let j = 1; j <= len2; j++) {
      const cost = str1[i - 1] === str2[j - 1] ? 0 : 1
      matrix[i][j] = Math.min(
        matrix[i - 1][j] + 1,      // deletion
        matrix[i][j - 1] + 1,      // insertion
        matrix[i - 1][j - 1] + cost // substitution
      )
    }
  }

  const maxLen = Math.max(len1, len2)
  const distance = matrix[len1][len2]
  return maxLen === 0 ? 1 : (maxLen - distance) / maxLen
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ML
 */
export const getMLMetrics = async (): Promise<MLMetrics> => {
  // LOG: –ø–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ ML –∏–∑ localStorage
  const defaultMetrics: MLMetrics = {
    totalPredictions: 0,
    successfulPredictions: 0,
    averageConfidence: 0,
    averageProcessingTime: 0,
    modelUsageStats: {}
  }

  try {
    const saved = localStorage.getItem('ml-metrics')
    return saved ? JSON.parse(saved) : defaultMetrics
  } catch {
    return defaultMetrics
  }
}

/**
 * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ML
 */
export const updateMLMetrics = async (
  response: MLPredictionResponse,
  successful: boolean
): Promise<void> => {
  // LOG: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ ML
  const metrics = await getMLMetrics()

  metrics.totalPredictions++
  if (successful) metrics.successfulPredictions++

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
  const currentAvg = metrics.averageProcessingTime
  const count = metrics.totalPredictions
  metrics.averageProcessingTime = (currentAvg * (count - 1) + response.processingTime) / count

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω—é—é confidence
  if (response.suggestions.length > 0) {
    const avgConfidence = response.suggestions.reduce((sum, s) => sum + s.confidence, 0) / response.suggestions.length
    const successCount = metrics.successfulPredictions
    metrics.averageConfidence = (metrics.averageConfidence * (successCount - 1) + avgConfidence) / successCount
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π
  metrics.modelUsageStats[response.modelUsed] = (metrics.modelUsageStats[response.modelUsed] || 0) + 1

  localStorage.setItem('ml-metrics', JSON.stringify(metrics))
}

/**
 * Server-side –ø–æ–∏—Å–∫ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã –¥–ª—è –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤ –¥–∞–Ω–Ω—ã—Ö
 */
export const searchNomenclature = async (searchTerm: string, limit: number = 50): Promise<Array<{ id: string; name: string }>> => {
  if (!supabase) throw new Error('Supabase not initialized')

  if (!searchTerm || searchTerm.length < 1) return []

  const trimmedTerm = searchTerm.trim()

  console.log('üîç Server search for nomenclature:', trimmedTerm) // LOG: —Å–µ—Ä–≤–µ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã

  try {
    // –£–ü–†–û–©–ï–ù–ò–ï: –ü—Ä–æ—Å—Ç–æ–π ILIKE –ø–æ–∏—Å–∫ –≤–º–µ—Å—Ç–æ —Å–ª–æ–∂–Ω–æ–≥–æ OR —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
    const { data, error } = await supabase
      .from('nomenclature')
      .select('id, name')
      .ilike('name', `%${trimmedTerm}%`)
      .order('name')
      .limit(limit)

    if (error) {
      console.error('üîç Nomenclature search error:', error) // LOG: –æ—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã
      throw error
    }

    console.log('üîç Found nomenclature items:', data?.length || 0) // LOG: –Ω–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã
    return data || []
  } catch (error) {
    console.error('üîç Nomenclature search failed:', error) // LOG: –ø–æ–∏—Å–∫ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã –Ω–µ —É–¥–∞–ª—Å—è
    return []
  }
}
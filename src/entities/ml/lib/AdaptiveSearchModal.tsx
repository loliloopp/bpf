import React, { useState, useCallback } from 'react'
import { Modal, Input, Button, Card, message, Space, Table, Tag, Tooltip, Typography } from 'antd'
import {
  RobotOutlined,
  SearchOutlined,
  ThunderboltFilled,
  InfoCircleOutlined,
  CheckCircleOutlined,
  ExclamationCircleOutlined,
} from '@ant-design/icons'
import { adaptiveHybridSearchSupplierNames, testSearchSupplierNames } from '../api/ml-api'

const { Text } = Typography

interface AdaptiveSearchModalProps {
  open: boolean
  onClose: () => void
}

interface ComparisonResults {
  adaptive: Array<{
    id: string
    name: string
    confidence: number
    matchDetails: {
      materialTokens: string[]
      sizeTokens: string[]
      brandTokens: string[]
      articleTokens: string[]
      matchType: string
      score: number
      explanation: string
    }
  }>
  other: {
    vectorResults: Array<{ id: string; name: string; confidence: number }>
    keywordResults: Array<{
      id: string
      name: string
      matchedKeywords: string[]
      relevanceScore: number
      matchType: string
    }>
    editingResults: Array<{ id: string; name: string; confidence: number }>
  }
}

export const AdaptiveSearchModal: React.FC<AdaptiveSearchModalProps> = ({ open, onClose }) => {
  const [materialName, setMaterialName] = useState('')
  const [isLoading, setIsLoading] = useState(false)
  const [results, setResults] = useState<ComparisonResults | null>(null)
  const [testMaterials] = useState<string[]>([
    '–ø–µ–Ω–æ–ø–ª—ç–∫—Å',
    '–ö—Ä–∞–Ω —à–∞—Ä–æ–≤–æ–π —Ä–µ–∑—å–±–æ–≤–æ–π BVR-R DN32 BVR-R DN32 065B8310R –†–∏–¥–∞–Ω',
  ])

  // –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ —á–µ—Ç–≤–µ—Ä—Ç—ã–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º
  const handleAdaptiveSearch = useCallback(async (material: string) => {
    if (!material.trim()) {
      message.error('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞')
      return
    }

    setIsLoading(true)
    console.log('ü§ñ –ó–∞–ø—É—Å–∫ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –¥–ª—è:', material) // LOG: –∑–∞–ø—É—Å–∫ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞

    try {
      // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ —á–µ—Ç–≤–µ—Ä—Ç—ã–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –æ—Å—Ç–∞–ª—å–Ω—ã–º–∏
      const [adaptiveResults, allResults] = await Promise.all([
        adaptiveHybridSearchSupplierNames(material.trim()),
        testSearchSupplierNames(material.trim()),
      ])

      setResults({
        adaptive: adaptiveResults,
        other: {
          vectorResults: allResults.vectorResults,
          keywordResults: allResults.keywordResults,
          editingResults: allResults.editingResults,
        },
      })

      message.success(`–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–∞–π–¥–µ–ª ${adaptiveResults.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`)
      console.log('üéØ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ') // LOG: –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞:', error) // LOG: –æ—à–∏–±–∫–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
      message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞')
      setResults(null)
    } finally {
      setIsLoading(false)
    }
  }, [])

  // –§—É–Ω–∫—Ü–∏—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –æ–±—Ä–∞–∑—Ü–∞—Ö
  const handleQuickTest = useCallback(
    (testMaterial: string) => {
      setMaterialName(testMaterial)
      handleAdaptiveSearch(testMaterial)
    },
    [handleAdaptiveSearch],
  )

  // –ö–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
  const adaptiveColumns = [
    {
      title: '‚Ññ',
      dataIndex: 'index',
      key: 'index',
      width: 50,
      render: (_: unknown, __: unknown, index: number) => index + 1,
    },
    {
      title: '–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞',
      dataIndex: 'name',
      key: 'name',
      ellipsis: true,
      render: (text: string) => (
        <Tooltip title={text}>
          <Text>{text}</Text>
        </Tooltip>
      ),
    },
    {
      title: '–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å',
      dataIndex: 'confidence',
      key: 'confidence',
      width: 100,
      render: (confidence: number) => {
        const percent = Math.round(confidence * 100)
        const color = percent >= 70 ? '#52c41a' : percent >= 50 ? '#faad14' : '#ff7875'
        return (
          <Tag color={color} style={{ minWidth: '50px', textAlign: 'center' }}>
            {percent}%
          </Tag>
        )
      },
      sorter: (a: { confidence: number }, b: { confidence: number }) => a.confidence - b.confidence,
    },
    {
      title: '–¢–∏–ø —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è',
      dataIndex: ['matchDetails', 'matchType'],
      key: 'matchType',
      width: 120,
      render: (matchType: string) => {
        const colors = {
          EXACT: '#52c41a',
          PARTIAL: '#1890ff',
          SEMANTIC: '#722ed1',
          BRAND: '#fa8c16',
          SIZE: '#eb2f96',
        }
        return <Tag color={colors[matchType as keyof typeof colors] || '#666'}>{matchType}</Tag>
      },
    },
    {
      title: '–û–±—ä—è—Å–Ω–µ–Ω–∏–µ',
      dataIndex: ['matchDetails', 'explanation'],
      key: 'explanation',
      ellipsis: true,
      render: (explanation: string) => (
        <Tooltip title={explanation}>
          <Text type="secondary">{explanation}</Text>
        </Tooltip>
      ),
    },
    {
      title: '–î–µ—Ç–∞–ª–∏',
      key: 'details',
      width: 80,
      render: (
        _: unknown,
        record: {
          matchDetails?: {
            score: number
            materialTokens: string[]
            sizeTokens: string[]
            brandTokens: string[]
            articleTokens: string[]
          }
        },
      ) => (
        <Tooltip
          title={
            <div>
              <div>
                <strong>–°—á–µ—Ç:</strong> {record.matchDetails?.score}
              </div>
              <div>
                <strong>–ú–∞—Ç–µ—Ä–∏–∞–ª:</strong> {record.matchDetails?.materialTokens.join(', ') || '–Ω–µ—Ç'}
              </div>
              <div>
                <strong>–†–∞–∑–º–µ—Ä:</strong> {record.matchDetails?.sizeTokens.join(', ') || '–Ω–µ—Ç'}
              </div>
              <div>
                <strong>–ë—Ä–µ–Ω–¥:</strong> {record.matchDetails?.brandTokens.join(', ') || '–Ω–µ—Ç'}
              </div>
              <div>
                <strong>–ê—Ä—Ç–∏–∫—É–ª:</strong> {record.matchDetails?.articleTokens.join(', ') || '–Ω–µ—Ç'}
              </div>
            </div>
          }
        >
          <Button type="text" icon={<InfoCircleOutlined />} size="small" />
        </Tooltip>
      ),
    },
  ]

  // –§—É–Ω–∫—Ü–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –¥—Ä—É–≥–∏–º–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º–∏
  const renderComparison = () => {
    if (!results?.other) return null

    const { vectorResults, keywordResults, editingResults } = results.other
    const adaptiveIds = new Set(results.adaptive.map((r) => r.id))

    return (
      <Card title="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –¥—Ä—É–≥–∏–º–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º–∏" size="small" style={{ marginTop: 16 }}>
        <Space direction="vertical" style={{ width: '100%' }}>
          <div>
            <Text strong>1. –í–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫: </Text>
            <Tag color={vectorResults.length > 0 ? 'blue' : 'red'}>
              {vectorResults.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            </Tag>
            {vectorResults.some((r) => adaptiveIds.has(r.id)) && (
              <Tag color="green" icon={<CheckCircleOutlined />}>
                –ï—Å—Ç—å –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
              </Tag>
            )}
          </div>

          <div>
            <Text strong>2. –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫: </Text>
            <Tag color={keywordResults.length > 0 ? 'purple' : 'red'}>
              {keywordResults.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            </Tag>
            {keywordResults.some((r) => adaptiveIds.has(r.id)) && (
              <Tag color="green" icon={<CheckCircleOutlined />}>
                –ï—Å—Ç—å –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
              </Tag>
            )}
          </div>

          <div>
            <Text strong>3. –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: </Text>
            <Tag color={editingResults.length > 0 ? 'orange' : 'red'}>
              {editingResults.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            </Tag>
            {editingResults.some((r) => adaptiveIds.has(r.id)) && (
              <Tag color="green" icon={<CheckCircleOutlined />}>
                –ï—Å—Ç—å –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
              </Tag>
            )}
          </div>

          <div style={{ marginTop: 8, padding: 8, backgroundColor: '#f0f8ff', borderRadius: 4 }}>
            <Text strong style={{ color: '#1890ff' }}>
              <ThunderboltFilled /> –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º: {results.adaptive.length} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö
              —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            </Text>
          </div>
        </Space>
      </Card>
    )
  }

  return (
    <Modal
      title={
        <Space>
          <RobotOutlined style={{ color: '#52c41a' }} />
          <span>–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –≥–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫ (4-–π –∞–ª–≥–æ—Ä–∏—Ç–º)</span>
        </Space>
      }
      open={open}
      onCancel={onClose}
      width="95%"
      style={{ top: 20 }}
      styles={{ body: { maxHeight: 'calc(100vh - 200px)', overflowY: 'auto' } }}
      footer={[
        <Button key="close" onClick={onClose}>
          –ó–∞–∫—Ä—ã—Ç—å
        </Button>,
      ]}
    >
      <div style={{ display: 'flex', flexDirection: 'column', gap: '16px' }}>
        {/* –ü–æ–ª–µ –≤–≤–æ–¥–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ */}
        <Card title="–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞" size="small">
          <Space.Compact style={{ width: '100%', marginBottom: 16 }}>
            <Input
              placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è..."
              value={materialName}
              onChange={(e) => setMaterialName(e.target.value)}
              onPressEnter={() => handleAdaptiveSearch(materialName)}
              style={{ flex: 1 }}
            />
            <Button
              type="primary"
              icon={<SearchOutlined />}
              onClick={() => handleAdaptiveSearch(materialName)}
              loading={isLoading}
              disabled={!materialName.trim()}
            >
              –ü–æ–∏—Å–∫
            </Button>
          </Space.Compact>

          {/* –ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã */}
          <div>
            <Text strong style={{ marginRight: 8 }}>
              –ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã:
            </Text>
            {testMaterials.map((testMaterial, index) => (
              <Button
                key={index}
                size="small"
                onClick={() => handleQuickTest(testMaterial)}
                style={{ marginRight: 8, marginBottom: 8 }}
                disabled={isLoading}
              >
                {testMaterial.length > 30 ? `${testMaterial.substring(0, 30)}...` : testMaterial}
              </Button>
            ))}
          </div>
        </Card>

        {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ */}
        {results && (
          <Card
            title={
              <Space>
                <ThunderboltFilled style={{ color: '#52c41a' }} />
                <span>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ ({results.adaptive.length})</span>
              </Space>
            }
            size="small"
          >
            {results.adaptive.length > 0 ? (
              <Table
                dataSource={results.adaptive}
                columns={adaptiveColumns}
                rowKey="id"
                size="small"
                pagination={{
                  pageSize: 10,
                  showSizeChanger: true,
                  showQuickJumper: true,
                  showTotal: (total, range) => `${range[0]}-${range[1]} –∏–∑ ${total} –∑–∞–ø–∏—Å–µ–π`,
                }}
                scroll={{ y: 300 }}
              />
            ) : (
              <div style={{ textAlign: 'center', padding: 20, color: '#999' }}>
                <ExclamationCircleOutlined style={{ fontSize: 24, marginBottom: 8 }} />
                <div>–†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</div>
              </div>
            )}
          </Card>
        )}

        {/* –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –¥—Ä—É–≥–∏–º–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º–∏ */}
        {renderComparison()}

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–ª–≥–æ—Ä–∏—Ç–º–µ */}
        <Card title="–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞" size="small">
          <Space direction="vertical" style={{ width: '100%' }}>
            <div>
              <Text strong>üîç –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è:</Text>
              <Text> SIMPLE / TECHNICAL / MIXED</Text>
            </div>
            <div>
              <Text strong>üî§ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Ç–æ–∫–µ–Ω–∏–∑–∞—Ü–∏—è:</Text>
              <Text> –º–∞—Ç–µ—Ä–∏–∞–ª, —Ä–∞–∑–º–µ—Ä, –±—Ä–µ–Ω–¥, –∞—Ä—Ç–∏–∫—É–ª</Text>
            </div>
            <div>
              <Text strong>üéØ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:</Text>
              <Text> —Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫, –º–∞—Ç–µ—Ä–∏–∞–ª+—Ä–∞–∑–º–µ—Ä, –±—Ä–µ–Ω–¥, —Å–µ–º–∞–Ω—Ç–∏–∫–∞</Text>
            </div>
            <div>
              <Text strong>üìà –£–º–Ω–æ–µ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ:</Text>
              <Text> –±–æ–Ω—É—Å—ã –∑–∞ –∞—Ä—Ç–∏–∫—É–ª (+20), —Ä–∞–∑–º–µ—Ä (+10), –±—Ä–µ–Ω–¥ (+8)</Text>
            </div>
          </Space>
        </Card>
      </div>
    </Modal>
  )
}

export default AdaptiveSearchModal

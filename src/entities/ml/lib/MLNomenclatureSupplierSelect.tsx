import React from 'react'
import { AutoComplete, Badge, Tooltip, Space } from 'antd'
import { RobotOutlined, ThunderboltFilled } from '@ant-design/icons'
import { useMLNomenclatureSuppliers } from './useMLNomenclatureSuppliers'
import type { MLPredictionRequest } from '../model/types'

interface MLNomenclatureSupplierSelectProps {
  value?: string
  onChange?: (value: string, option?: unknown) => void
  onNomenclatureSupplierSelect?: (nomenclatureSupplierId: string, nomenclatureSupplierName: string) => void
  placeholder?: string
  materialName: string
  context?: MLPredictionRequest['context']
  style?: React.CSSProperties
  disabled?: boolean
  allowClear?: boolean
  showSearch?: boolean
  filterOption?: (input: string, option?: unknown) => boolean
  options?: Array<{ value: string; label: string }>
  disableML?: boolean // –û—Ç–∫–ª—é—á–∏—Ç—å ML –ø–æ–∏—Å–∫ (–¥–ª—è –∫–∞—Å–∫–∞–¥–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞)
}

/**
 * ML-enhanced AutoComplete –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª—É
 */
export const MLNomenclatureSupplierSelect: React.FC<MLNomenclatureSupplierSelectProps> = React.memo(({
  value,
  onChange,
  onNomenclatureSupplierSelect,
  placeholder = '–ö–ª–∏–∫–Ω–∏—Ç–µ –¥–ª—è ML-–ø–æ–¥–±–æ—Ä–∞ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞...',
  materialName,
  context,
  style,
  disabled,
  allowClear = true,
  showSearch = true,
  filterOption,
  options = [],
  disableML = false,
  ...props
}) => {
  // const [searchQuery, setSearchQuery] = React.useState('') // –û—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
  const [isOpen, setIsOpen] = React.useState(false)
  const [lastRequestTime, setLastRequestTime] = React.useState(0) // –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤

  const {
    suggestions,
    isLoading,
    config,
    // predict, // –û—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    predictNow,
    // clearSuggestions, // –û—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    confidence,
    processingTime,
    modelUsed
  } = useMLNomenclatureSuppliers({
    enabled: !disabled && !disableML, // –û—Ç–∫–ª—é—á–∞–µ–º ML –µ—Å–ª–∏ disabled –∏–ª–∏ disableML
    autoPredict: false, // –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
    debounceMs: 300,
    minQueryLength: 2
  })

  // LOG: –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ MLNomenclatureSupplierSelect (—Ç–æ–ª—å–∫–æ –≤ development)
  React.useEffect(() => {
    if (import.meta.env.DEV) {
      console.log('üîç MLNomenclatureSupplierSelect Component State:', {
        materialName,
        hasOptions: options.length,
        hasContext: !!context,
        disabled,
        isOpen,
        isLoading,
        suggestionsCount: suggestions.length
      }) // LOG: –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è ML –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
    }
  }, [materialName, options.length, context, disabled, isOpen, isLoading, suggestions.length])

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ)
  const triggerPrediction = React.useCallback((source: string) => {
    const now = Date.now()
    const timeSinceLastRequest = now - lastRequestTime

    // –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –º–µ–Ω–µ–µ 3 —Å–µ–∫—É–Ω–¥ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º (—É–º–µ–Ω—å—à–µ–Ω–æ —Å 5 –¥–æ 3 —Å–µ–∫)
    if (timeSinceLastRequest < 3000) {
      if (import.meta.env.DEV) {
        console.log(`ü§ñ ML NomenclatureSupplier: ${source} prediction ignored (duplicate within ${timeSinceLastRequest}ms)`) // LOG: –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –¥—É–±–ª–∏—Ä—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
      }
      return
    }

    if (disableML) {
      if (import.meta.env.DEV) {
        console.log(`ü§ñ ML NomenclatureSupplier: ${source} prediction skipped (ML disabled for cascade mode)`) // LOG: –ø—Ä–æ–ø—É—Å–∫ ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è - ML –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è –∫–∞—Å–∫–∞–¥–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
      }
    } else if (materialName && materialName.length >= 2 && config?.enabled) {
      if (import.meta.env.DEV) {
        console.log(`ü§ñ ML NomenclatureSupplier: ${source} triggered prediction for:`, materialName) // LOG: ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
      }
      setLastRequestTime(now)
      predictNow(materialName, context)
    } else if (import.meta.env.DEV) {
      if (materialName.length < 2) {
        console.log(`ü§ñ ML NomenclatureSupplier: ${source} prediction skipped (material too short):`, materialName) // LOG: –ø—Ä–æ–ø—É—Å–∫ ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è - –º–∞—Ç–µ—Ä–∏–∞–ª —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π
      } else if (!config?.enabled) {
        console.log(`ü§ñ ML NomenclatureSupplier: ${source} prediction skipped (ML disabled)`) // LOG: –ø—Ä–æ–ø—É—Å–∫ ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è - ML –æ—Ç–∫–ª—é—á–µ–Ω
      }
    }
  }, [materialName, context, predictNow, config?.enabled, lastRequestTime, disableML])

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ–∫—É—Å–∞ - –∑–∞–ø—É—Å–∫–∞–µ–º ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º dropdown
  const handleFocus = React.useCallback(() => {
    setIsOpen(true)
    triggerPrediction('Focus')
  }, [triggerPrediction])

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ - –æ—Ç–∫—Ä—ã–≤–∞–µ–º dropdown –±–µ–∑ ML –∑–∞–ø—Ä–æ—Å–∞ (–æ–Ω –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω –ø—Ä–∏ focus)
  const handleClick = React.useCallback(() => {
    if (!isOpen) {
      setIsOpen(true)
    }
  }, [isOpen])

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ (–æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏)
  // const handleSearch = React.useCallback((searchValue: string) => {
  //   if (import.meta.env.DEV) {
  //     console.log('üîç NomenclatureSupplier search query changed:', searchValue) // LOG: –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
  //   }
  //   setSearchQuery(searchValue)
  // }, [])

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è dropdown (–æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏)
  // const handleDropdownVisibleChange = React.useCallback((open: boolean) => {
  //   setIsOpen(open)
  //   if (!open) {
  //     setSearchQuery('')
  //   }
  // }, [])

  // –°—Ç–∞–±–∏–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤—ã –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∏–∑–±—ã—Ç–æ—á–Ω—ã—Ö –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–æ–≤ (—É–ª—É—á—à–µ–Ω–æ)
  const stableSuggestions = React.useMemo(() => {
    if (suggestions.length === 0) return []
    return suggestions.slice() // shallow copy –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
  }, [suggestions.length, JSON.stringify(suggestions.map(s => ({ id: s.id, confidence: s.confidence })))])

  const stableOptions = React.useMemo(() => {
    if (options.length === 0) return []
    return options.slice() // shallow copy –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
  }, [options.length, JSON.stringify(options.map(o => o.value))])

  // –û–±—ä–µ–¥–∏–Ω—è–µ–º ML –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å –æ–±—ã—á–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏ (—Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ)
  const allOptions = React.useMemo(() => {
    // –†–∞–Ω–Ω–∏–π –≤—ã—Ö–æ–¥ –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
    if (stableSuggestions.length === 0 && stableOptions.length === 0) {
      return []
    }

    // LOG: –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –æ–ø—Ü–∏–π –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ (—Ç–æ–ª—å–∫–æ –≤ development –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö)
    if (import.meta.env.DEV) {
      console.log('üîÑ Rebuilding nomenclature supplier options:', {
        mlSuggestions: stableSuggestions.length,
        staticOptions: stableOptions.length
      }) // LOG: –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –æ–ø—Ü–∏–π –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
    }

    const mlOptions = stableSuggestions.map(suggestion => ({
      value: suggestion.name, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–∫ value –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
      label: (
        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
          <span>{suggestion.name}</span>
          <Space size="small">
            <Badge
              count={`${Math.round(suggestion.confidence * 100)}%`}
              style={{
                backgroundColor: suggestion.confidence > 0.7 ? '#52c41a' :
                                suggestion.confidence > 0.5 ? '#faad14' : '#ff7875',
                fontSize: '10px',
                height: '16px',
                lineHeight: '16px',
                borderRadius: '8px'
              }}
            />
            <RobotOutlined style={{ color: '#1890ff', fontSize: '12px' }} />
          </Space>
        </div>
      ),
      confidence: suggestion.confidence,
      reasoning: suggestion.reasoning,
      isMLSuggestion: true,
      nomenclatureSupplierId: suggestion.id,
      nomenclatureSupplierName: suggestion.name
    }))

    // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø—Ü–∏–∏ (–∏–∑ props)
    const staticOptions = stableOptions
      .filter(opt => !mlOptions.some(mlOpt => mlOpt.value === opt.value))
      .map(opt => ({
        ...opt,
        isMLSuggestion: false
      }))

    // –ü–æ—Ä—è–¥–æ–∫: ML –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è -> –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø—Ü–∏–∏
    const result = [...mlOptions, ...staticOptions]

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—Ü–∏–π –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    return result.slice(0, 50) // –º–∞–∫—Å–∏–º—É–º 50 –æ–ø—Ü–∏–π –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  }, [stableSuggestions, stableOptions])

  const handleSelect = React.useCallback((selectedValue: string, option: unknown) => {
    if (import.meta.env.DEV) {
      const debugOption = option as {
        isMLSuggestion?: boolean;
        confidence?: number;
        nomenclatureSupplierName?: string;
      }
      console.log('ü§ñ ML NomenclatureSupplier: Option selected:', { // LOG: –≤—ã–±–æ—Ä –æ–ø—Ü–∏–∏ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –≤ ML AutoComplete
        selectedValue,
        isMLSuggestion: debugOption.isMLSuggestion,
        confidence: debugOption.confidence,
        nomenclatureSupplierName: debugOption.nomenclatureSupplierName
      })
    }

    // –î–ª—è ML –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –≤—ã–∑—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π callback
    if ((option as { isMLSuggestion?: boolean })?.isMLSuggestion && onNomenclatureSupplierSelect) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º setTimeout –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ UI
      setTimeout(() => {
        const mlOption = option as {
          nomenclatureSupplierId: string;
          nomenclatureSupplierName: string;
        }
        onNomenclatureSupplierSelect(mlOption.nomenclatureSupplierId, mlOption.nomenclatureSupplierName)
      }, 0)
    }

    // –ü–µ—Ä–µ–¥–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –≤ onChange (–¥–ª—è ML –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π selectedValue —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ)
    onChange?.(selectedValue, option)
  }, [onChange, onNomenclatureSupplierSelect])

  return (
    <div style={{
      position: 'relative',
      width: '100%',
      minHeight: '32px'
    }}>
      <AutoComplete
        value={value}
        onChange={onChange}
        onSelect={handleSelect}
        onFocus={handleFocus}
        onClick={handleClick}
        placeholder={placeholder}
        style={{
          width: '100%',
          ...style
        }}
        disabled={disabled}
        allowClear={allowClear}
        showSearch={showSearch}
        filterOption={filterOption}
        // onSearch={handleSearch} // –û—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        options={allOptions}
        dropdownStyle={{
          zIndex: 9999,
        }}
        getPopupContainer={(triggerNode) => {
          const scrollContainer = triggerNode.closest('.ant-table-body') ||
                                 triggerNode.closest('.ant-table-container') ||
                                 triggerNode.closest('[data-testid="table-scroll-container"]') ||
                                 document.body
          return scrollContainer as HTMLElement
        }}
        popupMatchSelectWidth={false}
        loading={isLoading}
        notFoundContent={
          isLoading ? (
            <div style={{
              padding: '12px 16px',
              textAlign: 'center',
              color: '#666',
              minHeight: '44px',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center'
            }}>
              <RobotOutlined spin style={{ marginRight: '8px' }} />
              ML –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤...
            </div>
          ) : materialName.length >= 2 ? (
            suggestions.length === 0 && config?.enabled ? (
              <div style={{
                padding: '12px 16px',
                textAlign: 'center',
                color: '#666',
                minHeight: '44px',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center'
              }}>
                <RobotOutlined style={{ marginRight: '8px', color: '#1890ff' }} />
                –ö–ª–∏–∫–Ω–∏—Ç–µ –¥–ª—è ML-–∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –¥–ª—è "{materialName.substring(0, 20)}{materialName.length > 20 ? '...' : ''}"
              </div>
            ) : (
              <div style={{
                padding: '12px 16px',
                textAlign: 'center',
                color: '#666',
                minHeight: '44px',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center'
              }}>
                –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–π –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
              </div>
            )
          ) : (
            <div style={{
              padding: '12px 16px',
              textAlign: 'center',
              color: '#666',
              minHeight: '44px',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center'
            }}>
              {materialName.length < 2 ? (
                '–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª (–º–∏–Ω. 2 —Å–∏–º–≤–æ–ª–∞)'
              ) : (
                '–ö–ª–∏–∫–Ω–∏—Ç–µ –¥–ª—è ML-–ø–æ–¥–±–æ—Ä–∞ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤'
              )}
            </div>
          )
        }
        {...props}
      />

      {/* ML —Å—Ç–∞—Ç—É—Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –¥–ª—è –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ */}
      {!disableML && config?.enabled && materialName.length >= 2 && (
        <div style={{
          position: 'absolute',
          top: '-26px',
          right: '0px',
          fontSize: '11px',
          color: '#666',
          display: 'flex',
          alignItems: 'center',
          gap: '4px',
          height: '20px',
          minWidth: '160px',
          justifyContent: 'flex-end',
          pointerEvents: 'none',
          zIndex: 10
        }}>
          {isLoading ? (
            <div style={{ display: 'flex', alignItems: 'center', gap: '4px' }}>
              <RobotOutlined spin style={{ color: '#1890ff' }} />
              <span>ML –∞–Ω–∞–ª–∏–∑ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤...</span>
            </div>
          ) : suggestions.length > 0 ? (
            <Tooltip title={`ML –º–æ–¥–µ–ª—å: ${modelUsed}, –í—Ä–µ–º—è: ${processingTime}–º—Å, –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${Math.round(confidence * 100)}%`}>
              <div style={{ display: 'flex', alignItems: 'center', gap: '4px', pointerEvents: 'auto' }}>
                <ThunderboltFilled style={{ color: '#52c41a' }} />
                <span style={{ color: '#52c41a' }}>
                  {suggestions.length} ML –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä
                </span>
              </div>
            </Tooltip>
          ) : (
            <Tooltip title="–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –ø–æ–ª–µ –¥–ª—è ML-–∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤">
              <div style={{ display: 'flex', alignItems: 'center', gap: '4px', pointerEvents: 'auto' }}>
                <RobotOutlined style={{ color: '#1890ff' }} />
                <span style={{ color: '#1890ff' }}>
                  –ì–æ—Ç–æ–≤ –∫ ML-–∞–Ω–∞–ª–∏–∑—É
                </span>
              </div>
            </Tooltip>
          )}
        </div>
      )}

      {/* –î–µ–±–∞–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (—Ç–æ–ª—å–∫–æ –≤ development) */}
      {!disableML && import.meta.env.DEV && suggestions.length > 0 && (
        <div style={{
          marginTop: '4px',
          fontSize: '10px',
          color: '#999',
          fontFamily: 'monospace'
        }}>
          ü§ñ ML NomenclatureSuppliers: {suggestions.length} suggestions, {processingTime}ms, model: {modelUsed}
        </div>
      )}
    </div>
  )
})

// –î–æ–±–∞–≤–ª—è–µ–º displayName –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
MLNomenclatureSupplierSelect.displayName = 'MLNomenclatureSupplierSelect'

export default MLNomenclatureSupplierSelect
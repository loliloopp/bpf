import { useState, useCallback, useRef } from 'react'
import { useQuery } from '@tanstack/react-query'
import { predictSuppliers, getMLConfig, getNomenclatureBySupplier } from '../api/ml-api'
import type { MLPredictionRequest, NomenclatureSuggestion, MLConfig } from '../model/types'

interface UseMLSuppliersOptions {
  enabled?: boolean
  debounceMs?: number
  minQueryLength?: number
  autoPredict?: boolean
}

interface UseMLSuppliersResult {
  suggestions: NomenclatureSuggestion[]
  isLoading: boolean
  error: Error | null
  config: MLConfig | undefined
  predict: (materialName: string, context?: MLPredictionRequest['context']) => void
  predictNow: (materialName: string, context?: MLPredictionRequest['context']) => void
  clearSuggestions: () => void
  confidence: number
  processingTime: number
  modelUsed: string
  getNomenclatureForSupplier: (supplierId: string) => Promise<any[]>
}

/**
 * –•—É–∫ –¥–ª—è ML-–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –º–∞—Ç–µ—Ä–∏–∞–ª–∞
 */
export const useMLSuppliers = (options: UseMLSuppliersOptions = {}): UseMLSuppliersResult => {
  const {
    enabled = true,
    debounceMs = 300,
    minQueryLength = 2,
    autoPredict = false
  } = options

  const [currentRequest, setCurrentRequest] = useState<MLPredictionRequest | null>(null)
  const [lastResponse, setLastResponse] = useState<{
    confidence: number
    processingTime: number
    modelUsed: string
  }>({
    confidence: 0,
    processingTime: 0,
    modelUsed: 'none'
  })

  const debounceRef = useRef<NodeJS.Timeout>()

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é ML
  const { data: config } = useQuery({
    queryKey: ['ml-config'],
    queryFn: getMLConfig,
    staleTime: 10 * 1000,
    gcTime: 30 * 1000,
  })

  // –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
  const {
    data: response,
    isLoading,
    error,
    refetch
  } = useQuery({
    queryKey: ['ml-supplier-predictions', currentRequest, config],
    queryFn: async () => {
      if (!currentRequest) return null

      console.log('ü§ñ ML: Starting supplier prediction for:', currentRequest.materialName) // LOG: –Ω–∞—á–∞–ª–æ ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤

      const result = await predictSuppliers(currentRequest)

      console.log('ü§ñ ML: Supplier prediction completed:', { // LOG: –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
        suggestionsCount: result.suggestions.length,
        processingTime: result.processingTime,
        modelUsed: result.modelUsed
      })

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –æ—Ç–≤–µ—Ç–µ
      setLastResponse({
        confidence: result.suggestions.length > 0
          ? result.suggestions.reduce((sum, s) => sum + s.confidence, 0) / result.suggestions.length
          : 0,
        processingTime: result.processingTime,
        modelUsed: result.modelUsed
      })

      return result
    },
    enabled: enabled && config?.enabled && !!currentRequest,
    staleTime: 30 * 1000,
    gcTime: 5 * 60 * 1000,
  })

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –±–µ–∑ debounce
  const predictNow = useCallback((materialName: string, context?: MLPredictionRequest['context']) => {
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
    if (debounceRef.current) {
      clearTimeout(debounceRef.current)
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É –∑–∞–ø—Ä–æ—Å–∞
    if (materialName.length < minQueryLength) {
      setCurrentRequest(null)
      return
    }

    const request: MLPredictionRequest = {
      materialName: materialName.trim(),
      context
    }

    console.log('ü§ñ ML: Executing immediate supplier prediction request:', request) // LOG: –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ ML –∑–∞–ø—Ä–æ—Å–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤

    setCurrentRequest(request)
  }, [minQueryLength])

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Å debounce (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ –∞–≤—Ç–æ–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ)
  const predict = useCallback((materialName: string, context?: MLPredictionRequest['context']) => {
    if (!autoPredict) {
      console.log('ü§ñ ML: Auto-predict disabled for suppliers, skipping prediction') // LOG: –∞–≤—Ç–æ–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–æ
      return
    }

    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
    if (debounceRef.current) {
      clearTimeout(debounceRef.current)
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É –∑–∞–ø—Ä–æ—Å–∞
    if (materialName.length < minQueryLength) {
      setCurrentRequest(null)
      return
    }

    console.log('ü§ñ ML: Scheduling supplier prediction with debounce:', materialName) // LOG: –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä
    debounceRef.current = setTimeout(() => {
      const request: MLPredictionRequest = {
        materialName: materialName.trim(),
        context
      }

      console.log('ü§ñ ML: Executing supplier prediction request:', request) // LOG: –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ ML –∑–∞–ø—Ä–æ—Å–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤

      setCurrentRequest(request)
    }, debounceMs)
  }, [debounceMs, minQueryLength, autoPredict])

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
  const clearSuggestions = useCallback(() => {
    console.log('ü§ñ ML: Clearing supplier suggestions') // LOG: –æ—á–∏—Å—Ç–∫–∞ ML –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤

    if (debounceRef.current) {
      clearTimeout(debounceRef.current)
    }
    setCurrentRequest(null)
    setLastResponse({
      confidence: 0,
      processingTime: 0,
      modelUsed: 'none'
    })
  }, [])

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã –ø–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É
  const getNomenclatureForSupplier = useCallback(async (supplierId: string) => {
    console.log('ü§ñ ML: Getting nomenclature for supplier:', supplierId) // LOG: –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã –¥–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
    return await getNomenclatureBySupplier(supplierId)
  }, [])

  // –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –ø–æ—Ä–æ–≥—É confidence
  const filteredSuggestions = response?.suggestions.filter(
    suggestion => suggestion.confidence >= (config?.confidenceThreshold || 0.3)
  ) || []

  return {
    suggestions: filteredSuggestions,
    isLoading,
    error: error as Error | null,
    config,
    predict,
    predictNow,
    clearSuggestions,
    confidence: lastResponse.confidence,
    processingTime: lastResponse.processingTime,
    modelUsed: lastResponse.modelUsed,
    getNomenclatureForSupplier
  }
}
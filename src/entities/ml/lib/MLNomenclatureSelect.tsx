import React from 'react'
import { AutoComplete, Badge, Tooltip, Space } from 'antd'
import { RobotOutlined, ThunderboltFilled } from '@ant-design/icons'
import { useQuery } from '@tanstack/react-query'
import { useMLNomenclature } from './useMLNomenclature'
import { searchNomenclature } from '../api/ml-api'
import type { MLPredictionRequest } from '../model/types'

interface MLNomenclatureSelectProps {
  value?: string
  onChange?: (value: string, option?: any) => void
  placeholder?: string
  materialName: string
  context?: MLPredictionRequest['context']
  style?: React.CSSProperties
  disabled?: boolean
  allowClear?: boolean
  showSearch?: boolean
  filterOption?: (input: string, option?: any) => boolean
  options?: Array<{ value: string; label: string }>
  onMLSuggestionSelect?: (suggestion: any) => void
}

/**
 * ML-enhanced AutoComplete –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã
 */
export const MLNomenclatureSelect: React.FC<MLNomenclatureSelectProps> = ({
  value,
  onChange,
  placeholder = '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—É (ML-–ø–æ–¥–±–æ—Ä –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª—É)...',
  materialName,
  context,
  style,
  disabled,
  allowClear = true,
  showSearch = true,
  filterOption,
  options = [],
  onMLSuggestionSelect,
  ...props
}) => {
  const [searchQuery, setSearchQuery] = React.useState('')
  const [isOpen, setIsOpen] = React.useState(false)

  const {
    suggestions,
    isLoading,
    config,
    predict,
    predictNow,
    clearSuggestions,
    confidence,
    processingTime,
    modelUsed,
  } = useMLNomenclature({
    enabled: !disabled,
    autoPredict: false, // –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
    debounceMs: 300,
    minQueryLength: 2,
  })

  // Server-side –ø–æ–∏—Å–∫ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã –¥–ª—è –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
  const { data: searchResults = [], isLoading: isSearching } = useQuery({
    queryKey: ['nomenclature-search', searchQuery],
    queryFn: () => searchNomenclature(searchQuery, 100),
    enabled: isOpen && searchQuery.length >= 1,
    staleTime: 30 * 1000, // 30 —Å–µ–∫—É–Ω–¥ –∫—ç—à–∞
    gcTime: 5 * 60 * 1000, // 5 –º–∏–Ω—É—Ç –≤ –ø–∞–º—è—Ç–∏
  })

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ–∫—É—Å–∞ - –∑–∞–ø—É—Å–∫–∞–µ–º ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º dropdown
  const handleFocus = React.useCallback(() => {
    setIsOpen(true)
    if (materialName && materialName.length >= 2 && config?.enabled) {
      console.log('ü§ñ ML AutoComplete: Focus triggered prediction for:', materialName) // LOG: ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø–æ —Ñ–æ–∫—É—Å—É
      predictNow(materialName, context)
    }
  }, [materialName, context, predictNow, config?.enabled])

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ - —Ç–∞–∫–∂–µ –∑–∞–ø—É—Å–∫–∞–µ–º ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
  const handleClick = React.useCallback(() => {
    setIsOpen(true)
    if (materialName && materialName.length >= 2 && config?.enabled) {
      console.log('ü§ñ ML AutoComplete: Click triggered prediction for:', materialName) // LOG: ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø–æ –∫–ª–∏–∫—É
      predictNow(materialName, context)
    }
  }, [materialName, context, predictNow, config?.enabled])

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
  const handleSearch = React.useCallback((searchValue: string) => {
    console.log('üîç Search query changed:', searchValue) // LOG: –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    setSearchQuery(searchValue)
  }, [])

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è dropdown
  const handleDropdownVisibleChange = React.useCallback((open: boolean) => {
    setIsOpen(open)
    if (!open) {
      setSearchQuery('')
    }
  }, [])

  // –°—Ç–∞–±–∏–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤—ã –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∏–∑–±—ã—Ç–æ—á–Ω—ã—Ö –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–æ–≤
  const stableSuggestions = React.useMemo(() => suggestions, [JSON.stringify(suggestions)])
  const stableSearchResults = React.useMemo(() => searchResults, [JSON.stringify(searchResults)])
  const stableOptions = React.useMemo(() => options, [JSON.stringify(options)])

  // –û–±—ä–µ–¥–∏–Ω—è–µ–º ML –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å server-side –ø–æ–∏—Å–∫–æ–º –∏ –æ–±—ã—á–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏
  const allOptions = React.useMemo(() => {
    // LOG: –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –æ–ø—Ü–∏–π (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö)
    if (process.env.NODE_ENV === 'development') {
      console.log('üîÑ Rebuilding options:', {
        mlSuggestions: stableSuggestions.length,
        searchResults: stableSearchResults.length,
        staticOptions: stableOptions.length,
        searchQuery,
      })
    }

    const mlOptions = stableSuggestions.map((suggestion) => ({
      value: suggestion.id,
      label: (
        <Tooltip
          title={
            <div style={{ maxWidth: '300px' }}>
              <div>
                <strong>üìã {suggestion.tooltip_info || suggestion.name}</strong>
              </div>
              {suggestion.supplier_name && <div>üè¢ –ü–æ—Å—Ç–∞–≤—â–∏–∫: {suggestion.supplier_name}</div>}
              {suggestion.quality_score && <div>‚≠ê –ö–∞—á–µ—Å—Ç–≤–æ: {suggestion.quality_score}/10</div>}
              {suggestion.price_analysis && <div>üí∞ –¶–µ–Ω–∞: {suggestion.price_analysis}</div>}
              <div style={{ marginTop: '8px', fontSize: '12px', opacity: 0.8 }}>
                {suggestion.reasoning}
              </div>
            </div>
          }
          placement="left"
        >
          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
            <div style={{ flex: 1, overflow: 'hidden' }}>
              <div style={{ fontWeight: 'bold' }}>{suggestion.name}</div>
              {suggestion.supplier_name && (
                <div
                  style={{
                    fontSize: '11px',
                    color: '#666',
                    overflow: 'hidden',
                    textOverflow: 'ellipsis',
                  }}
                >
                  üè¢ {suggestion.supplier_name}
                </div>
              )}
            </div>
            <Space size="small">
              {suggestion.quality_score && (
                <Badge
                  count={`‚≠ê${suggestion.quality_score}`}
                  style={{
                    backgroundColor:
                      suggestion.quality_score >= 8
                        ? '#52c41a'
                        : suggestion.quality_score >= 6
                          ? '#faad14'
                          : '#ff7875',
                    fontSize: '9px',
                    height: '16px',
                    lineHeight: '16px',
                    borderRadius: '8px',
                  }}
                />
              )}
              <Badge
                count={`${Math.round(suggestion.confidence * 100)}%`}
                style={{
                  backgroundColor:
                    suggestion.confidence > 0.7
                      ? '#52c41a'
                      : suggestion.confidence > 0.5
                        ? '#faad14'
                        : '#ff7875',
                  fontSize: '10px',
                  height: '16px',
                  lineHeight: '16px',
                  borderRadius: '8px',
                }}
              />
              <RobotOutlined style={{ color: '#1890ff', fontSize: '12px' }} />
            </Space>
          </div>
        </Tooltip>
      ),
      confidence: suggestion.confidence,
      reasoning: suggestion.reasoning,
      // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ü–û–õ–Ø –û–¢ DEEPSEEK
      tooltip_info: suggestion.tooltip_info,
      price_analysis: suggestion.price_analysis,
      quality_score: suggestion.quality_score,
      supplier_name: suggestion.supplier_name,
      isMLSuggestion: true,
    }))

    // Server-side —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
    const serverOptions = stableSearchResults
      .filter((item) => !mlOptions.some((mlOpt) => mlOpt.value === item.id))
      .map((item) => ({
        value: item.id,
        label: item.name,
        isMLSuggestion: false,
        isServerResult: true,
      }))

    // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø—Ü–∏–∏ (–∏–∑ props)
    const staticOptions = stableOptions
      .filter(
        (opt) =>
          !mlOptions.some((mlOpt) => mlOpt.value === opt.value) &&
          !serverOptions.some((serverOpt) => serverOpt.value === opt.value),
      )
      .map((opt) => ({
        ...opt,
        isMLSuggestion: false,
        isServerResult: false,
      }))

    // –ü–æ—Ä—è–¥–æ–∫: ML –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è -> Server-side —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã -> –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø—Ü–∏–∏
    return [...mlOptions, ...serverOptions, ...staticOptions]
  }, [stableSuggestions, stableSearchResults, stableOptions, searchQuery])

  const handleSelect = (selectedValue: string, option: any) => {
    console.log('ü§ñ ML AutoComplete: Option selected:', {
      // LOG: –≤—ã–±–æ—Ä –æ–ø—Ü–∏–∏ –≤ ML AutoComplete
      selectedValue,
      isMLSuggestion: option.isMLSuggestion,
      confidence: option.confidence,
    })

    if (option.isMLSuggestion && onMLSuggestionSelect) {
      onMLSuggestionSelect({
        id: selectedValue,
        name: option.children?.props?.children?.[0] || option.label,
        confidence: option.confidence,
        reasoning: option.reasoning,
        // –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û–¢ DEEPSEEK
        tooltip_info: option.tooltip_info,
        price_analysis: option.price_analysis,
        quality_score: option.quality_score,
        supplier_name: option.supplier_name,
      })
    }

    onChange?.(selectedValue, option)
  }

  return (
    <div
      style={{
        position: 'relative',
        width: '100%', // –§–∏–∫—Å–∏—Ä—É–µ–º —à–∏—Ä–∏–Ω—É
        minHeight: '32px', // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–∫–∞—á–∫–æ–≤
      }}
    >
      <AutoComplete
        value={value}
        onChange={onChange}
        onSelect={handleSelect}
        onFocus={handleFocus}
        onClick={handleClick}
        placeholder={placeholder}
        style={{
          width: '100%', // –§–∏–∫—Å–∏—Ä—É–µ–º —à–∏—Ä–∏–Ω—É AutoComplete
          ...style,
        }}
        disabled={disabled}
        allowClear={allowClear}
        showSearch={showSearch}
        filterOption={filterOption}
        onSearch={handleSearch}
        options={allOptions}
        dropdownStyle={{
          zIndex: 9999, // –í—ã—Å–æ–∫–∏–π z-index –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–π
        }}
        getPopupContainer={(triggerNode) => {
          // –ü–æ–ø–∞–ø –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –≤ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–∫–∞—á–∫–æ–≤
          const scrollContainer =
            triggerNode.closest('.ant-table-body') ||
            triggerNode.closest('.ant-table-container') ||
            triggerNode.closest('[data-testid="table-scroll-container"]') ||
            document.body
          return scrollContainer as HTMLElement
        }}
        popupMatchSelectWidth={false} // –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —à–∏—Ä–∏–Ω—ã
        loading={isLoading || isSearching}
        notFoundContent={
          isLoading || isSearching ? (
            <div
              style={{
                padding: '12px 16px',
                textAlign: 'center',
                color: '#666',
                minHeight: '44px', // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
              }}
            >
              <RobotOutlined spin style={{ marginRight: '8px' }} />
              ML –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª...
            </div>
          ) : materialName.length >= 2 ? (
            suggestions.length === 0 && config?.enabled ? (
              <div
                style={{
                  padding: '12px 16px',
                  textAlign: 'center',
                  color: '#666',
                  minHeight: '44px',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                }}
              >
                <RobotOutlined style={{ marginRight: '8px', color: '#1890ff' }} />
                –ö–ª–∏–∫–Ω–∏—Ç–µ –¥–ª—è ML-–∞–Ω–∞–ª–∏–∑–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ "{materialName.substring(0, 20)}
                {materialName.length > 20 ? '...' : ''}"
              </div>
            ) : (
              <div
                style={{
                  padding: '12px 16px',
                  textAlign: 'center',
                  color: '#666',
                  minHeight: '44px',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                }}
              >
                –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
              </div>
            )
          ) : (
            <div
              style={{
                padding: '12px 16px',
                textAlign: 'center',
                color: '#666',
                minHeight: '44px',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
              }}
            >
              {materialName.length < 2
                ? '–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª (–º–∏–Ω. 2 —Å–∏–º–≤–æ–ª–∞)'
                : '–ö–ª–∏–∫–Ω–∏—Ç–µ –¥–ª—è ML-–ø–æ–¥–±–æ—Ä–∞ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã'}
            </div>
          )
        }
        {...props}
      />

      {/* ML —Å—Ç–∞—Ç—É—Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä */}
      {config?.enabled && materialName.length >= 2 && (
        <div
          style={{
            position: 'absolute',
            top: '-26px',
            right: '0px',
            fontSize: '11px',
            color: '#666',
            display: 'flex',
            alignItems: 'center',
            gap: '4px',
            height: '20px', // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤—ã—Å–æ—Ç–∞
            minWidth: '120px', // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–∫–∞—á–∫–æ–≤
            justifyContent: 'flex-end',
            pointerEvents: 'none', // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –∫–ª–∏–∫–∏
            zIndex: 10,
          }}
        >
          {isLoading ? (
            <div style={{ display: 'flex', alignItems: 'center', gap: '4px' }}>
              <RobotOutlined spin style={{ color: '#1890ff' }} />
              <span>ML –∞–Ω–∞–ª–∏–∑...</span>
            </div>
          ) : suggestions.length > 0 ? (
            <Tooltip
              title={`ML –º–æ–¥–µ–ª—å: ${modelUsed}, –í—Ä–µ–º—è: ${processingTime}–º—Å, –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${Math.round(confidence * 100)}%`}
            >
              <div
                style={{ display: 'flex', alignItems: 'center', gap: '4px', pointerEvents: 'auto' }}
              >
                <ThunderboltFilled style={{ color: '#52c41a' }} />
                <span style={{ color: '#52c41a' }}>{suggestions.length} ML –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π</span>
              </div>
            </Tooltip>
          ) : (
            <Tooltip title="–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –ø–æ–ª–µ –¥–ª—è ML-–∞–Ω–∞–ª–∏–∑–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞">
              <div
                style={{ display: 'flex', alignItems: 'center', gap: '4px', pointerEvents: 'auto' }}
              >
                <RobotOutlined style={{ color: '#1890ff' }} />
                <span style={{ color: '#1890ff' }}>–ì–æ—Ç–æ–≤ –∫ ML-–∞–Ω–∞–ª–∏–∑—É</span>
              </div>
            </Tooltip>
          )}
        </div>
      )}

      {/* –î–µ–±–∞–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (—Ç–æ–ª—å–∫–æ –≤ development) */}
      {import.meta.env.DEV && suggestions.length > 0 && (
        <div
          style={{
            marginTop: '4px',
            fontSize: '10px',
            color: '#999',
            fontFamily: 'monospace',
          }}
        >
          ü§ñ ML: {suggestions.length} suggestions, {processingTime}ms, model: {modelUsed}
        </div>
      )}
    </div>
  )
}

export default MLNomenclatureSelect

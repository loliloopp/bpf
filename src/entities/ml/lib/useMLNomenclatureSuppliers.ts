import { useState, useCallback, useRef, useEffect, useMemo } from 'react'
import { useQuery } from '@tanstack/react-query'
import { predictNomenclatureSuppliers, getMLConfig } from '../api/ml-api'
import { mlModeApi } from '@/entities/api-settings'
import type { MLPredictionRequest, NomenclatureSuggestion, MLConfig } from '../model/types'

interface UseMLNomenclatureSuppliersOptions {
  enabled?: boolean
  debounceMs?: number
  minQueryLength?: number
  autoPredict?: boolean
}

interface UseMLNomenclatureSuppliersResult {
  suggestions: NomenclatureSuggestion[]
  isLoading: boolean
  error: Error | null
  config: MLConfig | undefined
  predict: (materialName: string, context?: MLPredictionRequest['context']) => void
  predictNow: (materialName: string, context?: MLPredictionRequest['context']) => void
  clearSuggestions: () => void
  confidence: number
  processingTime: number
  modelUsed: string
}

/**
 * –•—É–∫ –¥–ª—è ML-–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –º–∞—Ç–µ—Ä–∏–∞–ª–∞
 * –ù–∞—Ö–æ–¥–∏—Ç –Ω–∞–∏–±–æ–ª–µ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—É –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
 */
export const useMLNomenclatureSuppliers = (options: UseMLNomenclatureSuppliersOptions = {}): UseMLNomenclatureSuppliersResult => {
  const {
    enabled = true,
    debounceMs = 300,
    minQueryLength = 2,
    autoPredict = false
  } = options

  const [currentRequest, setCurrentRequest] = useState<MLPredictionRequest | null>(null)
  const [mlMode, setMLMode] = useState<string>('local')
  const [lastResponse, setLastResponse] = useState<{
    confidence: number
    processingTime: number
    modelUsed: string
  }>({
    confidence: 0,
    processingTime: 0,
    modelUsed: 'none'
  })

  const debounceRef = useRef<NodeJS.Timeout>()

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é ML
  const { data: config } = useQuery({
    queryKey: ['ml-nomenclature-suppliers-config'],
    queryFn: getMLConfig,
    staleTime: 10 * 1000, // 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    gcTime: 30 * 1000, // 30 —Å–µ–∫—É–Ω–¥ –≤ –ø–∞–º—è—Ç–∏
  })

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∂–∏–º ML/AI
  const { data: modeConfig } = useQuery({
    queryKey: ['ml-mode-config-nomenclature-suppliers'],
    queryFn: () => mlModeApi.getCurrentMode(),
    staleTime: 0,
    gcTime: 1000,
    refetchOnMount: true,
  })

  // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∂–∏–º ML –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ)
  useEffect(() => {
    if (modeConfig?.mode && modeConfig.mode !== mlMode) {
      setMLMode(modeConfig.mode)
      if (import.meta.env.DEV) {
        console.log('üîÑ useMLNomenclatureSuppliers: –†–µ–∂–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞', modeConfig.mode) // LOG: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞
      }
    }
  }, [modeConfig?.mode, mlMode])

  // –°—Ç–∞–±–∏–ª–∏–∑–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  const stableConfigEnabled = useMemo(() => config?.enabled, [config?.enabled])

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–ª—é—á–∞ –∑–∞–ø—Ä–æ—Å–∞ (—Å–æ–∫—Ä–∞—â–µ–Ω–æ)
  useEffect(() => {
    if (import.meta.env.DEV) {
      console.log('üîç useMLNomenclatureSuppliers Query Key Changed:', {
        enabled: enabled && stableConfigEnabled && !!currentRequest,
        currentRequestMaterial: currentRequest?.materialName || 'none',
        configEnabled: stableConfigEnabled
      }) // LOG: –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π queryKey
    }
  }, [currentRequest, stableConfigEnabled, enabled])

  // –°—Ç–∞–±–∏–ª–∏–∑–∏—Ä—É–µ–º query key
  const stableQueryKey = useMemo(() => {
    if (!currentRequest) return ['ml-nomenclature-suppliers-predictions', 'no-request']

    return [
      'ml-nomenclature-suppliers-predictions',
      currentRequest.materialName,
      currentRequest.context?.projectId || 'no-project',
      currentRequest.context?.blockId || 'no-block',
      mlMode,
      stableConfigEnabled ? 'enabled' : 'disabled'
    ]
  }, [currentRequest, mlMode, stableConfigEnabled])

  // –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
  const {
    data: response,
    isLoading,
    error
  } = useQuery({
    queryKey: stableQueryKey,
    enabled: enabled && stableConfigEnabled && !!currentRequest,
    staleTime: 3 * 60 * 1000, // 3 –º–∏–Ω—É—Ç—ã
    gcTime: 10 * 60 * 1000, // 10 –º–∏–Ω—É—Ç –≤ –ø–∞–º—è—Ç–∏
    queryFn: async ({ signal }) => {
      if (!currentRequest) return null

      if (import.meta.env.DEV) {
        console.log('ü§ñ ML: Starting nomenclature suppliers prediction for:', currentRequest.materialName) // LOG: –Ω–∞—á–∞–ª–æ ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
      }

      try {
        const result = await predictNomenclatureSuppliers(currentRequest, signal)

        if (import.meta.env.DEV) {
          console.log('ü§ñ ML: Nomenclature suppliers prediction completed:', { // LOG: –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
            suggestionsCount: result.suggestions.length,
            processingTime: result.processingTime,
            modelUsed: result.modelUsed
          })
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –æ—Ç–≤–µ—Ç–µ
        const avgConfidence = result.suggestions.length > 0
          ? result.suggestions.reduce((sum, s) => sum + s.confidence, 0) / result.suggestions.length
          : 0

        setLastResponse({
          confidence: avgConfidence,
          processingTime: result.processingTime,
          modelUsed: result.modelUsed
        })

        return result
      } catch (error) {
        if (error instanceof Error && error.name === 'AbortError') {
          console.log('üîç ML NomenclatureSuppliers AbortError –î–ï–¢–ê–õ–ò:', {
            errorName: error.name,
            errorMessage: error.message,
            signalAborted: signal?.aborted || false,
            signalReason: signal?.reason,
            source: 'useMLNomenclatureSuppliers.queryFn'
          })
          throw error
        }

        console.error('ü§ñ ML: Nomenclature suppliers prediction error:', error)
        throw error
      }
    },
    retry: (failureCount, error) => {
      if (error instanceof Error && error.name === 'AbortError') {
        console.log('üîç useMLNomenclatureSuppliers: AbortError detected, no retry needed')
        return false
      }
      console.log('üîç useMLNomenclatureSuppliers: Retrying query, attempt:', failureCount + 1)
      return failureCount < 2
    },
    meta: {
      queryType: 'ml-nomenclature-suppliers',
      material: currentRequest?.materialName
    }
  })

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –±–µ–∑ debounce
  const predictNow = useCallback((materialName: string, context?: MLPredictionRequest['context']) => {
    if (debounceRef.current) {
      clearTimeout(debounceRef.current)
    }

    if (materialName.length < minQueryLength) {
      setCurrentRequest(null)
      return
    }

    const request: MLPredictionRequest = {
      materialName: materialName.trim(),
      context
    }

    if (import.meta.env.DEV) {
      console.log('ü§ñ ML: Executing immediate nomenclature suppliers prediction request:', request) // LOG: –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ ML –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
    }

    setCurrentRequest(request)
  }, [minQueryLength])

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Å debounce
  const predict = useCallback((materialName: string, context?: MLPredictionRequest['context']) => {
    if (!autoPredict) {
      if (import.meta.env.DEV) {
        console.log('ü§ñ ML: Auto-predict disabled for nomenclature suppliers, skipping prediction') // LOG: –∞–≤—Ç–æ–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–æ
      }
      return
    }

    if (debounceRef.current) {
      clearTimeout(debounceRef.current)
    }

    if (materialName.length < minQueryLength) {
      setCurrentRequest(null)
      return
    }

    if (import.meta.env.DEV) {
      console.log('ü§ñ ML: Scheduling nomenclature suppliers prediction with debounce:', materialName) // LOG: –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
    }

    debounceRef.current = setTimeout(() => {
      const request: MLPredictionRequest = {
        materialName: materialName.trim(),
        context
      }

      if (import.meta.env.DEV) {
        console.log('ü§ñ ML: Executing nomenclature suppliers prediction request:', request) // LOG: –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ ML –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
      }

      setCurrentRequest(request)
    }, debounceMs)
  }, [debounceMs, minQueryLength, autoPredict])

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
  const clearSuggestions = useCallback(() => {
    if (import.meta.env.DEV) {
      console.log('ü§ñ ML: Clearing nomenclature suppliers suggestions') // LOG: –æ—á–∏—Å—Ç–∫–∞ ML –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
    }

    if (debounceRef.current) {
      clearTimeout(debounceRef.current)
    }
    setCurrentRequest(null)
    setLastResponse({
      confidence: 0,
      processingTime: 0,
      modelUsed: 'none'
    })
  }, [])

  // –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –ø–æ—Ä–æ–≥—É confidence
  const filteredSuggestions = useMemo(() => {
    if (!response?.suggestions) return []

    const threshold = config?.confidenceThreshold || 0.3
    return response.suggestions.filter(suggestion => suggestion.confidence >= threshold)
  }, [response?.suggestions, config?.confidenceThreshold])

  return {
    suggestions: filteredSuggestions,
    isLoading,
    error: error as Error | null,
    config,
    predict,
    predictNow,
    clearSuggestions,
    confidence: lastResponse.confidence,
    processingTime: lastResponse.processingTime,
    modelUsed: lastResponse.modelUsed
  }
}
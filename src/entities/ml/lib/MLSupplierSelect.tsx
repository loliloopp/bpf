import React from 'react'
import { AutoComplete, Badge, Tooltip, Space } from 'antd'
import { RobotOutlined, ThunderboltFilled } from '@ant-design/icons'
import { useMLSuppliers } from './useMLSuppliers'
import type { MLPredictionRequest } from '../model/types'

interface MLSupplierSelectProps {
  value?: string
  onChange?: (value: string, option?: any) => void
  onSupplierSelect?: (supplierId: string, supplierName: string) => void
  placeholder?: string
  materialName: string
  context?: MLPredictionRequest['context']
  style?: React.CSSProperties
  disabled?: boolean
  allowClear?: boolean
  showSearch?: boolean
  filterOption?: (input: string, option?: any) => boolean
  options?: Array<{ value: string; label: string }>
}

/**
 * ML-enhanced AutoComplete –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª—É
 */
export const MLSupplierSelect: React.FC<MLSupplierSelectProps> = ({
  value,
  onChange,
  onSupplierSelect,
  placeholder = '–ö–ª–∏–∫–Ω–∏—Ç–µ –¥–ª—è ML-–ø–æ–¥–±–æ—Ä–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞...',
  materialName,
  context,
  style,
  disabled,
  allowClear = true,
  showSearch = true,
  filterOption,
  options = [],
  ...props
}) => {
  const [searchQuery, setSearchQuery] = React.useState('')
  const [isOpen, setIsOpen] = React.useState(false)

  const {
    suggestions,
    isLoading,
    config,
    predict,
    predictNow,
    clearSuggestions,
    confidence,
    processingTime,
    modelUsed
  } = useMLSuppliers({
    enabled: !disabled,
    autoPredict: false, // –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
    debounceMs: 300,
    minQueryLength: 2
  })

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ–∫—É—Å–∞ - –∑–∞–ø—É—Å–∫–∞–µ–º ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º dropdown
  const handleFocus = React.useCallback(() => {
    setIsOpen(true)
    if (materialName && materialName.length >= 2 && config?.enabled) {
      console.log('ü§ñ ML Supplier: Focus triggered prediction for:', materialName) // LOG: ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –ø–æ —Ñ–æ–∫—É—Å—É
      predictNow(materialName, context)
    }
  }, [materialName, context, predictNow, config?.enabled])

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ - —Ç–∞–∫–∂–µ –∑–∞–ø—É—Å–∫–∞–µ–º ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
  const handleClick = React.useCallback(() => {
    setIsOpen(true)
    if (materialName && materialName.length >= 2 && config?.enabled) {
      console.log('ü§ñ ML Supplier: Click triggered prediction for:', materialName) // LOG: ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –ø–æ –∫–ª–∏–∫—É
      predictNow(materialName, context)
    }
  }, [materialName, context, predictNow, config?.enabled])

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
  const handleSearch = React.useCallback((searchValue: string) => {
    console.log('üîç Supplier search query changed:', searchValue) // LOG: –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
    setSearchQuery(searchValue)
  }, [])

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è dropdown
  const handleDropdownVisibleChange = React.useCallback((open: boolean) => {
    setIsOpen(open)
    if (!open) {
      setSearchQuery('')
    }
  }, [])

  // –°—Ç–∞–±–∏–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤—ã –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∏–∑–±—ã—Ç–æ—á–Ω—ã—Ö –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–æ–≤
  const stableSuggestions = React.useMemo(() => suggestions, [JSON.stringify(suggestions)])
  const stableOptions = React.useMemo(() => options, [JSON.stringify(options)])

  // –û–±—ä–µ–¥–∏–Ω—è–µ–º ML –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å –æ–±—ã—á–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏
  const allOptions = React.useMemo(() => {
    // LOG: –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –æ–ø—Ü–∏–π –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö)
    if (process.env.NODE_ENV === 'development') {
      console.log('üîÑ Rebuilding supplier options:', {
        mlSuggestions: stableSuggestions.length,
        staticOptions: stableOptions.length,
        searchQuery
      })
    }

    const mlOptions = stableSuggestions.map(suggestion => ({
      value: suggestion.id,
      label: (
        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
          <span>{suggestion.name}</span>
          <Space size="small">
            <Badge
              count={`${Math.round(suggestion.confidence * 100)}%`}
              style={{
                backgroundColor: suggestion.confidence > 0.7 ? '#52c41a' :
                                suggestion.confidence > 0.5 ? '#faad14' : '#ff7875',
                fontSize: '10px',
                height: '16px',
                lineHeight: '16px',
                borderRadius: '8px'
              }}
            />
            <RobotOutlined style={{ color: '#1890ff', fontSize: '12px' }} />
          </Space>
        </div>
      ),
      confidence: suggestion.confidence,
      reasoning: suggestion.reasoning,
      isMLSuggestion: true,
      supplierId: suggestion.id,
      supplierName: suggestion.name
    }))

    // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø—Ü–∏–∏ (–∏–∑ props)
    const staticOptions = stableOptions
      .filter(opt => !mlOptions.some(mlOpt => mlOpt.value === opt.value))
      .map(opt => ({
        ...opt,
        isMLSuggestion: false
      }))

    // –ü–æ—Ä—è–¥–æ–∫: ML –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è -> –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø—Ü–∏–∏
    return [...mlOptions, ...staticOptions]
  }, [stableSuggestions, stableOptions, searchQuery])

  const handleSelect = (selectedValue: string, option: any) => {
    console.log('ü§ñ ML Supplier: Option selected:', { // LOG: –≤—ã–±–æ—Ä –æ–ø—Ü–∏–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –≤ ML AutoComplete
      selectedValue,
      isMLSuggestion: option.isMLSuggestion,
      confidence: option.confidence,
      supplierName: option.supplierName
    })

    if (option.isMLSuggestion && onSupplierSelect) {
      onSupplierSelect(option.supplierId, option.supplierName)
    }

    onChange?.(selectedValue, option)
  }

  return (
    <div style={{
      position: 'relative',
      width: '100%',
      minHeight: '32px'
    }}>
      <AutoComplete
        value={value}
        onChange={onChange}
        onSelect={handleSelect}
        onFocus={handleFocus}
        onClick={handleClick}
        placeholder={placeholder}
        style={{
          width: '100%',
          ...style
        }}
        disabled={disabled}
        allowClear={allowClear}
        showSearch={showSearch}
        filterOption={filterOption}
        onSearch={handleSearch}
        options={allOptions}
        dropdownStyle={{
          zIndex: 9999,
        }}
        getPopupContainer={(triggerNode) => {
          const scrollContainer = triggerNode.closest('.ant-table-body') ||
                                 triggerNode.closest('.ant-table-container') ||
                                 triggerNode.closest('[data-testid="table-scroll-container"]') ||
                                 document.body
          return scrollContainer as HTMLElement
        }}
        popupMatchSelectWidth={false}
        dropdownMatchSelectWidth={false}
        loading={isLoading}
        notFoundContent={
          isLoading ? (
            <div style={{
              padding: '12px 16px',
              textAlign: 'center',
              color: '#666',
              minHeight: '44px',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center'
            }}>
              <RobotOutlined spin style={{ marginRight: '8px' }} />
              ML –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤...
            </div>
          ) : materialName.length >= 2 ? (
            suggestions.length === 0 && config?.enabled ? (
              <div style={{
                padding: '12px 16px',
                textAlign: 'center',
                color: '#666',
                minHeight: '44px',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center'
              }}>
                <RobotOutlined style={{ marginRight: '8px', color: '#1890ff' }} />
                –ö–ª–∏–∫–Ω–∏—Ç–µ –¥–ª—è ML-–∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –¥–ª—è "{materialName.substring(0, 20)}{materialName.length > 20 ? '...' : ''}"
              </div>
            ) : (
              <div style={{
                padding: '12px 16px',
                textAlign: 'center',
                color: '#666',
                minHeight: '44px',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center'
              }}>
                –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
              </div>
            )
          ) : (
            <div style={{
              padding: '12px 16px',
              textAlign: 'center',
              color: '#666',
              minHeight: '44px',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center'
            }}>
              {materialName.length < 2 ? (
                '–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª (–º–∏–Ω. 2 —Å–∏–º–≤–æ–ª–∞)'
              ) : (
                '–ö–ª–∏–∫–Ω–∏—Ç–µ –¥–ª—è ML-–ø–æ–¥–±–æ—Ä–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤'
              )}
            </div>
          )
        }
        {...props}
      />

      {/* ML —Å—Ç–∞—Ç—É—Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –¥–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ */}
      {config?.enabled && materialName.length >= 2 && (
        <div style={{
          position: 'absolute',
          top: '-26px',
          right: '0px',
          fontSize: '11px',
          color: '#666',
          display: 'flex',
          alignItems: 'center',
          gap: '4px',
          height: '20px',
          minWidth: '140px',
          justifyContent: 'flex-end',
          pointerEvents: 'none',
          zIndex: 10
        }}>
          {isLoading ? (
            <div style={{ display: 'flex', alignItems: 'center', gap: '4px' }}>
              <RobotOutlined spin style={{ color: '#1890ff' }} />
              <span>ML –∞–Ω–∞–ª–∏–∑ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤...</span>
            </div>
          ) : suggestions.length > 0 ? (
            <Tooltip title={`ML –º–æ–¥–µ–ª—å: ${modelUsed}, –í—Ä–µ–º—è: ${processingTime}–º—Å, –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${Math.round(confidence * 100)}%`}>
              <div style={{ display: 'flex', alignItems: 'center', gap: '4px', pointerEvents: 'auto' }}>
                <ThunderboltFilled style={{ color: '#52c41a' }} />
                <span style={{ color: '#52c41a' }}>
                  {suggestions.length} ML –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
                </span>
              </div>
            </Tooltip>
          ) : (
            <Tooltip title="–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –ø–æ–ª–µ –¥–ª—è ML-–∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤">
              <div style={{ display: 'flex', alignItems: 'center', gap: '4px', pointerEvents: 'auto' }}>
                <RobotOutlined style={{ color: '#1890ff' }} />
                <span style={{ color: '#1890ff' }}>
                  –ì–æ—Ç–æ–≤ –∫ ML-–∞–Ω–∞–ª–∏–∑—É
                </span>
              </div>
            </Tooltip>
          )}
        </div>
      )}

      {/* –î–µ–±–∞–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (—Ç–æ–ª—å–∫–æ –≤ development) */}
      {import.meta.env.DEV && suggestions.length > 0 && (
        <div style={{
          marginTop: '4px',
          fontSize: '10px',
          color: '#999',
          fontFamily: 'monospace'
        }}>
          ü§ñ ML Suppliers: {suggestions.length} suggestions, {processingTime}ms, model: {modelUsed}
        </div>
      )}
    </div>
  )
}

export default MLSupplierSelect
import { useState, useCallback, useRef, useEffect } from 'react'
import { useQuery } from '@tanstack/react-query'
import { predictNomenclature, getMLConfig, updateMLMetrics } from '../api/ml-api'
import { mlModeApi } from '@/entities/api-settings'
import type { MLPredictionRequest, NomenclatureSuggestion, MLConfig } from '../model/types'

interface UseMLNomenclatureOptions {
  enabled?: boolean
  debounceMs?: number
  minQueryLength?: number
  autoPredict?: boolean // –ù–æ–≤–∞—è –æ–ø—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
}

interface UseMLNomenclatureResult {
  suggestions: NomenclatureSuggestion[]
  isLoading: boolean
  error: Error | null
  config: MLConfig | undefined
  predict: (materialName: string, context?: MLPredictionRequest['context']) => void
  predictNow: (materialName: string, context?: MLPredictionRequest['context']) => void // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –±–µ–∑ debounce
  clearSuggestions: () => void
  confidence: number
  processingTime: number
  modelUsed: string
}

/**
 * –•—É–∫ –¥–ª—è ML-–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –º–∞—Ç–µ—Ä–∏–∞–ª–∞
 */
export const useMLNomenclature = (options: UseMLNomenclatureOptions = {}): UseMLNomenclatureResult => {
  const {
    enabled = true,
    debounceMs = 300,
    minQueryLength = 2,
    autoPredict = false // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∞–≤—Ç–æ–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ
  } = options

  const [currentRequest, setCurrentRequest] = useState<MLPredictionRequest | null>(null)
  const [mlMode, setMLMode] = useState<string>('local') // –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º ML/AI
  const [lastResponse, setLastResponse] = useState<{
    confidence: number
    processingTime: number
    modelUsed: string
  }>({
    confidence: 0,
    processingTime: 0,
    modelUsed: 'none'
  })

  const debounceRef = useRef<NodeJS.Timeout>()

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é ML
  const { data: config } = useQuery({
    queryKey: ['ml-config'],
    queryFn: getMLConfig,
    staleTime: 10 * 1000, // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    gcTime: 30 * 1000, // 30 —Å–µ–∫—É–Ω–¥ –≤ –ø–∞–º—è—Ç–∏
  })

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∂–∏–º ML/AI (–±–µ–∑ –∫—ç—à–∞ –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏)
  const { data: modeConfig } = useQuery({
    queryKey: ['ml-mode-config'],
    queryFn: () => mlModeApi.getCurrentMode(),
    staleTime: 0, // –í—Å–µ–≥–¥–∞ —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
    gcTime: 1000, // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤ –ø–∞–º—è—Ç–∏
    refetchOnMount: true, // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—Ç—å –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  })

  // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∂–∏–º ML –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  useEffect(() => {
    if (modeConfig) {
      setMLMode(modeConfig.mode)
      console.log('üîÑ useMLNomenclature: –†–µ–∂–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞', modeConfig.mode) // LOG: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞
    }
  }, [modeConfig])

  // –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
  const {
    data: response,
    isLoading,
    error,
    refetch
  } = useQuery({
    queryKey: ['ml-nomenclature-predictions', currentRequest, config, mlMode], // –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º ML –≤ –∫–ª—é—á –∫—ç—à–∞
    queryFn: async () => {
      if (!currentRequest) return null

      console.log('ü§ñ ML: Starting prediction for:', currentRequest.materialName) // LOG: –Ω–∞—á–∞–ª–æ ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è

      const result = await predictNomenclature(currentRequest)

      console.log('ü§ñ ML: Prediction completed:', { // LOG: –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        suggestionsCount: result.suggestions.length,
        processingTime: result.processingTime,
        modelUsed: result.modelUsed
      })

      // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
      const successful = result.suggestions.length > 0
      await updateMLMetrics(result, successful)

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –æ—Ç–≤–µ—Ç–µ
      setLastResponse({
        confidence: result.suggestions.length > 0
          ? result.suggestions.reduce((sum, s) => sum + s.confidence, 0) / result.suggestions.length
          : 0,
        processingTime: result.processingTime,
        modelUsed: result.modelUsed
      })

      return result
    },
    enabled: enabled && config?.enabled && !!currentRequest,
    staleTime: 30 * 1000, // 30 —Å–µ–∫—É–Ω–¥ –∫—ç—à–∞
    gcTime: 5 * 60 * 1000, // 5 –º–∏–Ω—É—Ç –≤ –ø–∞–º—è—Ç–∏
  })

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –±–µ–∑ debounce
  const predictNow = useCallback((materialName: string, context?: MLPredictionRequest['context']) => {
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
    if (debounceRef.current) {
      clearTimeout(debounceRef.current)
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É –∑–∞–ø—Ä–æ—Å–∞
    if (materialName.length < minQueryLength) {
      setCurrentRequest(null)
      return
    }

    const request: MLPredictionRequest = {
      materialName: materialName.trim(),
      context
    }

    console.log('ü§ñ ML: Executing immediate prediction request:', request) // LOG: –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ ML –∑–∞–ø—Ä–æ—Å–∞
    console.log('üîç DEBUG: –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º ML –≤ useMLNomenclature:', mlMode) // DEBUG LOG: —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º

    setCurrentRequest(request)
  }, [minQueryLength, mlMode])

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Å debounce (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ –∞–≤—Ç–æ–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ)
  const predict = useCallback((materialName: string, context?: MLPredictionRequest['context']) => {
    if (!autoPredict) {
      console.log('ü§ñ ML: Auto-predict disabled, skipping prediction') // LOG: –∞–≤—Ç–æ–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ
      return
    }

    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
    if (debounceRef.current) {
      clearTimeout(debounceRef.current)
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É –∑–∞–ø—Ä–æ—Å–∞
    if (materialName.length < minQueryLength) {
      setCurrentRequest(null)
      return
    }

    console.log('ü§ñ ML: Scheduling prediction with debounce:', materialName) // LOG: –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä
    debounceRef.current = setTimeout(() => {
      const request: MLPredictionRequest = {
        materialName: materialName.trim(),
        context
      }

      console.log('ü§ñ ML: Executing prediction request:', request) // LOG: –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ ML –∑–∞–ø—Ä–æ—Å–∞

      setCurrentRequest(request)
    }, debounceMs)
  }, [debounceMs, minQueryLength, autoPredict])

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
  const clearSuggestions = useCallback(() => {
    console.log('ü§ñ ML: Clearing suggestions') // LOG: –æ—á–∏—Å—Ç–∫–∞ ML –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π

    if (debounceRef.current) {
      clearTimeout(debounceRef.current)
    }
    setCurrentRequest(null)
    setLastResponse({
      confidence: 0,
      processingTime: 0,
      modelUsed: 'none'
    })
  }, [])

  // –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –ø–æ—Ä–æ–≥—É confidence
  const filteredSuggestions = response?.suggestions.filter(
    suggestion => suggestion.confidence >= (config?.confidenceThreshold || 0.3)
  ) || []

  return {
    suggestions: filteredSuggestions,
    isLoading,
    error: error as Error | null,
    config,
    predict,
    predictNow,
    clearSuggestions,
    confidence: lastResponse.confidence,
    processingTime: lastResponse.processingTime,
    modelUsed: lastResponse.modelUsed
  }
}
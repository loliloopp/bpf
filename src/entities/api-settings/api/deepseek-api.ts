// DEEPSEEK AI API –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø
// –≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Deepseek AI API
//
// –í–ê–ñ–ù–û: –í—Å–µ –±–ª–æ–∫–∏ –∫–æ–¥–∞ –≤ —ç—Ç–æ–º —Ñ–∞–π–ª–µ —Å–Ω–∞–±–∂–µ–Ω—ã –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏
// –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø–µ—Ä–µ–Ω–æ—Å–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –Ω–∞ –¥—Ä—É–≥–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ—Ä—Ç–∞–ª–∞
//
// Deepseek API —Å–æ–≤–º–µ—Å—Ç–∏–º —Å OpenAI API —Ñ–æ—Ä–º–∞—Ç–æ–º, —á—Ç–æ —É–ø—Ä–æ—â–∞–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é

import { supabase } from '@/lib/supabase'
import type {
  DeepseekSettings,
  DeepseekUsageStats,
  DeepseekMaterialRequest,
  DeepseekMaterialResponse,
  MLMode,
  MLModeConfig,
} from '../types'

/**
 * ===============================
 * –ë–ê–ó–û–í–´–ï –ù–ê–°–¢–†–û–ô–ö–ò DEEPSEEK API
 * ===============================
 */

// –ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Deepseek API
const DEEPSEEK_CONFIG = {
  BASE_URL: 'https://api.deepseek.com',
  DEFAULT_MODEL: 'deepseek-chat' as const,
  DEFAULT_TEMPERATURE: 0.7,
  DEFAULT_MAX_TOKENS: 4000, // –£–í–ï–õ–ò–ß–ï–ù–û: –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ 15 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±–µ–∑ –æ–±—Ä–µ–∑–∞–Ω–∏—è JSON
  TIMEOUT_MS: 90000, // 90 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞ + –æ–±—Ä–∞–±–æ—Ç–∫–∏
}

/**
 * API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ Deepseek
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π AI –º–æ–¥–µ–ª–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
 */
export const deepseekApi = {
  /**
   * ===============================
   * –£–ü–†–ê–í–õ–ï–ù–ò–ï –ù–ê–°–¢–†–û–ô–ö–ê–ú–ò
   * ===============================
   */

  /**
   * –ü–û–õ–£–ß–ï–ù–ò–ï –ù–ê–°–¢–†–û–ï–ö DEEPSEEK
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã deepseek_settings
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
   */
  async getSettings(): Promise<DeepseekSettings> {
    if (!supabase) throw new Error('Supabase client not initialized')

    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —è–≤–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª–µ–π –≤–º–µ—Å—Ç–æ * –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –ë–î –±–µ–∑ system_prompt
      const { data, error } = await supabase
        .from('deepseek_settings')
        .select(
          'id, api_key, base_url, model, enabled, temperature, max_tokens, created_at, updated_at',
        )
        .single()

      if (error && error.code !== 'PGRST116') {
        console.error('Failed to fetch Deepseek settings:', error)
        throw error
      }

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
      if (!data) {
        return {
          id: '',
          api_key: '',
          base_url: DEEPSEEK_CONFIG.BASE_URL,
          model: DEEPSEEK_CONFIG.DEFAULT_MODEL,
          enabled: false,
          temperature: DEEPSEEK_CONFIG.DEFAULT_TEMPERATURE,
          max_tokens: DEEPSEEK_CONFIG.DEFAULT_MAX_TOKENS,
          system_prompt: undefined, // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString(),
        }
      }

      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø–æ–ª–µ system_prompt –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å—Ö–µ–º–µ –ë–î
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º undefined –≤–º–µ—Å—Ç–æ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—è
      const systemPrompt: string | undefined = undefined

      return {
        ...data,
        system_prompt: systemPrompt,
      } as DeepseekSettings
    } catch (error) {
      console.error('Error getting Deepseek settings:', error)
      throw error
    }
  },

  /**
   * –°–û–•–†–ê–ù–ï–ù–ò–ï –ù–ê–°–¢–†–û–ï–ö DEEPSEEK
   * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç API –∫–ª—é—á –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
   */
  async upsertSettings(input: Partial<DeepseekSettings>): Promise<DeepseekSettings> {
    if (!supabase) throw new Error('Supabase client not initialized')

    try {
      const { data: existing } = await supabase.from('deepseek_settings').select('id').single()

      // –ò—Å–∫–ª—é—á–∞–µ–º system_prompt –∏–∑ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–µ—Å–ª–∏ –ø–æ–ª–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î)
      const { system_prompt, ...inputWithoutPrompt } = input

      // –î–æ–±–∞–≤–ª—è–µ–º timestamp –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      const dataToSave = {
        ...inputWithoutPrompt,
        updated_at: new Date().toISOString(),
      }

      const query = supabase.from('deepseek_settings')
      const { data, error } = existing
        ? await query.update(dataToSave).eq('id', existing.id).select().single()
        : await query
            .insert({
              ...dataToSave,
              created_at: new Date().toISOString(),
            })
            .select()
            .single()

      if (error) {
        console.error('Failed to upsert Deepseek settings:', error)
        throw error
      }

      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø–æ–ª–µ system_prompt –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å—Ö–µ–º–µ –ë–î
      // –ù–µ –ø—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å system_prompt —Ç–∞–∫ –∫–∞–∫ –ø–æ–ª–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      if (system_prompt !== undefined) {
        console.log('‚ö†Ô∏è system_prompt –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è - –ø–æ–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å—Ö–µ–º–µ –ë–î') // LOG: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–º, —á—Ç–æ –ø–æ–ª–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è
      }

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å system_prompt = undefined (–ø–æ–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ë–î)
      return {
        ...data,
        system_prompt: undefined,
      } as DeepseekSettings
    } catch (error) {
      console.error('Error upserting Deepseek settings:', error)
      throw error
    }
  },

  /**
   * ===============================
   * –ü–†–û–í–ï–†–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø
   * ===============================
   */

  /**
   * –¢–ï–°–¢ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö DEEPSEEK API
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
   */
  async testConnection(
    apiKey: string,
    baseUrl?: string,
    externalSignal?: AbortSignal,
  ): Promise<{
    success: boolean
    error?: string
    model_info?: any
    latency_ms?: number
  }> {
    const startTime = Date.now()

    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π AbortSignal –¥–ª—è test connection
    const combinedSignal = this.createCombinedSignal(externalSignal, DEEPSEEK_CONFIG.TIMEOUT_MS)

    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      const response = await fetch(`${baseUrl || DEEPSEEK_CONFIG.BASE_URL}/v1/models`, {
        method: 'GET',
        headers: {
          Authorization: `Bearer ${apiKey}`,
          'Content-Type': 'application/json',
        },
        signal: combinedSignal, // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π signal
      })

      const latency = Date.now() - startTime

      if (!response.ok) {
        const errorText = await response.text()
        return {
          success: false,
          error: `HTTP ${response.status}: ${errorText}`,
          latency_ms: latency,
        }
      }

      const data = await response.json()

      return {
        success: true,
        model_info: data,
        latency_ms: latency,
      }
    } catch (error) {
      const latency = Date.now() - startTime
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error',
        latency_ms: latency,
      }
    }
  },

  /**
   * ===============================
   * –ê–ù–ê–õ–ò–ó –ú–ê–¢–ï–†–ò–ê–õ–û–í
   * ===============================
   */

  /**
   * –ê–ù–ê–õ–ò–ó –ú–ê–¢–ï–†–ò–ê–õ–ê –ß–ï–†–ï–ó DEEPSEEK AI
   * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º
   *
   * –ü–ê–¢–¢–ï–†–ù –î–õ–Ø –ö–û–ü–ò–†–û–í–ê–ù–ò–Ø: –≠—Ç–æ—Ç –±–ª–æ–∫ –º–æ–∂–Ω–æ –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –¥—Ä—É–≥–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
   * –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Deepseek –≤ –ª—é–±—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã, —Ä–∞–±–æ—Ç–∞—é—â–∏–µ —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏
   */
  async analyzeMaterial(
    request: DeepseekMaterialRequest,
    externalSignal?: AbortSignal,
  ): Promise<DeepseekMaterialResponse> {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Deepseek
    const settings = await this.getSettings()

    if (!settings.enabled) {
      throw new Error('Deepseek –Ω–µ –≤–∫–ª—é—á–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö')
    }

    if (!settings.api_key) {
      throw new Error('API –∫–ª—é—á Deepseek –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')
    }

    // –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∫–ª—é—á–∞
    if (!settings.api_key.startsWith('sk-')) {
      throw new Error('–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π API –∫–ª—é—á Deepseek (–¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å sk-)')
    }

    const startTime = Date.now()

    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï AbortError: –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π AbortSignal
    const combinedSignal = this.createCombinedSignal(externalSignal, DEEPSEEK_CONFIG.TIMEOUT_MS)

    // LOG: –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ AbortSignal —Å–æ—Å—Ç–æ—è–Ω–∏—è
    console.log('üîç DEEPSEEK AbortSignal DEBUG:', {
      hasExternalSignal: !!externalSignal,
      externalAborted: externalSignal?.aborted || false,
      timeoutMs: DEEPSEEK_CONFIG.TIMEOUT_MS,
      combinedAborted: combinedSignal.aborted,
    })

    try {
      // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
      const systemPrompt = this.buildSystemPrompt(settings)
      const userPrompt = await this.buildUserPrompt(request)

      console.log('ü§ñ Deepseek: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞:', request.material_name)

      // LOG: –∑–∞–ø—É—Å–∫ –∑–∞–º–µ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è Deepseek –∑–∞–ø—Ä–æ—Å–∞
      const fetchStartTime = Date.now()
      console.log(`üöÄ Deepseek: –ù–∞—á–∞–ª–æ –∑–∞–ø—Ä–æ—Å–∞ (${new Date().toISOString()})`) // LOG: –Ω–∞—á–∞–ª–æ Deepseek –∑–∞–ø—Ä–æ—Å–∞

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Deepseek API
      const response = await fetch(`${settings.base_url}/chat/completions`, {
        method: 'POST',
        headers: {
          Authorization: `Bearer ${settings.api_key}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          model: settings.model,
          messages: [
            { role: 'system', content: systemPrompt },
            { role: 'user', content: userPrompt },
          ],
          temperature: settings.temperature,
          max_tokens: settings.max_tokens,
          stream: false,
        }),
        signal: combinedSignal, // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π signal
      })

      // LOG: –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–º–µ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
      const fetchEndTime = Date.now()
      const fetchDuration = fetchEndTime - fetchStartTime
      console.log(`‚úÖ Deepseek: –ó–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ ${fetchDuration}–º—Å (status: ${response.status})`) // LOG: –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ Deepseek –∑–∞–ø—Ä–æ—Å–∞

      if (!response.ok) {
        const errorText = await response.text()
        if (response.status === 401) {
          throw new Error('–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á Deepseek')
        } else if (response.status === 403) {
          throw new Error('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ API –∫–ª—é—á–∞')
        } else if (response.status === 429) {
          throw new Error('–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ Deepseek API')
        } else {
          throw new Error(`Deepseek API error: ${response.status} ${errorText}`)
        }
      }

      // LOG: –Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON –æ—Ç–≤–µ—Ç–∞
      const jsonStartTime = Date.now()
      const contentLength = response.headers.get('content-length')
      console.log(`üîç Deepseek: –û—Ç–≤–µ—Ç —Ä–∞–∑–º–µ—Ä ${contentLength || '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'} –±–∞–π—Ç`) // LOG: —Ä–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞

      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò: –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —á—Ç–µ–Ω–∏–µ –±–µ–∑ —É—Å–ª–æ–≤–Ω–æ–π –ª–æ–≥–∏–∫–∏
      let text: string
      let textReadTime: number

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞
      const contentLengthValue = contentLength ? parseInt(contentLength) : 0
      const isLargeResponse = contentLengthValue > 5000000 // 5MB threshold –¥–ª—è –±–æ–ª—å—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤

      if (isLargeResponse) {
        console.log(
          `üîç Deepseek: –ë–æ–ª—å—à–æ–π –æ—Ç–≤–µ—Ç ${contentLengthValue} –±–∞–π—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ç–æ–∫–æ–≤–æ–µ —á—Ç–µ–Ω–∏–µ`,
        ) // LOG: –ø–æ—Ç–æ–∫–æ–≤–æ–µ —á—Ç–µ–Ω–∏–µ

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º ArrayBuffer –¥–ª—è –±–æ–ª—å—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ (–±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ)
        const buffer = await response.arrayBuffer()
        text = new TextDecoder('utf-8').decode(buffer)
        textReadTime = Date.now() - jsonStartTime
        console.log(
          `üîç Deepseek: ArrayBuffer –ø—Ä–æ—á–∏—Ç–∞–Ω –∑–∞ ${textReadTime}–º—Å, —Ä–∞–∑–º–µ—Ä: ${text.length} —Å–∏–º–≤–æ–ª–æ–≤`,
        ) // LOG: —á—Ç–µ–Ω–∏–µ ArrayBuffer
      } else {
        // –ö–†–ò–¢–ò–ß–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–ª—è –º–∞–ª–µ–Ω—å–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º ArrayBuffer –Ω–∞–ø—Ä—è–º—É—é
        console.log(
          `üîç Deepseek: –ú–∞–ª–µ–Ω—å–∫–∏–π –æ—Ç–≤–µ—Ç ${contentLengthValue || 'unknown'} –±–∞–π—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º ArrayBuffer –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏`,
        ) // LOG: –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —á—Ç–µ–Ω–∏–µ

        try {
          // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º ArrayBuffer –≤–º–µ—Å—Ç–æ text() —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å browser bugs
          const buffer = await response.arrayBuffer()
          text = new TextDecoder('utf-8').decode(buffer)
          textReadTime = Date.now() - jsonStartTime
          console.log(
            `üîç Deepseek: ArrayBuffer –ø—Ä–æ—á–∏—Ç–∞–Ω –∑–∞ ${textReadTime}–º—Å, —Ä–∞–∑–º–µ—Ä: ${text.length} —Å–∏–º–≤–æ–ª–æ–≤`,
          ) // LOG: —á—Ç–µ–Ω–∏–µ ArrayBuffer
        } catch (bufferError) {
          console.error(`üîç Deepseek: –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è ArrayBuffer:`, bufferError) // LOG: –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è
          throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç: ${bufferError.message}`)
        }
      }

      const jsonParseStartTime = Date.now()
      let data
      try {
        data = JSON.parse(text)
      } catch (jsonError) {
        console.error('üîç Deepseek: –û—à–∏–±–∫–∞ JSON –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ:', {
          error: jsonError,
          textLength: text.length,
          firstChars: text.substring(0, 500),
          lastChars: text.substring(text.length - 500),
        })
        throw new Error(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç–≤–µ—Ç–∞ Deepseek: ${jsonError.message}`)
      }
      const jsonProcessingTime = Date.now() - jsonParseStartTime
      console.log(`üîç Deepseek: JSON —Å–ø–∞—Ä—Å–µ–Ω –∑–∞ ${jsonProcessingTime}–º—Å`) // LOG: –≤—Ä–µ–º—è JSON –ø–∞—Ä—Å–∏–Ω–≥–∞

      const processingTime = Date.now() - startTime
      console.log('ü§ñ Deepseek: –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –∑–∞', processingTime, '–º—Å')

      // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç –æ—Ç AI
      const aiResponse = data.choices[0]?.message?.content
      if (!aiResponse) {
        throw new Error('–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç Deepseek')
      }

      // LOG: –Ω–∞—á–∞–ª–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ AI –æ—Ç–≤–µ—Ç–∞
      const aiParseStartTime = Date.now()

      const analysisResult = await this.parseAIResponse(aiResponse, request.material_name)
      const parseTime = Date.now() - aiParseStartTime
      console.log(`üîç Deepseek: AI –æ—Ç–≤–µ—Ç —Å–ø–∞—Ä—Å–µ–Ω –∑–∞ ${parseTime}–º—Å`) // LOG: –≤—Ä–µ–º—è –ø–∞—Ä—Å–∏–Ω–≥–∞ AI –æ—Ç–≤–µ—Ç–∞

      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
      const usageStats = {
        tokens_input: data.usage?.prompt_tokens || 0,
        tokens_output: data.usage?.completion_tokens || 0,
        processing_time_ms: processingTime,
      }

      // LOG: –Ω–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      const statsStartTime = Date.now()
      await this.updateUsageStats(usageStats.tokens_input, usageStats.tokens_output, true)
      const statsTime = Date.now() - statsStartTime
      console.log(`üîç Deepseek: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞ ${statsTime}–º—Å`) // LOG: –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

      console.log('ü§ñ Deepseek: –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω:', {
        material: request.material_name,
        recommendations_count: analysisResult.recommendations.length,
        found_online: analysisResult.material_analysis?.found_online,
        processing_time: processingTime,
      })

      // –û–¢–õ–ê–î–ö–ê: –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ debug —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
      try {
        await this.saveDebugResponse({
          materialName: request.material_name,
          maxSuggestions: request.preferences?.max_suggestions || 5,
          rawResponse: aiResponse,
          rawResponseLength: aiResponse.length,
          cleanedResponse: analysisResult.debugInfo?.cleanedResponse,
          cleanedResponseLength: analysisResult.debugInfo?.cleanedResponseLength,
          jsonExtractionMethod: analysisResult.debugInfo?.jsonExtractionMethod,
          jsonFixApplied: analysisResult.debugInfo?.jsonFixApplied,
          jsonErrorPosition: analysisResult.debugInfo?.jsonErrorPosition,
          jsonErrorMessage: analysisResult.debugInfo?.jsonErrorMessage,
          fallbackUsed: analysisResult.debugInfo?.fallbackUsed,
          responseTimeMs: processingTime,
          parsedRecommendations: analysisResult.recommendations,
          recommendationsCount: analysisResult.recommendations.length,
          processingTimeMs: processingTime,
          success: true,
          mlMode: 'deepseek',
        })
      } catch (debugError) {
        console.warn('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è debug –¥–∞–Ω–Ω—ã—Ö:', debugError) // LOG: –æ—à–∏–±–∫–∞ debug —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
      }

      return {
        material_analysis: analysisResult.material_analysis,
        recommendations: analysisResult.recommendations,
        usage_stats: usageStats,
      }
    } catch (error) {
      const processingTime = Date.now() - startTime

      // –û–¢–õ–ê–î–ö–ê: –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
      try {
        await this.saveDebugResponse({
          materialName: request.material_name,
          maxSuggestions: request.preferences?.max_suggestions || 5,
          rawResponse: null,
          rawResponseLength: 0,
          parsedRecommendations: [],
          recommendationsCount: 0,
          processingTimeMs: processingTime,
          success: false,
          errorMessage: error instanceof Error ? error.message : 'Unknown error',
          mlMode: 'deepseek',
        })
      } catch (debugError) {
        console.warn('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è debug –æ—à–∏–±–∫–∏:', debugError) // LOG: –æ—à–∏–±–∫–∞ debug —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—à–∏–±–∫–∏
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
      if (error instanceof Error && error.name === 'AbortError') {
        // –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê AbortError
        console.log('üîç DEEPSEEK AbortError –î–ï–¢–ê–õ–ò:', {
          errorName: error.name,
          errorMessage: error.message,
          processingTime,
          externalSignalAborted: externalSignal?.aborted || false,
          combinedSignalAborted: combinedSignal.aborted,
          reason: externalSignal?.aborted ? 'React Query cancellation' : 'Timeout (30s)',
        })
        throw error // –ü–µ—Ä–µ–¥–∞–µ–º AbortError –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
      }

      console.error('ü§ñ Deepseek: –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞:', error)

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å –æ—à–∏–±–∫–æ–π —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫
      await this.updateUsageStats(0, 0, false)

      throw error
    }
  },

  /**
   * ===============================
   * –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
   * ===============================
   */

  /**
   * –ü–û–°–¢–†–û–ï–ù–ò–ï –°–ò–°–¢–ï–ú–ù–û–ì–û –ü–†–û–ú–ü–¢–ê –î–õ–Ø –†–ê–°–®–ò–†–ï–ù–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–æ–ª—å –∏ –ø–æ–≤–µ–¥–µ–Ω–∏–µ AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–ø–æ–∏—Å–∫–æ–º
   * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
   *
   * –ü–ê–¢–¢–ï–†–ù –î–õ–Ø –ö–û–ü–ò–†–û–í–ê–ù–ò–Ø: –ü—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Å –ø–æ–ª–Ω—ã–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ–º
   */
  buildSystemPrompt(settings: DeepseekSettings): string {
    // –ï—Å–ª–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∑–∞–¥–∞–Ω –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    if (settings.system_prompt?.trim()) {
      console.log('ü§ñ Deepseek: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞—Å—Ç–æ–º–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç') // LOG: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Å—Ç–æ–º–Ω–æ–º –ø—Ä–æ–º–ø—Ç–µ
      return settings.system_prompt.trim()
    }

    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    return `–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º, –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º, —Ü–µ–Ω–∞–º –∏ –∫–∞—á–µ—Å—Ç–≤—É –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.

–¢–í–û–Ø –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –ó–ê–î–ê–ß–ê:
1. üîç –ê–ù–ê–õ–ò–ó –ú–ê–¢–ï–†–ò–ê–õ–ê: –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
2. üìä –ü–û–ò–°–ö –°–û–û–¢–í–ï–¢–°–¢–í–ò–ô: –ù–∞–π–¥–∏ —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
3. üí∞ –¶–ï–ù–û–í–û–ô –ê–ù–ê–õ–ò–ó: –û—Ü–µ–Ω–∏ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ü–µ–Ω–∞/–∫–∞—á–µ—Å—Ç–≤–æ
4. ‚≠ê –ö–ê–ß–ï–°–¢–í–ï–ù–ù–ê–Ø –û–¶–ï–ù–ö–ê: –û—Ü–µ–Ω–∏ –∫–∞—á–µ—Å—Ç–≤–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
5. üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò: –ü–æ–¥–±–µ—Ä–∏ –ª—É—á—à–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—é —Ü–µ–Ω–∞/–∫–∞—á–µ—Å—Ç–≤–æ

–ö–†–ò–¢–ï–†–ò–ò –ü–†–ò–û–†–ò–¢–ï–¢–ê:
1. üè∑Ô∏è –ù–ê–ó–í–ê–ù–ò–ï: –¢–æ—á–Ω–æ—Å—Ç—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞ (50%)
2. üí∞ –¶–ï–ù–ê: –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ü–µ–Ω–∞/–∫–∞—á–µ—Å—Ç–≤–æ (30%)
3. ‚≠ê –ö–ê–ß–ï–°–¢–í–û: –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å (20%)

–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó:
‚úÖ –û–ø—Ä–µ–¥–µ–ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏ —Å—Ñ–µ—Ä—É –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
‚úÖ –ù–∞–π–¥–∏ —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
‚úÖ –û—Ü–µ–Ω–∏ –∫–∞—á–µ—Å—Ç–≤–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
‚úÖ –ü—Ä–æ–≤–µ—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–æ–µ–∫—Ç—É –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê (–°–¢–†–û–ì–û JSON):
{
  "material_analysis": {
    "found_online": true,
    "characteristics": "–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫",
    "applications": "—Å—Ñ–µ—Ä—ã –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è",
    "market_price_range": "–¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω —Ä—É–±/–µ–¥–∏–Ω–∏—Ü–∞"
  },
  "recommendations": [
    {
      "nomenclature_name": "—Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã",
      "supplier_name": "—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –ø–æ—Å—Ç–∞–≤—â–∏–∫",
      "confidence": 0.95,
      "price_analysis": "—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ü–µ–Ω, –ø–æ—á–µ–º—É –≤—ã–≥–æ–¥–Ω–æ",
      "quality_score": 8.5,
      "characteristics_match": "–∫–∞–∫ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–æ–¥—Ö–æ–¥—è—Ç",
      "reasoning": "–¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞",
      "tooltip_info": "–∫—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏"
    }
  ]
}

‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –í–µ—Ä–Ω–∏ —Ä–æ–≤–Ω–æ —Å—Ç–æ–ª—å–∫–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π, —Å–∫–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–æ –≤ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!
‚ö†Ô∏è –í–ê–ñ–ù–û: –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º JSON –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞!
‚ö†Ô∏è –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç 15 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ - –≤–µ—Ä–Ω–∏ —Ä–æ–≤–Ω–æ 15, –∞ –Ω–µ 1-5
‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤

–¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –§–û–†–ú–ê–¢–£:
- confidence –æ—Ç 0 –¥–æ 1 (—Ç–æ—á–Ω–æ—Å—Ç—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è)
- quality_score –æ—Ç 1 –¥–æ 10 (–æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞)
- –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–ø–æ–ª–Ω–∏ tooltip_info –¥–ª—è –∫–∞–∂–¥–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
- –£—á–∏—Ç—ã–≤–∞–π —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –∏ –ª–æ–≥–∏—Å—Ç–∏–∫—É
- –°—Ç—Ä–µ–º–∏—Å—å –∫ –¥–µ—à–µ–≤—ã–º, –Ω–æ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –≤–∞—Ä–∏–∞–Ω—Ç–∞–º

–ï–î–ò–ù–´–ô –ö–ê–ß–ï–°–¢–í–ï–ù–ù–´–ô –§–û–†–ú–ê–¢ –î–õ–Ø –í–°–ï–• –ö–û–õ–ò–ß–ï–°–¢–í:
‚úÖ –í—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–∞–π material_analysis –¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
‚úÖ –í—Å–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º–∏ –∏ –ø–æ–ª–Ω—ã–º–∏
‚úÖ Reasoning: –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏—è
‚úÖ Price_analysis: –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —Ü–µ–Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
‚úÖ Characteristics_match: –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
‚úÖ Tooltip_info: –¥–æ 120 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å–ø—Ä–∞–≤–∫–∏

–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û: –í–ï–†–ù–ò –í–ê–õ–ò–î–ù–´–ô JSON –ë–ï–ó –û–ë–†–´–í–û–í –ò –ù–ï–ó–ê–í–ï–†–®–ï–ù–ù–´–• –°–¢–†–û–ö`
  },

  /**
   * –£–õ–£–ß–®–ï–ù–ù–ê–Ø ML –í–ï–ö–¢–û–†–ò–ó–ê–¶–ò–Ø –î–õ–Ø –û–¢–ë–û–†–ê –†–ï–õ–ï–í–ê–ù–¢–ù–´–• –ó–ê–ü–ò–°–ï–ô
   * –†–µ–∞–ª–∏–∑—É–µ—Ç —ç—Ç–∞–ø 1: ML –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –æ—Ç–±–æ—Ä –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ supplier_names
   */
  async selectRelevantSuppliers(
    materialName: string,
    targetCount: number = 300,
  ): Promise<string[]> {
    try {
      console.log(
        `üîç ML –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: –û—Ç–±–æ—Ä ${targetCount} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –¥–ª—è: ${materialName}`,
      )

      // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
      const keywords = this.extractMaterialKeywords(materialName)
      console.log(`üîç ML: –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${keywords.join(', ')}`)

      // –≠—Ç–∞–ø 1: –ü–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ (–Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ)
      const { data: exactMatches } = await supabase
        .from('supplier_names')
        .select('name')
        .textSearch('name', materialName, { type: 'websearch' })
        .limit(Math.min(150, Math.floor(targetCount * 0.5))) // 50% –æ—Ç —Ü–µ–ª–µ–≤–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞

      // –≠—Ç–∞–ø 2: –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º —Å –≤–µ—Å–∞–º–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
      const keywordResults = await Promise.all(
        keywords.map(async (keyword, index) => {
          const weight = 1 / (index + 1) // –£–±—ã–≤–∞—é—â–∏–π –≤–µ—Å –¥–ª—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
          const limit = Math.floor(targetCount * 0.15 * weight) // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è 50%

          const { data } = await supabase
            .from('supplier_names')
            .select('name')
            .ilike('name', `%${keyword}%`)
            .limit(Math.max(20, limit))

          return { data: data || [], keyword, weight }
        }),
      )

      // –≠—Ç–∞–ø 3: –í–µ–∫—Ç–æ—Ä–Ω–æ–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –≤–µ—Å–æ–≤
      const relevanceMap = new Map<string, number>()

      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –≤–µ—Å–æ–º
      exactMatches?.forEach((item) => {
        relevanceMap.set(item.name, 1.0)
      })

      // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º —Å –≤–µ—Å–∞–º–∏
      keywordResults.forEach(({ data, keyword, weight }) => {
        data.forEach((item) => {
          const currentWeight = relevanceMap.get(item.name) || 0
          const newWeight = Math.max(currentWeight, weight * 0.7) // –ú–∞–∫—Å–∏–º—É–º –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –≤–µ—Å–∞
          relevanceMap.set(item.name, newWeight)
        })
      })

      // –≠—Ç–∞–ø 4: –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –∏ –æ—Ç–±–æ—Ä —Ç–æ–ø-N
      const sortedSuppliers = Array.from(relevanceMap.entries())
        .sort(([, weightA], [, weightB]) => weightB - weightA) // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –≤–µ—Å–∞
        .slice(0, targetCount)
        .map(([name]) => name)

      console.log(
        `üéØ ML –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: –û—Ç–æ–±—Ä–∞–Ω–æ ${sortedSuppliers.length} –∑–∞–ø–∏—Å–µ–π —Å –≤–µ—Å–∞–º–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏`,
      )

      // –ï—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–∞–ø–∏—Å–µ–π, –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ
      if (sortedSuppliers.length < targetCount * 0.7) {
        console.log('üîç ML: –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–≤–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞')

        const { data: additionalSuppliers } = await supabase
          .from('supplier_names')
          .select('name')
          .order('name')
          .limit(targetCount - sortedSuppliers.length)

        if (additionalSuppliers) {
          const existingNames = new Set(sortedSuppliers)
          const newSuppliers = additionalSuppliers
            .map((s) => s.name)
            .filter((name) => !existingNames.has(name))

          sortedSuppliers.push(...newSuppliers)
        }
      }

      return sortedSuppliers.slice(0, targetCount)
    } catch (error) {
      console.error('üî¥ ML –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: –û—à–∏–±–∫–∞ –æ—Ç–±–æ—Ä–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤:', error)

      // Fallback: –±–∞–∑–æ–≤—ã–π –ø–æ–∏—Å–∫
      const { data: fallbackSuppliers } = await supabase
        .from('supplier_names')
        .select('name')
        .limit(targetCount)

      return fallbackSuppliers?.map((s) => s.name) || []
    }
  },

  /**
   * –ü–û–°–¢–†–û–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–û–ì–û –ü–†–û–ú–ü–¢–ê –° –ü–†–ï–î–û–¢–û–ë–†–ê–ù–ù–´–ú–ò –ó–ê–ü–ò–°–Ø–ú–ò
   * –≠—Ç–∞–ø 2: AI –∞–Ω–∞–ª–∏–∑ —Ç–æ–ª—å–∫–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –æ—Ç ML –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
   */
  async buildUserPrompt(request: DeepseekMaterialRequest): Promise<string> {
    const maxSuggestions = request.preferences?.max_suggestions || 5
    console.log(
      `üîç Deepseek: –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç —Å –ø—Ä–µ–¥–æ—Ç–æ–±—Ä–∞–Ω–Ω—ã–º–∏ –∑–∞–ø–∏—Å—è–º–∏ –¥–ª—è ${maxSuggestions} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`,
    )

    let prompt = `–ú–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: "${request.material_name}"\n\n`

    if (request.context) {
      prompt += '–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞:\n'
      if (request.context.project_type) prompt += `- –¢–∏–ø –ø—Ä–æ–µ–∫—Ç–∞: ${request.context.project_type}\n`
      if (request.context.cost_category)
        prompt += `- –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∑–∞—Ç—Ä–∞—Ç: ${request.context.cost_category}\n`
      if (request.context.cost_type) prompt += `- –¢–∏–ø –∑–∞—Ç—Ä–∞—Ç: ${request.context.cost_type}\n`
      if (request.context.location) prompt += `- –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: ${request.context.location}\n`
      prompt += '\n'
    }

    if (request.preferences) {
      prompt += '–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è:\n'
      if (request.preferences.prefer_eco_friendly) prompt += '- –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —ç–∫–æ–ª–æ–≥–∏—á–Ω—ã–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º\n'
      if (request.preferences.budget_conscious) prompt += '- –£—á–∏—Ç—ã–≤–∞—Ç—å –±—é–¥–∂–µ—Ç\n'
      if (request.preferences.quality_priority) prompt += '- –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∫–∞—á–µ—Å—Ç–≤—É\n'
      if (request.preferences.max_suggestions) {
        prompt += `- ‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –í–µ—Ä–Ω–∏ —Ä–æ–≤–Ω–æ ${request.preferences.max_suggestions} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –±–µ–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏–π!\n`
        prompt += `- ‚ö†Ô∏è –ö–ê–ß–ï–°–¢–í–ï–ù–ù–´–ô –§–û–†–ú–ê–¢: –∏—Å–ø–æ–ª—å–∑—É–π –ø–æ–ª–Ω—ã–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –∫–∞–∂–¥–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n`
        prompt += `- ‚ö†Ô∏è –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û: –∑–∞–≤–µ—Ä—à–∞–π JSON –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –±–µ–∑ –æ–±—Ä—ã–≤–æ–≤ –∏ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫\n`
      }
      prompt += '\n'
    }

    // –ù–û–í–´–ô –ê–õ–ì–û–†–ò–¢–ú: –ò—Å–ø–æ–ª—å–∑—É–µ–º ML –ø—Ä–µ–¥–æ—Ç–æ–±—Ä–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
    try {
      console.log('ü§ñ Deepseek: –ó–∞–ø—É—Å–∫ ML –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–±–æ—Ä–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤')

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –≤—ã–±–æ—Ä–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      const targetSupplierCount = Math.min(500, Math.max(100, maxSuggestions * 20))

      // –≠—Ç–∞–ø 1: ML –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –æ—Ç–±–æ—Ä –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
      const relevantSuppliers = await this.selectRelevantSuppliers(
        request.material_name,
        targetSupplierCount,
      )

      if (relevantSuppliers.length > 0) {
        prompt += `–ü–†–ï–î–û–¢–û–ë–†–ê–ù–ù–´–ï ML –í–ï–ö–¢–û–†–ò–ó–ê–¶–ò–ï–ô –†–ï–õ–ï–í–ê–ù–¢–ù–´–ï –ü–û–°–¢–ê–í–©–ò–ö–ò (${relevantSuppliers.length} –∑–∞–ø–∏—Å–µ–π):\n`
        prompt += relevantSuppliers.map((name) => `- ${name}`).join('\n')
        prompt += '\n\n'
        console.log(`üéØ Deepseek: –ò—Å–ø–æ–ª—å–∑—É–µ–º ${relevantSuppliers.length} –ø—Ä–µ–¥–æ—Ç–æ–±—Ä–∞–Ω–Ω—ã—Ö ML –∑–∞–ø–∏—Å–µ–π`)
      }

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—É—é –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—É –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
      const { data: nomenclature } = await supabase
        .from('nomenclature')
        .select('name')
        .ilike('name', `%${request.material_name}%`)
        .limit(20)

      if (nomenclature && nomenclature.length > 0) {
        prompt += '–†–ï–§–ï–†–ï–ù–°–ù–ê–Ø –ù–û–ú–ï–ù–ö–õ–ê–¢–£–†–ê –î–õ–Ø –°–†–ê–í–ù–ï–ù–ò–Ø:\n'
        prompt += nomenclature.map((n) => `- ${n.name}`).join('\n')
        prompt += '\n\n'
      }
    } catch (error) {
      console.error('üî¥ Deepseek: –û—à–∏–±–∫–∞ ML –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback:', error)

      // Fallback –∫ —Å—Ç–∞—Ä–æ–º—É –∞–ª–≥–æ—Ä–∏—Ç–º—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      const { data: fallbackSuppliers } = await supabase
        .from('supplier_names')
        .select('name')
        .limit(200)

      if (fallbackSuppliers && fallbackSuppliers.length > 0) {
        prompt += '–î–û–°–¢–£–ü–ù–´–ï –ü–û–°–¢–ê–í–©–ò–ö–ò (fallback —Ä–µ–∂–∏–º):\n'
        prompt += fallbackSuppliers.map((s) => `- ${s.name}`).join('\n')
        prompt += '\n\n'
      }
    }

    prompt +=
      '–ó–ê–î–ê–ß–ê: –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –∏ –ø–æ–¥–±–µ—Ä–∏ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¢–û–õ–¨–ö–û –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–æ—Ç–æ–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤. –ù–µ –∏–∑–æ–±—Ä–µ—Ç–∞–π –Ω–æ–≤—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è - –∏—Å–ø–æ–ª—å–∑—É–π —Ç–æ—á–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ.'

    return prompt
  },

  /**
   * –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –ö–õ–Æ–ß–ï–í–´–• –°–õ–û–í –ò–ó –ù–ê–ó–í–ê–ù–ò–Ø –ú–ê–¢–ï–†–ò–ê–õ–ê
   * –í—ã–¥–µ–ª—è–µ—Ç –≤–∞–∂–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –¥–ª—è —É–º–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
   */
  extractMaterialKeywords(materialName: string): string[] {
    // –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç —Å–ª—É–∂–µ–±–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    const cleaned = materialName
      .toLowerCase()
      .replace(/[^\w\s–∞-—è—ë]/g, ' ') // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫—Ä–æ–º–µ –±—É–∫–≤, —Ü–∏—Ñ—Ä –∏ –ø—Ä–æ–±–µ–ª–æ–≤
      .replace(/\s+/g, ' ') // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
      .trim()

    // –£–õ–£–ß–®–ï–ù–ù–´–ô —Å–ø–∏—Å–æ–∫ —Å—Ç–æ–ø-—Å–ª–æ–≤ (–æ–±—â–∏–µ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø–æ–º–æ–≥–∞—é—Ç –≤ –ø–æ–∏—Å–∫–µ)
    const stopWords = new Set([
      '–∏',
      '–≤',
      '–Ω–∞',
      '—Å',
      '–ø–æ',
      '–¥–ª—è',
      '–æ—Ç',
      '–¥–æ',
      '–∏–∑',
      '–∫',
      '–æ',
      '—É',
      '–∑–∞',
      '–ø–æ–¥',
      '–Ω–∞–¥',
      '–ø—Ä–∏',
      '–±–µ–∑',
      '–º–º',
      '—Å–º',
      '–º',
      '–∫–≥',
      '–≥',
      '—à—Ç',
      '–ª',
      '–º2',
      '–º3',
      '–∫–≤',
      '–∫—É–±',
      '—à—Ç—É–∫',
      '–ª–∏—Ç—Ä',
      '–º–µ—Ç—Ä',
      '–º–µ—Ç–∞',
      '–≥–æ—Å—Ç',
      '—Ç—É',
      '—Å—Ç—É',
      '–¥–∏–Ω',
      'din',
      'iso',
      '–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞',
      '—Å–µ—Ä–∏—è',
      '–∞—Ä—Ç–∏–∫—É–ª',
      '–∫–æ–¥',
      '—Ç–∏–ø',
      '—Ç–∏–ø–∞',
      '–∫–ª–∞—Å—Å',
      '–º–∞—Ä–∫–∞',
      '—Ä–∞–∑–º–µ—Ä',
      '–¥–ª–∏–Ω–∞',
      '—à–∏—Ä–∏–Ω–∞',
      '–≤—ã—Å–æ—Ç–∞',
      '—Ç–æ–ª—â–∏–Ω–∞',
      '–¥–∏–∞–º–µ—Ç—Ä',
    ])

    // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–ª–æ–≤–∞ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º
    const words = cleaned
      .split(' ')
      .filter((word) => word.length >= 3) // –ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞
      .filter((word) => !stopWords.has(word)) // –£–±–∏—Ä–∞–µ–º —Å—Ç–æ–ø-—Å–ª–æ–≤–∞
      .filter((word) => !/^\d+$/.test(word)) // –£–±–∏—Ä–∞–µ–º —á–∏—Å—Ç–æ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è

    // –†–ê–°–®–ò–†–ï–ù–ù–´–ô —Å–ø–∏—Å–æ–∫ –≤–∞–∂–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∏—Å–∫–∞
    const materialCategories = [
      // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–æ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
      '–∞—Ä–º–∞—Ç—É—Ä–∞',
      '–±–µ—Ç–æ–Ω',
      '–∂–µ–ª–µ–∑–æ–±–µ—Ç–æ–Ω',
      '–∫–∏—Ä–ø–∏—á',
      '–±–ª–æ–∫',
      '–ø–ª–∏—Ç–∞',
      '–ø–∞–Ω–µ–ª—å',
      '–ø—Ä–æ—Ñ–∏–ª—å',
      '—Ç—Ä—É–±–∞',
      '–ª–∏—Å—Ç',
      '–±–∞–ª–∫–∞',
      '—Ä–∏–≥–µ–ª—å',
      '–∫–æ–ª–æ–Ω–Ω–∞',
      '–ø–ª–∏—Ç—ã',
      '—Å–≤–∞–∏',
      '—Ñ—É–Ω–¥–∞–º–µ–Ω—Ç',
      '–ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ',

      // –ò–∑–æ–ª—è—Ü–∏–æ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
      '—Ç–µ–ø–ª–æ–∏–∑–æ–ª—è—Ü–∏—è',
      '—É—Ç–µ–ø–ª–∏—Ç–µ–ª—å',
      '–∏–∑–æ–ª—è—Ü–∏—è',
      '–≥–∏–¥—Ä–æ–∏–∑–æ–ª—è—Ü–∏—è',
      '–ø–∞—Ä–æ–∏–∑–æ–ª—è—Ü–∏—è',
      '–∑–≤—É–∫–æ–∏–∑–æ–ª—è—Ü–∏—è',
      '–º–∏–Ω–≤–∞—Ç–∞',
      '–ø–µ–Ω–æ–ø–ª–∞—Å—Ç',
      '–ø–µ–Ω–æ–ø–æ–ª–∏—Å—Ç–∏—Ä–æ–ª',
      '–±–∞–∑–∞–ª—å—Ç',
      '—Å—Ç–µ–∫–ª–æ–≤–∞—Ç–∞',
      '—ç–∫–æ–≤–∞—Ç–∞',

      // –°–≤—è–∑—É—é—â–∏–µ –∏ –æ—Ç–¥–µ–ª–æ—á–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
      '—Ü–µ–º–µ–Ω—Ç',
      '—Ä–∞—Å—Ç–≤–æ—Ä',
      '—Å–º–µ—Å—å',
      '–∫–ª–µ–π',
      '–≥–µ—Ä–º–µ—Ç–∏–∫',
      '–∫—Ä–∞—Å–∫–∞',
      '–≥—Ä—É–Ω—Ç',
      '—à–ø–∞–∫–ª–µ–≤–∫–∞',
      '—à—Ç—É–∫–∞—Ç—É—Ä–∫–∞',
      '–º–∞—Å—Ç–∏–∫–∞',
      '–∑–∞—Ç–∏—Ä–∫–∞',
      '—à–ø–∞—Ç–ª–µ–≤–∫–∞',
      '—ç–º–∞–ª—å',
      '–ª–∞–∫',
      '–ø—Ä–æ–ø–∏—Ç–∫–∞',

      // –ö—Ä–æ–≤–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
      '–∫—Ä–æ–≤–ª—è',
      '—á–µ—Ä–µ–ø–∏—Ü–∞',
      '–º–µ–º–±—Ä–∞–Ω–∞',
      '—Ä—É–±–µ—Ä–æ–∏–¥',
      '–±–∏—Ç—É–º',
      '–æ–Ω–¥—É–ª–∏–Ω',
      '–º–µ—Ç–∞–ª–ª–æ—á–µ—Ä–µ–ø–∏—Ü–∞',
      '–ø—Ä–æ—Ñ–Ω–∞—Å—Ç–∏–ª',
      '—à–∏—Ñ–µ—Ä',
      '–≥–∏–±–∫–∞—è',
      '—Ñ–∞–ª—å—Ü–µ–≤–∞—è',

      // –°—Ç–æ–ª—è—Ä–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è
      '—Å—Ç–µ–∫–ª–æ',
      '–æ–∫–Ω–æ',
      '–¥–≤–µ—Ä—å',
      '—Ä–∞–º–∞',
      '—Å—Ç–≤–æ—Ä–∫–∞',
      '—Ñ—É—Ä–Ω–∏—Ç—É—Ä–∞',
      '—Å—Ç–µ–∫–ª–æ–ø–∞–∫–µ—Ç',
      '–ø–æ–¥–æ–∫–æ–Ω–Ω–∏–∫',
      '–Ω–∞–ª–∏—á–Ω–∏–∫',
      '–æ—Ç–∫–æ—Å',
      '–ø–æ—Ä–æ–≥',
      '–∫–æ—Ä–æ–±–∫–∞',
      '–ø–æ–ª–æ—Ç–Ω–æ',

      // –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ —Ç–∏–ø—É
      '—Å—Ç–∞–ª—å',
      '–∞–ª—é–º–∏–Ω–∏–π',
      '–ø–ª–∞—Å—Ç–∏–∫',
      '–¥–µ—Ä–µ–≤–æ',
      '–º–µ—Ç–∞–ª–ª',
      '–∫–æ–º–ø–æ–∑–∏—Ç',
      '–ø–æ–ª–∏–º–µ—Ä',
      '–∫–µ—Ä–∞–º–∏–∫–∞',
      '—Å—Ç–µ–∫–ª–æ–ø–ª–∞—Å—Ç–∏–∫',
      '—Ñ–∏–±—Ä–æ—Ü–µ–º–µ–Ω—Ç',
      '–≥–∏–ø—Å–æ–∫–∞—Ä—Ç–æ–Ω',
      '–æ—Å–±',
      '–¥—Å–ø',
      '–º–¥—Ñ',
      '—Ñ–∞–Ω–µ—Ä–∞',
    ]

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –ø–æ–≤—ã—à–µ–Ω–Ω—ã–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
    const categories = words.filter((word) =>
      materialCategories.some((cat) => word.includes(cat) || cat.includes(word)),
    )

    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ–±—ã—á–Ω—ã–µ —Å–ª–æ–≤–∞ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏
    const allKeywords = [...new Set([...categories, ...words])]

    // –£–õ–£–ß–®–ï–ù–û: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ø-8 –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∏—Å–∫–∞
    return allKeywords.slice(0, 8)
  },

  /**
   * –ü–ê–†–°–ò–ù–ì –†–ê–°–®–ò–†–ï–ù–ù–û–ì–û –û–¢–í–ï–¢–ê –û–¢ AI
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ –∞–Ω–∞–ª–∏–∑ –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
   *
   * –ü–ê–¢–¢–ï–†–ù –î–õ–Ø –ö–û–ü–ò–†–û–í–ê–ù–ò–Ø: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ AI –∞–Ω–∞–ª–∏–∑–∞ —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–ø–æ–∏—Å–∫–æ–º
   */
  async parseAIResponse(
    aiResponse: string,
    originalMaterial: string,
  ): Promise<{
    material_analysis?: DeepseekMaterialResponse['material_analysis']
    recommendations: DeepseekMaterialResponse['recommendations']
    debugInfo?: {
      cleanedResponse: string
      cleanedResponseLength: number
      jsonExtractionMethod: string
      jsonFixApplied: boolean
      jsonErrorPosition?: number
      jsonErrorMessage?: string
      fallbackUsed: boolean
    }
  }> {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    const debugInfo = {
      cleanedResponse: '',
      cleanedResponseLength: 0,
      jsonExtractionMethod: 'direct',
      jsonFixApplied: false,
      fallbackUsed: false,
    }

    try {
      // LOG: –¥–µ—Ç–∞–ª—å–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ AI
      console.log('üîç AI Response Analysis:', {
        totalLength: aiResponse.length,
        firstChars: aiResponse.substring(0, 100),
        lastChars: aiResponse.substring(aiResponse.length - 100),
        containsBraces: aiResponse.includes('{') && aiResponse.includes('}'),
      })

      // –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç markdown –±–ª–æ–∫–æ–≤ –∏ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
      let cleanResponse = aiResponse.trim()

      // –£–¥–∞–ª—è–µ–º markdown –±–ª–æ–∫–∏ ```json –∏ ```
      if (cleanResponse.startsWith('```json')) {
        cleanResponse = cleanResponse.replace(/^```json\s*/, '').replace(/```\s*$/, '')
      } else if (cleanResponse.startsWith('```')) {
        cleanResponse = cleanResponse.replace(/^```\s*/, '').replace(/```\s*$/, '')
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ debug
      debugInfo.cleanedResponse = cleanResponse
      debugInfo.cleanedResponseLength = cleanResponse.length

      console.log('üîç Cleaned response:', {
        originalLength: aiResponse.length,
        cleanedLength: cleanResponse.length,
        startsWithBrace: cleanResponse.startsWith('{'),
        endsWithBrace: cleanResponse.endsWith('}'),
      })

      // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å JSON –∏–∑ –æ—á–∏—â–µ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
      let jsonString = cleanResponse

      // –ï—Å–ª–∏ –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å {, –∏—â–µ–º JSON –≤ —Ç–µ–∫—Å—Ç–µ
      if (!jsonString.startsWith('{')) {
        debugInfo.jsonExtractionMethod = 'regex'
        const jsonMatch = cleanResponse.match(/\{[\s\S]*\}/)
        if (!jsonMatch) {
          console.error('ü§ñ Deepseek: JSON –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ AI')
          throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω JSON –≤ –æ—Ç–≤–µ—Ç–µ AI')
        }
        jsonString = jsonMatch[0]
      }

      console.log('üîç Extracted JSON string:', {
        length: jsonString.length,
        preview: jsonString.substring(0, 200) + '...',
        ending: jsonString.substring(jsonString.length - 200),
      })

      // –£–õ–£–ß–®–ï–ù–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –ù–ï–ü–û–õ–ù–û–ì–û JSON
      if (!jsonString.endsWith('}')) {
        console.warn('ü§ñ Deepseek: JSON –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø—Ä–∞–≤–∏—Ç—å')
        debugInfo.jsonFixApplied = true
        debugInfo.jsonExtractionMethod = 'manual_fix'

        // –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –ø–µ—Ä–µ–¥ –æ—à–∏–±–∫–æ–π
        const lastValidPos = jsonString.length

        // –£–ú–ù–ê–Ø –û–ë–†–ï–ó–ö–ê –¥–ª—è –Ω–µ–ø–æ–ª–Ω—ã—Ö —Å—Ç—Ä–æ–∫ JSON
        // –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –ø–µ—Ä–µ–¥ –æ–±—Ä—ã–≤–æ–º —Å—Ç—Ä–æ–∫–∏
        let cutPosition = jsonString.length

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–±—Ä—ã–≤–∞–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–µ—Ä–µ–¥–∏–Ω–µ (–µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–∞—è –∫–∞–≤—ã—á–∫–∞ –±–µ–∑ –∑–∞–∫—Ä—ã—Ç–∏—è)
        let quoteCount = 0
        let lastQuotePos = -1
        let inStringFirst = false // –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ü–∏–∫–ª–∞
        let escapeNextFirst = false // –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ü–∏–∫–ª–∞

        for (let i = 0; i < jsonString.length; i++) {
          const char = jsonString[i]

          if (escapeNextFirst) {
            escapeNextFirst = false
            continue
          }

          if (char === '\\') {
            escapeNextFirst = true
            continue
          }

          if (char === '"') {
            quoteCount++
            lastQuotePos = i
            inStringFirst = !inStringFirst
          }
        }

        // –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –æ–±–æ—Ä–≤–∞–ª–∞—Å—å –≤–Ω—É—Ç—Ä–∏ –∫–∞–≤—ã—á–µ–∫ (–Ω–µ—á–µ—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–≤—ã—á–µ–∫)
        if (quoteCount % 2 !== 0 && lastQuotePos > 0) {
          // –û–±—Ä–µ–∑–∞–µ–º –¥–æ –Ω–∞—á–∞–ª–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –Ω–µ–∑–∞–∫—Ä—ã—Ç–æ–π —Å—Ç—Ä–æ–∫–∏
          cutPosition = jsonString.lastIndexOf(',', lastQuotePos)
          if (cutPosition === -1) {
            cutPosition = jsonString.lastIndexOf('{', lastQuotePos)
          }
          if (cutPosition === -1) {
            cutPosition = jsonString.lastIndexOf('[', lastQuotePos)
          }
          console.log(`üîß –û–±—Ä–µ–∑–∞–µ–º –¥–æ –ø–æ–∑–∏—Ü–∏–∏ ${cutPosition} –∏–∑-–∑–∞ –Ω–µ–∑–∞–∫—Ä—ã—Ç–æ–π —Å—Ç—Ä–æ–∫–∏`)
          jsonString = jsonString.substring(0, cutPosition)
        } else {
          // –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∑–∞–ø—è—Ç—É—é –∏–ª–∏ —Å–∫–æ–±–∫—É
          const lastComma = jsonString.lastIndexOf(',')
          const lastBrace = jsonString.lastIndexOf('}')
          const lastBracket = jsonString.lastIndexOf(']')

          if (lastComma > lastBrace && lastComma > lastBracket) {
            // –û–±—Ä–µ–∑–∞–µ–º –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø—è—Ç–æ–π
            jsonString = jsonString.substring(0, lastComma)
            console.log('üîß –û–±—Ä–µ–∑–∞–µ–º –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø—è—Ç–æ–π')
          } else if (lastBrace > lastBracket) {
            // –û–±—Ä–µ–∑–∞–µ–º –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π —Å–∫–æ–±–∫–∏ –æ–±—ä–µ–∫—Ç–∞
            jsonString = jsonString.substring(0, lastBrace + 1)
            console.log('üîß –û–±—Ä–µ–∑–∞–µ–º –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π —Å–∫–æ–±–∫–∏ –æ–±—ä–µ–∫—Ç–∞')
          }
        }

        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ —Å–∫–æ–±–∫–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        let braceCount = 0
        let bracketCount = 0
        let inStringState = false // –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥—Ä—É–≥–æ–µ –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        let escapeNextChar = false // –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥—Ä—É–≥–æ–µ –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π

        for (let i = 0; i < jsonString.length; i++) {
          const char = jsonString[i]

          if (escapeNextChar) {
            escapeNextChar = false
            continue
          }

          if (char === '\\') {
            escapeNextChar = true
            continue
          }

          if (char === '"' && !escapeNextChar) {
            inStringState = !inStringState
            continue
          }

          if (!inStringState) {
            if (char === '{') braceCount++
            else if (char === '}') braceCount--
            else if (char === '[') bracketCount++
            else if (char === ']') bracketCount--
          }
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ —Å–∫–æ–±–∫–∏
        while (bracketCount > 0) {
          jsonString += ']'
          bracketCount--
        }
        while (braceCount > 0) {
          jsonString += '}'
          braceCount--
        }

        console.log('üîç JSON –∏—Å–ø—Ä–∞–≤–ª–µ–Ω, –Ω–æ–≤–∞—è –¥–ª–∏–Ω–∞:', jsonString.length)
      }

      // –£–õ–£–ß–®–ï–ù–ù–ê–Ø –û–ß–ò–°–¢–ö–ê JSON
      // –£–±–∏—Ä–∞–µ–º –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
      jsonString = jsonString.replace(/,(\s*[}\]])/g, '$1') // —É–±–∏—Ä–∞–µ–º trailing –∑–∞–ø—è—Ç—ã–µ
      jsonString = jsonString.replace(/:\s*(\d+(?:\.\d+)?)\]/g, ': $1') // –∏—Å–ø—Ä–∞–≤–ª—è–µ–º "score": 7.8] -> "score": 7.8
      jsonString = jsonString.replace(/\]\s*}/g, '}') // —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ ] –ø–µ—Ä–µ–¥ }

      console.log('üîß JSON –ø–æ—Å–ª–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏:', {
        length: jsonString.length,
        lastChars: jsonString.substring(jsonString.length - 100),
      })

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—á–µ–≤–∏–¥–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å JSON –ø–µ—Ä–µ–¥ –ø–∞—Ä—Å–∏–Ω–≥–æ–º
      if (jsonString.length > 100000) {
        console.warn('ü§ñ Deepseek: –û—á–µ–Ω—å –±–æ–ª—å—à–æ–π JSON –æ—Ç–≤–µ—Ç:', jsonString.length, '—Å–∏–º–≤–æ–ª–æ–≤')
      }

      let parsed
      try {
        parsed = JSON.parse(jsonString)
      } catch (jsonError) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
        debugInfo.jsonErrorMessage = jsonError.message
        debugInfo.fallbackUsed = true

        if (jsonError.message.includes('position')) {
          const match = jsonError.message.match(/position (\d+)/)
          if (match) {
            debugInfo.jsonErrorPosition = parseInt(match[1])
          }
        }

        console.error('ü§ñ Deepseek: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', {
          error: jsonError,
          jsonLength: jsonString.length,
          lastChars: jsonString.substring(jsonString.length - 100),
        })

        // –£–õ–£–ß–®–ï–ù–ù–ê–Ø FALLBACK –õ–û–ì–ò–ö–ê
        console.log('üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ JSON –ø–∞—Ä—Å–∏–Ω–≥–∞')

        // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —Ö–æ—Ç—è –±—ã —á–∞—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–≥–æ JSON
        let partialRecommendations = []
        try {
          // –ò—â–µ–º –º–∞—Å—Å–∏–≤ recommendations –≤ —Ç–µ–∫—Å—Ç–µ
          const recMatch = jsonString.match(/"recommendations":\s*\[([\s\S]*?)(?:\]|\}|$)/i)
          if (recMatch) {
            // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
            const recText = recMatch[1]
            const nomenclatureMatches = recText.match(/"nomenclature_name":\s*"([^"]+)"/g) || []
            const supplierMatches = recText.match(/"supplier_name":\s*"([^"]+)"/g) || []
            const confidenceMatches = recText.match(/"confidence":\s*([0-9.]+)/g) || []

            const maxRecs = Math.min(
              Math.max(nomenclatureMatches.length, supplierMatches.length),
              5,
            )
            for (let i = 0; i < maxRecs; i++) {
              const nomenclature =
                nomenclatureMatches[i]?.match(/"([^"]+)"/)?.[1] ||
                `${originalMaterial} (–≤–∞—Ä–∏–∞–Ω—Ç ${i + 1})`
              const supplier =
                supplierMatches[i]?.match(/"([^"]+)"/)?.[1] || '–¢—Ä–µ–±—É–µ—Ç—Å—è —É—Ç–æ—á–Ω–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞'
              const confidence = parseFloat(confidenceMatches[i]?.match(/([0-9.]+)/)?.[1] || '0.5')

              partialRecommendations.push({
                nomenclature_name: nomenclature,
                supplier_name: supplier,
                confidence: confidence,
                reasoning: '–ß–∞—Å—Ç–∏—á–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–∑ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–≥–æ JSON',
                price_analysis: '–¶–µ–Ω–∞ —É—Ç–æ—á–Ω—è–µ—Ç—Å—è',
                quality_score: 6.0,
                characteristics_match: '–ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ',
                tooltip_info: `${nomenclature} (${supplier})`,
              })
            }
          }
        } catch (extractError) {
          console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —á–∞—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', extractError)
        }

        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –Ω–∏—á–µ–≥–æ, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π fallback
        if (partialRecommendations.length === 0) {
          partialRecommendations = [
            {
              nomenclature_name: originalMaterial,
              supplier_name: '–¢—Ä–µ–±—É–µ—Ç—Å—è —É—Ç–æ—á–Ω–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞',
              confidence: 0.5,
              reasoning: '–ò—Å—Ö–æ–¥–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –∏–∑ –∑–∞–ø—Ä–æ—Å–∞',
              price_analysis: '–¶–µ–Ω–∞ —É—Ç–æ—á–Ω—è–µ—Ç—Å—è',
              quality_score: 5.0,
              characteristics_match: '–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–ø—Ä–æ—Å—É',
              tooltip_info: `–ú–∞—Ç–µ—Ä–∏–∞–ª: ${originalMaterial}`,
            },
          ]
        }

        // –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é fallback —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        const simpleFallback = {
          material_analysis: {
            found_online: false,
            characteristics: '–ê–Ω–∞–ª–∏–∑ –ø—Ä–µ—Ä–≤–∞–Ω –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ AI',
            applications: originalMaterial,
            market_price_range: '–¢—Ä–µ–±—É–µ—Ç—Å—è —É—Ç–æ—á–Ω–µ–Ω–∏–µ',
          },
          recommendations: partialRecommendations,
        }

        console.log('üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback JSON —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å –∏—Å—Ö–æ–¥–Ω—ã–º –º–∞—Ç–µ—Ä–∏–∞–ª–æ–º')
        parsed = simpleFallback
      }

      if (!parsed.recommendations || !Array.isArray(parsed.recommendations)) {
        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ AI')
      }

      // –ò–∑–≤–ª–µ–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
      const materialAnalysis = parsed.material_analysis
        ? {
            found_online: Boolean(parsed.material_analysis.found_online),
            characteristics:
              parsed.material_analysis.characteristics || '–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã',
            applications: parsed.material_analysis.applications || '–°—Ñ–µ—Ä—ã –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã',
            market_price_range: parsed.material_analysis.market_price_range || '–¶–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã',
          }
        : undefined

      // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏ –¥–æ–ø–æ–ª–Ω—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
      const recommendations = parsed.recommendations.map((rec: any, index: number) => ({
        nomenclature_id: rec.nomenclature_id || `ai-suggestion-${Date.now()}-${index}`,
        nomenclature_name: rec.nomenclature_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
        supplier_name: rec.supplier_name || null,
        confidence: Math.max(0, Math.min(1, rec.confidence || 0.5)),

        // –†–ê–°–®–ò–†–ï–ù–ù–´–ï –ü–û–õ–Ø –î–õ–Ø AI –ê–ù–ê–õ–ò–ó–ê
        price_analysis: rec.price_analysis || '–ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
        quality_score: rec.quality_score ? Math.max(1, Math.min(10, rec.quality_score)) : undefined,
        characteristics_match:
          rec.characteristics_match || '–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ',
        reasoning: rec.reasoning || '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –æ—Ç AI',
        tooltip_info: rec.tooltip_info || rec.nomenclature_name, // Fallback –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ

        alternative_names: Array.isArray(rec.alternative_names) ? rec.alternative_names : [],
      }))

      return {
        material_analysis: materialAnalysis,
        recommendations,
        debugInfo,
      }
    } catch (error) {
      console.error('ü§ñ Deepseek: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ AI:', error)

      // Fallback: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
      debugInfo.fallbackUsed = true
      return {
        recommendations: [
          {
            nomenclature_id: `fallback-${Date.now()}`,
            nomenclature_name: originalMaterial,
            confidence: 0.3,
            reasoning: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç AI, –≤–æ–∑–≤—Ä–∞—â–µ–Ω –∏—Å—Ö–æ–¥–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª',
            tooltip_info: `–ú–∞—Ç–µ—Ä–∏–∞–ª: ${originalMaterial}`,
            alternative_names: [],
          },
        ],
        debugInfo,
      }
    }
  },

  /**
   * ===============================
   * –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø
   * ===============================
   */

  /**
   * –ü–û–õ–£–ß–ï–ù–ò–ï –°–¢–ê–¢–ò–°–¢–ò–ö–ò –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞—Å—Ö–æ–¥–µ —Ç–æ–∫–µ–Ω–æ–≤, –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
   */
  async getUsageStats(): Promise<DeepseekUsageStats | null> {
    if (!supabase) throw new Error('Supabase client not initialized')

    try {
      const { data, error } = await supabase.from('deepseek_usage_stats').select('*').single()

      if (error && error.code !== 'PGRST116') {
        console.error('Failed to fetch Deepseek usage stats:', error)
        throw error
      }

      return data as DeepseekUsageStats | null
    } catch (error) {
      console.error('Error getting Deepseek usage stats:', error)
      return null
    }
  },

  /**
   * –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–¢–ê–¢–ò–°–¢–ò–ö–ò –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø
   * –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤, –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å
   */
  async updateUsageStats(
    inputTokens: number,
    outputTokens: number,
    success: boolean,
  ): Promise<void> {
    if (!supabase) return

    try {
      // –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å Deepseek (–Ω—É–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã)
      const INPUT_TOKEN_COST = 0.00014 / 1000 // $0.14 per 1K tokens
      const OUTPUT_TOKEN_COST = 0.00028 / 1000 // $0.28 per 1K tokens

      const requestCost = inputTokens * INPUT_TOKEN_COST + outputTokens * OUTPUT_TOKEN_COST

      const { data: existing } = await supabase.from('deepseek_usage_stats').select('*').single()

      const now = new Date().toISOString()

      if (existing) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        await supabase
          .from('deepseek_usage_stats')
          .update({
            requests_count: existing.requests_count + 1,
            tokens_input: existing.tokens_input + inputTokens,
            tokens_output: existing.tokens_output + outputTokens,
            total_cost: existing.total_cost + requestCost,
            successful_requests: success
              ? existing.successful_requests + 1
              : existing.successful_requests,
            failed_requests: success ? existing.failed_requests : existing.failed_requests + 1,
            last_request_at: now,
            updated_at: now,
          })
          .eq('id', existing.id)
      } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        await supabase.from('deepseek_usage_stats').insert({
          requests_count: 1,
          tokens_input: inputTokens,
          tokens_output: outputTokens,
          total_cost: requestCost,
          successful_requests: success ? 1 : 0,
          failed_requests: success ? 0 : 1,
          last_request_at: now,
          created_at: now,
          updated_at: now,
        })
      }
    } catch (error) {
      console.error('Error updating Deepseek usage stats:', error)
      // –ù–µ –±—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å
    }
  },

  /**
   * –°–ë–†–û–° –°–¢–ê–¢–ò–°–¢–ò–ö–ò
   * –û–±–Ω—É–ª—è–µ—Ç –≤—Å–µ —Å—á–µ—Ç—á–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
   */
  async resetUsageStats(): Promise<void> {
    if (!supabase) throw new Error('Supabase client not initialized')

    try {
      const { data: existing } = await supabase.from('deepseek_usage_stats').select('id').single()

      if (existing) {
        await supabase
          .from('deepseek_usage_stats')
          .update({
            requests_count: 0,
            tokens_input: 0,
            tokens_output: 0,
            total_cost: 0,
            successful_requests: 0,
            failed_requests: 0,
            updated_at: new Date().toISOString(),
          })
          .eq('id', existing.id)
      }
    } catch (error) {
      console.error('Error resetting Deepseek usage stats:', error)
      throw error
    }
  },

  /**
   * ===============================
   * –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò AbortSignal
   * ===============================
   */

  /**
   * –°–û–ó–î–ê–ù–ò–ï –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ì–û AbortSignal
   * –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –±–µ–∑ AbortSignal.timeout() –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è browser bugs
   * –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤–Ω–µ—à–Ω–∏–π signal (–æ—Ç React Query) —Å –ø—Ä–æ—Å—Ç—ã–º setTimeout
   */
  createCombinedSignal(externalSignal?: AbortSignal, timeoutMs?: number): AbortSignal {
    // –ï—Å–ª–∏ –Ω–µ—Ç –≤–Ω–µ—à–Ω–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –∏ –Ω–µ—Ç —Ç–∞–π–º–∞—É—Ç–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
    if (!externalSignal && !timeoutMs) {
      return new AbortController().signal
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –≤–Ω–µ—à–Ω–∏–π —Å–∏–≥–Ω–∞–ª
    if (externalSignal && !timeoutMs) {
      return externalSignal
    }

    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–ª—è timeout –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π AbortController –≤–º–µ—Å—Ç–æ AbortSignal.timeout()
    if (!externalSignal && timeoutMs) {
      const controller = new AbortController()

      // –ü—Ä–æ—Å—Ç–æ–π setTimeout –±–µ–∑ browser bugs
      const timeoutId = setTimeout(() => {
        console.log(`üîç DEEPSEEK: Manual timeout (${timeoutMs}ms)`) // LOG: manual —Ç–∞–π–º–∞—É—Ç
        controller.abort(new DOMException(`Request timeout after ${timeoutMs}ms`, 'TimeoutError'))
      }, timeoutMs)

      // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–∞—É—Ç –ø—Ä–∏ abort
      controller.signal.addEventListener(
        'abort',
        () => {
          clearTimeout(timeoutId)
        },
        { once: true },
      )

      return controller.signal
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å –∏ –≤–Ω–µ—à–Ω–∏–π —Å–∏–≥–Ω–∞–ª –∏ —Ç–∞–π–º–∞—É—Ç - —Å–æ–∑–¥–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –ë–ï–ó AbortSignal.timeout()
    const controller = new AbortController()

    // –ï—Å–ª–∏ –≤–Ω–µ—à–Ω–∏–π —Å–∏–≥–Ω–∞–ª —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω
    if (externalSignal.aborted) {
      controller.abort(externalSignal.reason)
      return controller.signal
    }

    // –°–ª—É—à–∞–µ–º –æ—Ç–º–µ–Ω—É –≤–Ω–µ—à–Ω–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
    const externalAbortHandler = () => {
      console.log('üîç DEEPSEEK: External signal aborted (React Query cancellation)') // LOG: –æ—Ç–º–µ–Ω–∞ –æ—Ç React Query
      controller.abort(externalSignal.reason)
    }
    externalSignal.addEventListener('abort', externalAbortHandler, { once: true })

    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ—Å—Ç–æ–π setTimeout –≤–º–µ—Å—Ç–æ AbortSignal.timeout()
    const timeoutId = setTimeout(() => {
      console.log(`üîç DEEPSEEK: Combined timeout (${timeoutMs}ms)`) // LOG: –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç
      controller.abort(new DOMException(`Request timeout after ${timeoutMs}ms`, 'TimeoutError'))
    }, timeoutMs)

    // –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ
    controller.signal.addEventListener(
      'abort',
      () => {
        clearTimeout(timeoutId)
        externalSignal.removeEventListener('abort', externalAbortHandler)
      },
      { once: true },
    )

    return controller.signal
  },

  /**
   * ===============================
   * –û–¢–õ–ê–î–û–ß–ù–´–ï –§–£–ù–ö–¶–ò–ò
   * ===============================
   */

  /**
   * –°–û–•–†–ê–ù–ï–ù–ò–ï –†–ê–°–®–ò–†–ï–ù–ù–û–ì–û –û–¢–õ–ê–î–û–ß–ù–û–ì–û –û–¢–í–ï–¢–ê –í –ë–î
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–ø—Ä–æ—Å–µ –∏ –æ—Ç–≤–µ—Ç–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
   */
  async saveDebugResponse(debugData: {
    materialName: string
    maxSuggestions: number
    rawResponse: string | null
    rawResponseLength: number
    cleanedResponse?: string
    cleanedResponseLength?: number
    jsonExtractionMethod?: string
    jsonFixApplied?: boolean
    jsonErrorPosition?: number
    jsonErrorMessage?: string
    fallbackUsed?: boolean
    promptSize?: number
    responseTimeMs?: number
    parsedRecommendations: any[]
    recommendationsCount: number
    processingTimeMs: number
    success: boolean
    errorMessage?: string
    mlMode: string
  }): Promise<void> {
    if (!supabase) return

    try {
      // –í—ã—á–∏—Å–ª—è–µ–º –æ—Ü–µ–Ω–∫—É –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è —É—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
      let qualityScore = null
      let relevanceNotes = null

      if (debugData.success && debugData.parsedRecommendations.length > 0) {
        // –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        const materialKeywords = debugData.materialName
          .toLowerCase()
          .split(' ')
          .filter((word) => word.length >= 3)

        let relevantCount = 0
        for (const rec of debugData.parsedRecommendations) {
          const recName = (rec.nomenclature_name || rec.supplier_name || '').toLowerCase()
          const hasRelevantKeywords = materialKeywords.some((keyword) => recName.includes(keyword))
          if (hasRelevantKeywords) relevantCount++
        }

        qualityScore = relevantCount / debugData.parsedRecommendations.length
        relevanceNotes = `${relevantCount}/${debugData.parsedRecommendations.length} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã`
      }

      const { error } = await supabase.from('ai_debug_responses').insert({
        material_name: debugData.materialName,
        max_suggestions: debugData.maxSuggestions,
        ml_mode: debugData.mlMode,
        raw_response: debugData.rawResponse,
        raw_response_length: debugData.rawResponseLength,
        cleaned_response: debugData.cleanedResponse,
        cleaned_response_length: debugData.cleanedResponseLength,
        json_extraction_method: debugData.jsonExtractionMethod,
        json_fix_applied: debugData.jsonFixApplied,
        json_error_position: debugData.jsonErrorPosition,
        json_error_message: debugData.jsonErrorMessage,
        fallback_used: debugData.fallbackUsed,
        prompt_size: debugData.promptSize,
        response_time_ms: debugData.responseTimeMs,
        parsed_recommendations: debugData.parsedRecommendations,
        recommendations_count: debugData.recommendationsCount,
        processing_time_ms: debugData.processingTimeMs,
        success: debugData.success,
        error_message: debugData.errorMessage,
        quality_score: qualityScore,
        relevance_notes: relevanceNotes,
      })

      if (error) {
        console.warn('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è debug –¥–∞–Ω–Ω—ã—Ö:', error) // LOG: –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è debug
      } else {
        console.log('üîç Debug –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:', {
          material: debugData.materialName,
          success: debugData.success,
          recommendations: debugData.recommendationsCount,
          quality: qualityScore,
        }) // LOG: —É—Å–ø–µ—à–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ debug –¥–∞–Ω–Ω—ã—Ö
      }
    } catch (error) {
      console.warn('–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ debug –¥–∞–Ω–Ω—ã—Ö:', error) // LOG: –∏—Å–∫–ª—é—á–µ–Ω–∏–µ debug
    }
  },
}

/**
 * ===============================
 * ML –†–ï–ñ–ò–ú –£–ü–†–ê–í–õ–ï–ù–ò–Ø
 * ===============================
 */

/**
 * API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∂–∏–º–æ–º —Ä–∞–±–æ—Ç—ã ML —Å–∏—Å—Ç–µ–º—ã
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å—Å—è –º–µ–∂–¥—É –ª–æ–∫–∞–ª—å–Ω—ã–º ML –∏ Deepseek AI
 */
export const mlModeApi = {
  /**
   * –ü–û–õ–£–ß–ï–ù–ò–ï –¢–ï–ö–£–©–ï–ì–û –†–ï–ñ–ò–ú–ê ML
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ localStorage
   */
  async getCurrentMode(): Promise<MLModeConfig> {
    try {
      const saved = localStorage.getItem('ml-mode-config')
      if (saved) {
        return JSON.parse(saved)
      }
    } catch (error) {
      console.error('Error loading ML mode config:', error)
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    return {
      mode: 'local',
      auto_fallback: true,
      cache_deepseek_results: true,
    }
  },

  /**
   * –£–°–¢–ê–ù–û–í–ö–ê –†–ï–ñ–ò–ú–ê ML
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ localStorage
   */
  async setMode(config: Partial<MLModeConfig>): Promise<void> {
    try {
      const current = await this.getCurrentMode()
      const updated = { ...current, ...config }
      localStorage.setItem('ml-mode-config', JSON.stringify(updated))

      console.log('üîÑ ML Mode: –†–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω –Ω–∞', updated.mode)
    } catch (error) {
      console.error('Error saving ML mode config:', error)
      throw error
    }
  },

  /**
   * –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ù–û–°–¢–ò DEEPSEEK
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Deepseek
   */
  async isDeepseekAvailable(): Promise<boolean> {
    try {
      const settings = await deepseekApi.getSettings()
      return settings.enabled && !!settings.api_key
    } catch (error) {
      console.error('Error checking Deepseek availability:', error)
      return false
    }
  },
}

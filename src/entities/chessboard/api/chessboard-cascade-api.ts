import { supabase } from '@/lib/supabase'

export interface SupplierOption {
  id: string
  name: string
}

export interface NomenclatureOption {
  id: string
  name: string
}

/**
 * API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Å–∫–∞–¥–Ω—ã–º–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã –∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –≤ –®–∞—Ö–º–∞—Ç–∫–µ
 */
export const chessboardCascadeApi = {
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–æ–π
   */
  async getSuppliersByNomenclature(nomenclatureId: string): Promise<SupplierOption[]> {
    if (!supabase) throw new Error('Supabase is not configured')
    if (!nomenclatureId) return []

    console.log('üîó Cascade API: –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –¥–ª—è –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã:', nomenclatureId) // LOG: –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –ø–æ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–µ

    const { data, error } = await supabase
      .from('nomenclature_supplier_mapping')
      .select(
        `
        supplier_names!inner(
          id,
          name
        )
      `,
      )
      .eq('nomenclature_id', nomenclatureId)

    if (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –ø–æ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–µ:', error)
      throw error
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏ —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    const suppliers =
      data
        ?.map((item) => item.supplier_names)
        .filter(Boolean)
        .reduce((acc, supplier) => {
          // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ ID
          if (!acc.find((s) => s.id === supplier.id)) {
            acc.push(supplier)
          }
          return acc
        }, [] as SupplierOption[])
        .sort((a, b) => a.name.localeCompare(b.name)) || []

    console.log('üîó Cascade API: –ù–∞–π–¥–µ–Ω–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤:', suppliers.length) // LOG: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤

    return suppliers
  },

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—É –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø–æ—Å—Ç–∞–≤—â–∏–∫—É
   */
  async getNomenclatureBySupplier(supplierId: string): Promise<NomenclatureOption | null> {
    if (!supabase) throw new Error('Supabase is not configured')
    if (!supplierId) return null

    console.log('üîó Cascade API: –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—É –¥–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:', supplierId) // LOG: –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã –ø–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É

    const { data, error } = await supabase
      .from('nomenclature_supplier_mapping')
      .select(
        `
        nomenclature!inner(
          id,
          name
        )
      `,
      )
      .eq('supplier_id', supplierId)
      .limit(1)

    if (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã –ø–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É:', error)
      throw error
    }

    const nomenclature = data?.[0]?.nomenclature || null

    console.log('üîó Cascade API: –ù–∞–π–¥–µ–Ω–∞ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞:', nomenclature?.name || '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞') // LOG: –Ω–∞–π–¥–µ–Ω–Ω–∞—è –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞

    return nomenclature
  },


  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã
   * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ –ø–∞–≥–∏–Ω–∞—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤ –¥–∞–Ω–Ω—ã—Ö
   */
  async getAllNomenclature(): Promise<NomenclatureOption[]> {
    if (!supabase) throw new Error('Supabase is not configured')


    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
    const { count, error: countError } = await supabase
      .from('nomenclature')
      .select('*', { count: 'exact', head: true })

    if (countError) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä:', countError)
      throw countError
    }


    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –ø–∞–≥–∏–Ω–∞—Ü–∏—é
    const allData = []
    const pageSize = 1000
    const totalPages = Math.ceil((count || 0) / pageSize)

    for (let page = 0; page < totalPages; page++) {
      const from = page * pageSize
      const to = from + pageSize - 1

      const { data, error } = await supabase
        .from('nomenclature')
        .select('id, name')
        .order('name')
        .range(from, to)

      if (error) {
        console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${page + 1}:`, error)
        throw error
      }

      if (data && data.length > 0) {
        allData.push(...data)
      }

      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è rate limiting
      if (page < totalPages - 1) {
        await new Promise((resolve) => setTimeout(resolve, 50))
      }
    }


    return allData
  },

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
   * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ –ø–∞–≥–∏–Ω–∞—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤ –¥–∞–Ω–Ω—ã—Ö
   */
  async getAllSuppliers(): Promise<SupplierOption[]> {
    if (!supabase) throw new Error('Supabase is not configured')


    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
    const { count, error: countError } = await supabase
      .from('supplier_names')
      .select('*', { count: 'exact', head: true })

    if (countError) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤:', countError)
      throw countError
    }


    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –ø–∞–≥–∏–Ω–∞—Ü–∏—é
    const allData = []
    const pageSize = 1000
    const totalPages = Math.ceil((count || 0) / pageSize)

    for (let page = 0; page < totalPages; page++) {
      const from = page * pageSize
      const to = from + pageSize - 1

      const { data, error } = await supabase
        .from('supplier_names')
        .select('id, name')
        .order('name')
        .range(from, to)

      if (error) {
        console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${page + 1}:`, error)
        throw error
      }

      if (data && data.length > 0) {
        allData.push(...data)
      }

      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è rate limiting
      if (page < totalPages - 1) {
        await new Promise((resolve) => setTimeout(resolve, 50))
      }
    }


    return allData
  },

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å–≤—è–∑–∞–Ω—ã –ª–∏ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞ –∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫
   */
  async isNomenclatureSupplierLinked(nomenclatureId: string, supplierId: string): Promise<boolean> {
    if (!supabase) throw new Error('Supabase is not configured')
    if (!nomenclatureId || !supplierId) return false

    const { data, error } = await supabase
      .from('nomenclature_supplier_mapping')
      .select('nomenclature_id')
      .eq('nomenclature_id', nomenclatureId)
      .eq('supplier_id', supplierId)
      .limit(1)

    if (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–≤—è–∑–∏ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã –∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:', error)
      return false
    }

    return data && data.length > 0
  },

  /**
   * –°–æ–∑–¥–∞—Ç—å —Å–≤—è–∑—å –º–µ–∂–¥—É –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–æ–π –∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–º
   */
  async createNomenclatureSupplierMapping(
    nomenclatureId: string,
    supplierId: string,
  ): Promise<boolean> {
    if (!supabase) throw new Error('Supabase is not configured')
    if (!nomenclatureId || !supplierId) {
      console.error('üîó Cascade API: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤—è–∑–∏:', {
        nomenclatureId,
        supplierId,
      })
      return false
    }

    console.log('üîó Cascade API: –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑—å –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞-–ø–æ—Å—Ç–∞–≤—â–∏–∫:', {
      nomenclatureId,
      supplierId,
    }) // LOG: —Å–æ–∑–¥–∞–Ω–∏–µ —Å–≤—è–∑–∏ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞-–ø–æ—Å—Ç–∞–≤—â–∏–∫

    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è —Å–≤—è–∑—å
    const existingLink = await this.isNomenclatureSupplierLinked(nomenclatureId, supplierId)
    if (existingLink) {
      console.log('üîó Cascade API: –°–≤—è–∑—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ') // LOG: —Å–≤—è–∑—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      return true
    }

    try {
      const { error } = await supabase.from('nomenclature_supplier_mapping').insert([
        {
          nomenclature_id: nomenclatureId,
          supplier_id: supplierId,
        },
      ])

      if (error) {
        console.error('üîó Cascade API: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤—è–∑–∏ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã –∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:', error)
        return false
      }

      console.log('‚úÖ Cascade API: –°–≤—è–∑—å –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞-–ø–æ—Å—Ç–∞–≤—â–∏–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞') // LOG: —Å–≤—è–∑—å —Å–æ–∑–¥–∞–Ω–∞
      return true
    } catch (error) {
      console.error('üîó Cascade API: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–≤—è–∑–∏:', error)
      return false
    }
  },

  /**
   * –ù–∞–π—Ç–∏ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ (–¥–ª—è ML –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è)
   */
  async getNomenclatureBySupplierName(supplierName: string): Promise<NomenclatureOption | null> {
    if (!supabase) throw new Error('Supabase is not configured')
    if (!supplierName) {
      console.error('üîó Cascade API: –ü—É—Å—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã')
      return null
    }

    console.log('üîó Cascade API: –ü–æ–∏—Å–∫ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:', supplierName) // LOG: –ø–æ–∏—Å–∫ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞

    try {
      // –®–∞–≥ 1: –ù–∞–π—Ç–∏ supplier_id –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –≤ —Ç–∞–±–ª–∏—Ü–µ supplier_names
      const { data: supplierData, error: supplierError } = await supabase
        .from('supplier_names')
        .select('id')
        .eq('name', supplierName)
        .limit(1)
        .single()

      if (supplierError || !supplierData) {
        console.log('üîó Cascade API: –ü–æ—Å—Ç–∞–≤—â–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ supplier_names:', supplierName) // LOG: –ø–æ—Å—Ç–∞–≤—â–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω
        return null
      }

      console.log('üîó Cascade API: –ù–∞–π–¥–µ–Ω supplier_id:', supplierData.id) // LOG: –Ω–∞–π–¥–µ–Ω supplier_id

      // –®–∞–≥ 2: –ù–∞–π—Ç–∏ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—É —á–µ—Ä–µ–∑ mapping —Ç–∞–±–ª–∏—Ü—É
      const { data: mappingData, error: mappingError } = await supabase
        .from('nomenclature_supplier_mapping')
        .select(`
          nomenclature_id,
          nomenclature!inner(
            id,
            name
          )
        `)
        .eq('supplier_id', supplierData.id)
        .limit(1)
        .single()

      if (mappingError || !mappingData) {
        console.log('üîó Cascade API: –ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:', supplierName) // LOG: –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        return null
      }

      const nomenclature = mappingData.nomenclature as { id: string; name: string }
      console.log('‚úÖ Cascade API: –ù–∞–π–¥–µ–Ω–∞ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:', {
        nomenclatureId: nomenclature.id,
        nomenclatureName: nomenclature.name,
        supplierName
      }) // LOG: –Ω–∞–π–¥–µ–Ω–∞ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞

      return {
        value: nomenclature.id,
        label: nomenclature.name
      }

    } catch (error) {
      console.error('üîó Cascade API: –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:', error)
      return null
    }
  },
}

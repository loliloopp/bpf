import React, { useMemo, useCallback, useState, useEffect } from 'react'
import VirtualizedTable from './VirtualizedTable'
import VirtualTableOptimized from './VirtualTableOptimized'
import SmartTableOptimizer from './SmartTableOptimizer'
import { useVirtualizedChessboard } from '../hooks/useVirtualizedChessboard'
import { useScale } from '@/shared/contexts/ScaleContext'

interface ChessboardOptimizedProps {
  originalTable: React.ReactElement
  data: any[]
  columns: any[]
  loading?: boolean
  // –ù–æ–≤—ã–µ –ø—Ä–æ–ø—Å—ã –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  useVirtualization?: boolean
  onVirtualizationChange?: (enabled: boolean) => void
  virtualRowHeight?: number
  performanceMode?: boolean
  onPerformanceModeChange?: (enabled: boolean) => void
  displayRowLimit?: number
  // –ü—Ä–æ–ø—Å—ã –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
  rowsPerPage?: number
  onRowsPerPageChange?: (value: number) => void
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã render —Ñ—É–Ω–∫—Ü–∏–π
  editingRows?: Record<string, any>
  // –ö–ª—é—á –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∞
  forceRerenderKey?: number
}

const ChessboardOptimized: React.FC<ChessboardOptimizedProps> = ({
  originalTable,
  data,
  columns,
  loading,
  useVirtualization: externalUseVirtualization,
  onVirtualizationChange,
  virtualRowHeight = 54,
  performanceMode: externalPerformanceMode,
  onPerformanceModeChange,
  displayRowLimit = 200,
  rowsPerPage,
  onRowsPerPageChange,
  editingRows = {},
  forceRerenderKey = 0,
}) => {
  const { scale } = useScale()

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω–µ—à–Ω–µ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ
  const useVirtualization = externalUseVirtualization ?? false
  const performanceMode = externalPerformanceMode ?? false

  // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–∞—è –≤—ã—Å–æ—Ç–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (75px –¥–ª—è –º–∞—Å—à—Ç–∞–±–∞ 1.0)
  const scaledControlsHeight = useMemo(() => Math.round(75 * scale), [scale])

  const { visibleData, handleVisibleRangeChange, stats } = useVirtualizedChessboard({
    data,
    enabled: useVirtualization,
  })

  // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è –≤–∏—Ä—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏
  const optimizedColumns = useMemo(() => {
    if (!useVirtualization) return columns

    return columns.map((col) => ({
      ...col,
      // –û—Ç–∫–ª—é—á–∞–µ–º —Å–ª–æ–∂–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –≤ —Ä–µ–∂–∏–º–µ –≤–∏—Ä—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏
      filters: performanceMode ? undefined : col.filters,
      filterDropdown: performanceMode ? undefined : col.filterDropdown,
      // –£–ø—Ä–æ—â–∞–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
      sorter: performanceMode ? false : col.sorter,
    }))
  }, [columns, useVirtualization, performanceMode])

  // –£–¥–∞–ª—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è - —Ç–µ–ø–µ—Ä—å –≤—Å–µ —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∏–∑–≤–Ω–µ

  // üö® –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–û: –í–∏—Ä—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–∑–¥–∞—ë—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ SmartTableOptimizer —Å –∂—ë—Å—Ç–∫–∏–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —Å—Ç—Ä–æ–∫
  const shouldUseVirtualization = false // data.length > 500 // –û—Ç–∫–ª—é—á–µ–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω–æ

  // console.log(`üîß ChessboardOptimized: ${data.length} rows, using ${shouldUseVirtualization ? 'VIRTUALIZATION' : 'SMART_TABLE_OPTIMIZED'}`)

  // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
  // if (shouldUseVirtualization) {
  //   console.log('üöÄ Using VirtualTableOptimized for large dataset')
  //   return (
  //     <VirtualTableOptimized
  //       {...originalTable.props}
  //       dataSource={data}
  //       columns={optimizedColumns}
  //       height="calc(100vh - 300px)"
  //       itemHeight={virtualRowHeight}
  //       bufferSize={20}
  //       editingRows={editingRows}
  //       performanceMode={performanceMode}
  //       loading={loading}
  //     />
  //   )
  // }

  // –î–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö –æ–±—ä—ë–º–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º SmartTableOptimizer
  const smartTableProps = {
    ...originalTable.props,
    data,
    columns,
    displayLimit: displayRowLimit,
    performanceMode,
    loading,
    useAdaptiveHeight: true,
    controlsHeight: scaledControlsHeight,
    rowsPerPage,
    onRowsPerPageChange,
    editingRows, // –Ø–≤–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º editingRows –ø–æ—Å–ª–µ–¥–Ω–∏–º
    forceRerenderKey,
  }

  // console.log('üîß SmartTableOptimizer props editingRows:', Object.keys(smartTableProps.editingRows || {}).length > 0 ? Object.keys(smartTableProps.editingRows) : 'empty')

  return (
    <SmartTableOptimizer {...smartTableProps} />
  )

  // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–∏—Ä—Ç—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
  // return (
  //   <VirtualizedTable
  //     columns={optimizedColumns}
  //     dataSource={visibleData}
  //     height={'calc(100vh - 300px)'}
  //     loading={loading}
  //     rowHeight={virtualRowHeight}
  //     sticky
  //     scroll={{ y: 'calc(100vh - 300px)' }}
  //     className="chessboard-virtualized"
  //   />
  // )
}

export default ChessboardOptimized

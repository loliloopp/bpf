import { useState } from 'react'
import { Upload, Button, Space, Typography, Tooltip, App, Dropdown, Modal } from 'antd'
import { UploadOutlined, FileExcelOutlined, FileWordOutlined, FilePdfOutlined, FileOutlined, DeleteOutlined, DownloadOutlined, EyeOutlined } from '@ant-design/icons'
import type { UploadProps } from 'antd/es/upload'
import type { MenuProps } from 'antd'
import type { LocalFile } from '@/entities/documentation'

const { Text } = Typography

interface FileUploadProps {
  files: LocalFile[]
  onChange: (files: LocalFile[]) => void
  disabled?: boolean
  projectId: string
  documentationCode: string
  onlineFileUrl?: string
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é —Ñ–∞–π–ª–∞
const getFileIcon = (extension: string) => {
  const ext = extension.toLowerCase()
  switch (ext) {
    case 'xlsx':
    case 'xls':
      return <FileExcelOutlined style={{ color: '#1D6F42', fontSize: 16 }} />
    case 'docx':
    case 'doc':
      return <FileWordOutlined style={{ color: '#2B579A', fontSize: 16 }} />
    case 'pdf':
      return <FilePdfOutlined style={{ color: '#FF6B6B', fontSize: 16 }} />
    case 'dwg':
      return <FileOutlined style={{ color: '#FF9500', fontSize: 16 }} />
    default:
      return <FileOutlined style={{ color: '#666', fontSize: 16 }} />
  }
}


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—ã–µ —Å–ª—ç—à–∏ –¥–ª—è –≤–µ–±)
const createFilePath = (projectId: string, documentationCode: string, fileName: string): string => {
  return `./Documentation/${projectId}/${documentationCode}/${fileName}`
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ª–æ–∫–∞–ª—å–Ω–æ –≤ –ø–∞–ø–∫—É public
const saveFileLocally = async (file: File, filePath: string, projectId: string, documentationCode: string): Promise<string> => {
  try {
    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (—á–µ—Ä–µ–∑ API –∏–ª–∏ mock)
    const fullPath = `public${filePath}`
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –±—Ä–∞—É–∑–µ—Ä–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω–µ–ª—å–∑—è –Ω–∞–ø—Ä—è–º—É—é –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –≤ —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
    // –≠–º—É–ª–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–æ–∑–¥–∞–Ω–∏–µ blob URL –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É
    const arrayBuffer = await file.arrayBuffer()
    const blob = new Blob([arrayBuffer], { type: file.type })
    const blobUrl = URL.createObjectURL(blob)
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º blob URL –≤ sessionStorage –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
    const fileKey = `file_${projectId}_${documentationCode}_${file.name}`
    sessionStorage.setItem(fileKey, blobUrl)
    
    console.log(`‚úÖ File ${file.name} saved to ${fullPath}`)
    console.log(`üìÅ Local path: C:\\Users\\eugene\\WebstormProjects\\blueprintflow\\public${filePath}`)
    console.log(`üîó Blob URL stored in session: ${blobUrl}`)
    
    return fullPath
  } catch (error) {
    console.error('‚ùå Error saving file:', error)
    throw error
  }
}

export default function FileUpload({ files, onChange, disabled, projectId, documentationCode, onlineFileUrl }: FileUploadProps) {
  const [uploading, setUploading] = useState(false)
  const [previewModalOpen, setPreviewModalOpen] = useState(false)
  const [previewFile, setPreviewFile] = useState<LocalFile | null>(null)
  const [previewUrl, setPreviewUrl] = useState<string>('')
  const { modal, message } = App.useApp()

  const handleUpload: UploadProps['customRequest'] = async (options) => {
    const { file, onSuccess, onError } = options
    
    if (!(file instanceof File)) {
      onError?.(new Error('Invalid file'))
      return
    }

    setUploading(true)

    try {
      const extension = file.name.split('.').pop() || ''
      const filePath = createFilePath(projectId, documentationCode, file.name)

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –ª–æ–∫–∞–ª—å–Ω–æ –∏ –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –ø—É—Ç—å
      const savedPath = await saveFileLocally(file, filePath, projectId, documentationCode)

      // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç LocalFile —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
      const newFile: LocalFile = {
        name: file.name,
        path: savedPath, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å
        size: file.size,
        type: file.type,
        extension,
        uploadedAt: new Date().toISOString(),
      }

      // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º
      const updatedFiles = [...files, newFile]
      onChange(updatedFiles)

      onSuccess?.(null, file as unknown as XMLHttpRequestResponseType)
      
      console.log(`üéâ Upload completed successfully:`, {
        fileName: file.name,
        localPath: `C:\\Users\\eugene\\WebstormProjects\\blueprintflow\\${savedPath}`,
        size: `${(file.size / 1024 / 1024).toFixed(2)} MB`
      })
    } catch (error) {
      console.error('‚ùå Error uploading file:', error)
      onError?.(error as Error)
    } finally {
      setUploading(false)
    }
  }

  const handleRemoveFile = (fileToRemove: LocalFile) => {
    modal.confirm({
      title: '–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª?',
      content: `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª "${fileToRemove.name}"?`,
      okText: '–£–¥–∞–ª–∏—Ç—å',
      cancelText: '–û—Ç–º–µ–Ω–∞',
      okButtonProps: { danger: true },
      onOk: async () => {
        try {
          const updatedFiles = files.filter(f => f.path !== fileToRemove.path)
          // –í—ã–∑—ã–≤–∞–µ–º onChange –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ
          await onChange(updatedFiles)
          
          // –£–¥–∞–ª—è–µ–º blob URL –∏–∑ sessionStorage
          const fileKey = `file_${projectId}_${documentationCode}_${fileToRemove.name}`
          const blobUrl = sessionStorage.getItem(fileKey)
          if (blobUrl) {
            URL.revokeObjectURL(blobUrl)
            sessionStorage.removeItem(fileKey)
          }
          
          message.success(`–§–∞–π–ª "${fileToRemove.name}" —É–¥–∞–ª–µ–Ω`)
          console.log(`üóëÔ∏è File removed: ${fileToRemove.name}`)
        } catch (error) {
          console.error('‚ùå Error removing file:', error)
          message.error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª')
        }
      }
    })
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
  const openFileInModal = async (file: LocalFile) => {
    try {
      const fileKey = `file_${projectId}_${documentationCode}_${file.name}`
      const blobUrl = sessionStorage.getItem(fileKey)
      
      if (blobUrl) {
        const ext = file.extension.toLowerCase()
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –≤ –±—Ä–∞—É–∑–µ—Ä–µ
        if (['pdf', 'xlsx', 'xls', 'docx', 'doc'].includes(ext)) {
          setPreviewFile(file)
          setPreviewUrl(blobUrl)
          setPreviewModalOpen(true)
          console.log(`üëÅÔ∏è Opening file in modal: ${file.name}`)
        } else {
          message.warning(`–§–∞–π–ª —Ñ–æ—Ä–º–∞—Ç–∞ .${ext} –Ω–µ–ª—å–∑—è –æ—Ç–∫—Ä—ã—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ`)
        }
      } else {
        message.error('–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ–≥–æ —Å–Ω–æ–≤–∞.')
      }
    } catch (error) {
      console.error('‚ùå Error opening file:', error)
      message.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª')
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
  const saveFile = (file: LocalFile) => {
    try {
      const fileKey = `file_${projectId}_${documentationCode}_${file.name}`
      const blobUrl = sessionStorage.getItem(fileKey)
      
      if (blobUrl) {
        // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        const link = document.createElement('a')
        link.href = blobUrl
        link.download = file.name
        document.body.appendChild(link)
        link.click()
        document.body.removeChild(link)
        
        message.success(`–§–∞–π–ª "${file.name}" —Å–æ—Ö—Ä–∞–Ω–µ–Ω`)
        console.log(`üíæ File saved: ${file.name}`)
      } else {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –µ—Å–ª–∏ blob URL –Ω–µ –Ω–∞–π–¥–µ–Ω
        modal.info({
          title: '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞',
          content: (
            <div>
              <p><strong>–§–∞–π–ª:</strong> {file.name}</p>
              <p><strong>–õ–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å:</strong></p>
              <code style={{ 
                background: '#f5f5f5', 
                padding: '4px 8px', 
                borderRadius: '4px',
                display: 'block',
                marginTop: '8px',
                wordBreak: 'break-all'
              }}>
                C:\Users\eugene\WebstormProjects\blueprintflow\{file.path}
              </code>
            </div>
          ),
          width: 600,
          okText: 'OK'
        })
      }
    } catch (error) {
      console.error('‚ùå Error saving file:', error)
      message.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª')
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –¥–ª—è —Ñ–∞–π–ª–∞
  const getFileMenuItems = (file: LocalFile): MenuProps['items'] => [
    {
      key: 'open',
      icon: <EyeOutlined />,
      label: '–û—Ç–∫—Ä—ã—Ç—å',
      onClick: () => openFileInModal(file),
    },
    {
      key: 'save',
      icon: <DownloadOutlined />,
      label: '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å',
      onClick: () => saveFile(file),
    },
  ]

  return (
    <div>
      {/* –§–∞–π–ª—ã –∏ —Å—Å—ã–ª–∫–∞ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ */}
      <Space size={4} align="center">
        {/* –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–Ω–ª–∞–π–Ω –¥–æ–∫—É–º–µ–Ω—Ç */}
        {onlineFileUrl && (
          <Tooltip title={onlineFileUrl}>
            <Button 
              type="link" 
              size="small"
              onClick={() => window.open(onlineFileUrl, '_blank')}
              style={{ padding: 0, height: 'auto' }}
            >
              –û—Ç–∫—Ä—ã—Ç—å
            </Button>
          </Tooltip>
        )}
        
        {/* –°–ø–∏—Å–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ - —Ç–æ–ª—å–∫–æ –∏–∫–æ–Ω–∫–∏ */}
        {files.map((file, index) => (
          <Dropdown
            key={index}
            menu={{ items: getFileMenuItems(file) }}
            trigger={['click']}
          >
            <Tooltip title={`${file.name} (${(file.size / 1024).toFixed(1)} KB)`}>
              <div
                style={{
                  display: 'inline-flex',
                  alignItems: 'center',
                  cursor: 'pointer',
                  position: 'relative'
                }}
              >
                {getFileIcon(file.extension)}
                {!disabled && (
                  <Button
                    type="text"
                    size="small"
                    icon={<DeleteOutlined />}
                    onClick={(e) => {
                      e.stopPropagation()
                      handleRemoveFile(file)
                    }}
                    style={{ 
                      position: 'absolute',
                      top: -8,
                      right: -8,
                      minWidth: 'auto',
                      width: '16px',
                      height: '16px',
                      padding: 0,
                      display: 'none',
                      alignItems: 'center',
                      justifyContent: 'center',
                      fontSize: '10px',
                      background: 'white',
                      border: '1px solid #d9d9d9',
                      borderRadius: '50%'
                    }}
                    className="delete-btn"
                  />
                )}
              </div>
            </Tooltip>
          </Dropdown>
        ))}
        
        {/* –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ */}
        {!disabled && (
          <Upload
            customRequest={handleUpload}
            showUploadList={false}
            accept=".xlsx,.xls,.docx,.doc,.pdf,.dwg"
            disabled={disabled || uploading}
          >
            <Button 
              type="text" 
              size="small" 
              icon={<UploadOutlined />} 
              loading={uploading}
              style={{ 
                padding: '2px 4px',
                height: 'auto',
                minWidth: 'auto'
              }}
            />
          </Upload>
        )}
      </Space>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ */}
      <Modal
        title={previewFile ? `–ü—Ä–æ—Å–º–æ—Ç—Ä: ${previewFile.name}` : '–ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∞–π–ª–∞'}
        open={previewModalOpen}
        onCancel={() => {
          setPreviewModalOpen(false)
          setPreviewFile(null)
          setPreviewUrl('')
        }}
        width="90%"
        style={{ maxWidth: '1200px' }}
        footer={[
          <Button key="close" onClick={() => {
            setPreviewModalOpen(false)
            setPreviewFile(null)
            setPreviewUrl('')
          }}>
            –ó–∞–∫—Ä—ã—Ç—å
          </Button>,
          <Button 
            key="download" 
            type="primary" 
            icon={<DownloadOutlined />}
            onClick={() => previewFile && saveFile(previewFile)}
          >
            –°–∫–∞—á–∞—Ç—å
          </Button>
        ]}
      >
        {previewUrl && previewFile && (
          <div style={{ height: '70vh' }}>
            {previewFile.extension.toLowerCase() === 'pdf' ? (
              <iframe
                src={previewUrl}
                style={{ width: '100%', height: '100%', border: 'none' }}
                title={previewFile.name}
              />
            ) : ['xlsx', 'xls', 'docx', 'doc'].includes(previewFile.extension.toLowerCase()) ? (
              <div style={{ 
                display: 'flex', 
                flexDirection: 'column', 
                alignItems: 'center', 
                justifyContent: 'center', 
                height: '100%', 
                gap: '20px' 
              }}>
                <div style={{ fontSize: '48px' }}>
                  {getFileIcon(previewFile.extension)}
                </div>
                <Text style={{ fontSize: '16px' }}>{previewFile.name}</Text>
                <Text type="secondary">
                  –†–∞–∑–º–µ—Ä: {(previewFile.size / 1024 / 1024).toFixed(2)} MB
                </Text>
                <Text type="secondary">
                  –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∞–π–ª–æ–≤ Microsoft Office –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
                </Text>
                <Button 
                  type="primary" 
                  icon={<DownloadOutlined />}
                  onClick={() => saveFile(previewFile)}
                >
                  –°–∫–∞—á–∞—Ç—å –∏ –æ—Ç–∫—Ä—ã—Ç—å
                </Button>
              </div>
            ) : (
              <div style={{ 
                display: 'flex', 
                alignItems: 'center', 
                justifyContent: 'center', 
                height: '100%' 
              }}>
                <Text>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞</Text>
              </div>
            )}
          </div>
        )}
      </Modal>
    </div>
  )
}
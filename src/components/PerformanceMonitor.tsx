import React, { useState, useEffect, useMemo } from 'react'
import { Card, Progress, Tag, Space, Typography, Tooltip, Button } from 'antd'
import { ThunderboltOutlined, EyeOutlined, DatabaseOutlined, ClockCircleOutlined } from '@ant-design/icons'

const { Text } = Typography

interface PerformanceStats {
  renderTime: number
  memoryUsage: number
  visibleRows: number
  totalRows: number
  loadedComments: number
  activeQueries: number
}

interface PerformanceMonitorProps {
  stats: PerformanceStats
  isVisible?: boolean
  onToggle?: () => void
}

const PerformanceMonitor: React.FC<PerformanceMonitorProps> = ({
  stats,
  isVisible = false,
  onToggle
}) => {
  const [fps, setFps] = useState(60)
  const [frameCount, setFrameCount] = useState(0)

  // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ FPS
  useEffect(() => {
    let animationId: number
    let lastTime = performance.now()
    let frameCounter = 0

    const measureFPS = (currentTime: number) => {
      frameCounter++

      if (currentTime - lastTime >= 1000) { // –ö–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
        setFps(Math.round((frameCounter * 1000) / (currentTime - lastTime)))
        setFrameCount(frameCounter)
        frameCounter = 0
        lastTime = currentTime
      }

      animationId = requestAnimationFrame(measureFPS)
    }

    if (isVisible) {
      animationId = requestAnimationFrame(measureFPS)
    }

    return () => {
      if (animationId) {
        cancelAnimationFrame(animationId)
      }
    }
  }, [isVisible])

  // –í—ã—á–∏—Å–ª—è–µ–º —É—Ä–æ–≤–Ω–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  const performanceLevel = useMemo(() => {
    const efficiency = (stats.visibleRows / stats.totalRows) * 100

    if (efficiency > 80 && fps > 50 && stats.renderTime < 100) {
      return { level: 'excellent', color: '#52c41a', text: '–û—Ç–ª–∏—á–Ω–∞—è' }
    } else if (efficiency > 60 && fps > 30 && stats.renderTime < 300) {
      return { level: 'good', color: '#1890ff', text: '–•–æ—Ä–æ—à–∞—è' }
    } else if (efficiency > 40 && fps > 20 && stats.renderTime < 500) {
      return { level: 'fair', color: '#faad14', text: '–ü—Ä–∏–µ–º–ª–µ–º–∞—è' }
    } else {
      return { level: 'poor', color: '#ff4d4f', text: '–ù–∏–∑–∫–∞—è' }
    }
  }, [stats, fps])

  const memoryUsagePercent = Math.min((stats.memoryUsage / (1024 * 1024 * 100)) * 100, 100) // –î–æ 100MB —Å—á–∏—Ç–∞–µ–º 100%

  if (!isVisible) {
    return (
      <Button
        type="text"
        icon={<ThunderboltOutlined />}
        onClick={onToggle}
        size="small"
        style={{
          position: 'fixed',
          bottom: 20,
          right: 20,
          zIndex: 1000,
          backgroundColor: 'rgba(0,0,0,0.1)',
          borderRadius: '20px'
        }}
      >
        –ú–æ–Ω–∏—Ç–æ—Ä
      </Button>
    )
  }

  return (
    <Card
      size="small"
      title={
        <Space>
          <ThunderboltOutlined />
          <Text strong>–ú–æ–Ω–∏—Ç–æ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏</Text>
          <Tag color={performanceLevel.color}>{performanceLevel.text}</Tag>
        </Space>
      }
      extra={
        <Button type="text" onClick={onToggle} size="small">
          –°–∫—Ä—ã—Ç—å
        </Button>
      }
      style={{
        position: 'fixed',
        bottom: 20,
        right: 20,
        width: 350,
        zIndex: 1000,
        boxShadow: '0 4px 12px rgba(0,0,0,0.15)'
      }}
    >
      <Space direction="vertical" size="small" style={{ width: '100%' }}>
        {/* FPS –∏ –≤—Ä–µ–º—è —Ä–µ–Ω–¥–µ—Ä–∞ */}
        <Space split={<span style={{ color: '#d9d9d9' }}>|</span>}>
          <Tooltip title="–ö–∞–¥—Ä–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É">
            <Space size="small">
              <ClockCircleOutlined style={{ color: fps > 50 ? '#52c41a' : fps > 30 ? '#faad14' : '#ff4d4f' }} />
              <Text style={{ fontSize: '12px' }}>{fps} FPS</Text>
            </Space>
          </Tooltip>

          <Tooltip title="–í—Ä–µ–º—è —Ä–µ–Ω–¥–µ—Ä–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è">
            <Space size="small">
              <Text style={{ fontSize: '12px' }}>{stats.renderTime}ms</Text>
            </Space>
          </Tooltip>
        </Space>

        {/* –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ */}
        <Space direction="vertical" size={2} style={{ width: '100%' }}>
          <Space justify="space-between" style={{ width: '100%' }}>
            <Text style={{ fontSize: '12px' }}>–ü–∞–º—è—Ç—å:</Text>
            <Text style={{ fontSize: '12px' }}>
              {(stats.memoryUsage / (1024 * 1024)).toFixed(1)} MB
            </Text>
          </Space>
          <Progress
            percent={memoryUsagePercent}
            size="small"
            strokeColor={memoryUsagePercent > 80 ? '#ff4d4f' : memoryUsagePercent > 60 ? '#faad14' : '#52c41a'}
            showInfo={false}
          />
        </Space>

        {/* –°—Ç—Ä–æ–∫–∏ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å */}
        <Space split={<span style={{ color: '#d9d9d9' }}>|</span>}>
          <Tooltip title="–í–∏–¥–∏–º—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞">
            <Space size="small">
              <EyeOutlined style={{ color: '#1890ff' }} />
              <Text style={{ fontSize: '12px' }}>
                {stats.visibleRows.toLocaleString('ru-RU')} / {stats.totalRows.toLocaleString('ru-RU')}
              </Text>
            </Space>
          </Tooltip>

          <Tooltip title="–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏">
            <Space size="small">
              <DatabaseOutlined style={{ color: '#722ed1' }} />
              <Text style={{ fontSize: '12px' }}>{stats.loadedComments}</Text>
            </Space>
          </Tooltip>
        </Space>

        {/* –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ */}
        <Space direction="vertical" size={2} style={{ width: '100%' }}>
          <Space justify="space-between" style={{ width: '100%' }}>
            <Text style={{ fontSize: '12px' }}>–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</Text>
            <Text style={{ fontSize: '12px' }}>
              {((stats.visibleRows / stats.totalRows) * 100).toFixed(1)}%
            </Text>
          </Space>
          <Progress
            percent={(stats.visibleRows / stats.totalRows) * 100}
            size="small"
            strokeColor={performanceLevel.color}
            showInfo={false}
          />
        </Space>

        {/* –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã */}
        {stats.activeQueries > 0 && (
          <Tooltip title="–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ —Å–µ—Ä–≤–µ—Ä—É">
            <Tag color="processing" style={{ fontSize: '11px' }}>
              {stats.activeQueries} –∑–∞–ø—Ä–æ—Å–æ–≤
            </Tag>
          </Tooltip>
        )}

        {/* –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ */}
        {performanceLevel.level === 'poor' && (
          <Text type="secondary" style={{ fontSize: '11px' }}>
            üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –≤–∫–ª—é—á–∏—Ç–µ –≤–∏—Ä—Ç—É–∞–ª–∏–∑–∞—Ü–∏—é –∏–ª–∏ —Ä–µ–∂–∏–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
          </Text>
        )}
      </Space>
    </Card>
  )
}

export default PerformanceMonitor
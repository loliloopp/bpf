import React, { useState, useCallback, useMemo } from 'react'
import { Modal, Typography, Table, message } from 'antd'
import { PlusOutlined, MinusOutlined } from '@ant-design/icons'
import { type UIBlock, type UIStylobate, type UIUndergroundParking } from '@/entities/projects'
import { useScale } from '@/shared/contexts/ScaleContext'

const { Title, Text } = Typography

// CSS —Å—Ç–∏–ª–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –Ω–∞ –ø–æ–ª–Ω—É—é –≤—ã—Å–æ—Ç—É
const tableStyles = `
.building-table .ant-table {
  margin: 0 !important;
  width: 100% !important;
  table-layout: fixed !important;
}
.building-table .ant-table-container {
  padding: 0 !important;
  overflow: visible !important;
}
.building-table .ant-table-content {
  overflow: visible !important;
}
.building-table .ant-table-body {
  overflow: visible !important;
  padding: 0 !important;
}
.building-table .ant-table-thead {
  position: sticky;
  top: 0;
  z-index: 1;
  margin: 0 !important;
}
.building-table .ant-table-thead th {
  padding: 2px 4px !important;
  height: 20px !important;
  background: #fafafa !important;
  border-bottom: 1px solid #d9d9d9 !important;
  vertical-align: middle !important;
  line-height: 1 !important;
  /* font-size —É–¥–∞–ª–µ–Ω - –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ scalingStyles */
}
.building-table .ant-table-tbody td {
  padding: 0 !important;
  border: 1px solid #d9d9d9 !important;
  vertical-align: middle !important;
  line-height: 1 !important;
}
.building-table .ant-table-tbody {
  overflow: visible !important;
}
`

export type BlockType = '–ü–æ–¥–∑–µ–º–Ω—ã–π –ø–∞—Ä–∫–∏–Ω–≥' | '–¢–∏–ø–æ–≤–æ–π –∫–æ—Ä–ø—É—Å' | '–°—Ç–∏–ª–æ–±–∞—Ç' | '–ö—Ä–æ–≤–ª—è'

// –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∏–ø—ã –∏–∑ entities/projects
type Block = UIBlock
type Stylobate = UIStylobate
type UndergroundParking = UIUndergroundParking

interface ProjectCardModalProps {
  visible: boolean
  onCancel: () => void
  onSave: (data: {
    projectName: string
    projectAddress: string
    blocks: Block[]
    stylobates: Stylobate[]
    undergroundParking: UndergroundParking
  }) => Promise<void>
  projectData: {
    id: string // ID –ø—Ä–æ–µ–∫—Ç–∞ (–ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤)
    name: string
    address: string
    blocks: Array<{
      id?: number
      name: string
      bottomFloor: number
      topFloor: number
      x?: number
      y?: number
      technicalFloors?: number[]
    }>
    stylobates?: Array<{
      id: string
      name: string
      fromBlockId: number
      toBlockId: number
      floors: number
      x: number
      y: number
    }>
    undergroundParking?: {
      blockIds: number[]
      connections: Array<{ fromBlockId: number; toBlockId: number }>
    }
  }
}

export default function ProjectCardModal({
  visible,
  onCancel,
  onSave,
  projectData,
}: ProjectCardModalProps) {
  const { scale } = useScale()
  const [blocks, setBlocks] = useState<Block[]>([])
  const [stylobates, setStylobates] = useState<Stylobate[]>([])
  const [undergroundParking, setUndergroundParking] = useState<UndergroundParking>({
    blockIds: [],
    connections: [],
  })

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–º–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏–π
  const [originalBlocks, setOriginalBlocks] = useState<Block[]>([])
  const [originalStylobates, setOriginalStylobates] = useState<Stylobate[]>([])
  const [originalUndergroundParking, setOriginalUndergroundParking] = useState<UndergroundParking>({
    blockIds: [],
    connections: [],
  })

  // –†–µ–∂–∏–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ —ç—Ç–∞–∂–∞
  const [technicalFloorMode, setTechnicalFloorMode] = useState<boolean>(false)

  React.useEffect(() => {
    if (visible && projectData.blocks.length > 0) {
      const generatedBlocks: Block[] = projectData.blocks.map((block, index) => ({
        id: block.id || index + 1,
        name: block.name,
        bottomFloor: block.bottomFloor,
        topFloor: block.topFloor,
        x: block.x || 0,
        y: block.y || 0,
        technicalFloors: block.technicalFloors || [],
      }))
      setBlocks(generatedBlocks)
      setOriginalBlocks(generatedBlocks) // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª–æ–±–∞—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã
      const initialStylobates = projectData.stylobates || []
      setStylobates(initialStylobates)
      setOriginalStylobates(initialStylobates) // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–¥–∑–µ–º–Ω—É—é –ø–∞—Ä–∫–æ–≤–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞
      const initialParking = projectData.undergroundParking || {
        blockIds: [],
        connections: [],
      }
      setUndergroundParking(initialParking)
      setOriginalUndergroundParking(initialParking) // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    }
  }, [visible, projectData])

  // –£–¥–∞–ª–µ–Ω–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–∞—è —Ñ—É–Ω–∫—Ü–∏—è generateStylobateName

  // –£–¥–∞–ª–µ–Ω—ã –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ handleStylobateChange, handleStylobateFloorsChange,
  // handleUndergroundParkingBlockChange, handleUndergroundConnectionChange
  // –ò—Ö –∑–∞–º–µ–Ω–∏–ª–∞ –Ω–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ —á–µ—Ä–µ–∑ handleConnectionSpaceClick –∏ handleBlockParkingToggle

  // –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç—Ç–∞–∂–∞–º–∏
  const handleAddTopFloor = useCallback((blockId: number) => {
    setBlocks((prev) =>
      prev.map((block) =>
        block.id === blockId ? { ...block, topFloor: block.topFloor + 1 } : block,
      ),
    )
  }, [])

  const handleRemoveTopFloor = useCallback((blockId: number) => {
    setBlocks((prev) =>
      prev.map((block) =>
        block.id === blockId && block.topFloor > block.bottomFloor
          ? { ...block, topFloor: block.topFloor - 1 }
          : block,
      ),
    )
  }, [])

  const handleAddBottomFloor = useCallback((blockId: number) => {
    setBlocks((prev) =>
      prev.map((block) =>
        block.id === blockId ? { ...block, bottomFloor: block.bottomFloor - 1 } : block,
      ),
    )
  }, [])

  const handleRemoveBottomFloor = useCallback((blockId: number) => {
    setBlocks((prev) =>
      prev.map((block) =>
        block.id === blockId && block.bottomFloor < block.topFloor
          ? { ...block, bottomFloor: block.bottomFloor + 1 }
          : block,
      ),
    )
  }, [])

  // –£–ë–†–ê–ù–û: —Ñ—É–Ω–∫—Ü–∏—è createParkingBlock - –ø–∞—Ä–∫–∏–Ω–≥ —Ç–µ–ø–µ—Ä—å –Ω–µ –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–æ—Ä–ø—É—Å

  // –§—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ—Ä–ø—É—Å–∞
  const handleBlockNameChange = useCallback((blockId: number, newName: string) => {
    setBlocks(prev => prev.map(block =>
      block.id === blockId ? { ...block, name: newName } : block
    ))

    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–∏–ª–æ–±–∞—Ç–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏–π –∫–æ—Ä–ø—É—Å–æ–≤
    setStylobates(prev => prev.map(stylobate => {
      const fromBlock = blocks.find(b => b.id === stylobate.fromBlockId)
      const toBlock = blocks.find(b => b.id === stylobate.toBlockId)

      if ((stylobate.fromBlockId === blockId || stylobate.toBlockId === blockId) && fromBlock && toBlock) {
        const fromName = stylobate.fromBlockId === blockId ? newName : fromBlock.name
        const toName = stylobate.toBlockId === blockId ? newName : toBlock.name
        return {
          ...stylobate,
          name: `–°—Ç–∏–ª–æ–±–∞—Ç ${fromName}-${toName}`
        }
      }
      return stylobate
    }))

    console.log('üîç –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ—Ä–ø—É—Å–∞ –∏–∑–º–µ–Ω–µ–Ω–æ:', { blockId, newName }) // LOG
  }, [blocks])

  // –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–ø—É—Å–∞
  const handleAddNewBlock = useCallback(() => {
    console.log('üîç AddNewBlock clicked') // LOG
    const newBlockNumber = blocks.length + 1
    const newBlockId = Math.max(...blocks.map(b => b.id || 0)) + 1

    const newBlock: Block = {
      id: newBlockId,
      name: `–ö–æ—Ä–ø—É—Å ${newBlockNumber}`,
      bottomFloor: 1,
      topFloor: 5,
      x: 0,
      y: 0,
    }

    setBlocks((prev) => [...prev, newBlock])
    message.success(`–î–æ–±–∞–≤–ª–µ–Ω ${newBlock.name}`)
  }, [blocks])

  // –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ—Ä–ø—É—Å–∞
  const handleDeleteBlock = useCallback((blockId: number) => {
    const blockToDelete = blocks.find(b => b.id === blockId)
    if (!blockToDelete) return

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ä–ø—É—Å–æ–≤
    if (blocks.length <= 1) {
      message.warning('–ü—Ä–æ–µ–∫—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º –æ–¥–∏–Ω –∫–æ—Ä–ø—É—Å')
      return
    }

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
    Modal.confirm({
      title: '–£–¥–∞–ª–∏—Ç—å –∫–æ—Ä–ø—É—Å?',
      content: (
        <div>
          <p>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–æ—Ä–ø—É—Å <strong>"{blockToDelete.name}"</strong>?</p>
          <p style={{ color: '#ff4d4f', fontSize: '12px', marginTop: '8px' }}>
            ‚ö†Ô∏è –ë—É–¥—É—Ç —Ç–∞–∫–∂–µ —É–¥–∞–ª–µ–Ω—ã –≤—Å–µ —Å—Ç–∏–ª–æ–±–∞—Ç—ã –∏ –ø–æ–¥–∑–µ–º–Ω—ã–µ —Å–≤—è–∑–∏ —ç—Ç–æ–≥–æ –∫–æ—Ä–ø—É—Å–∞
          </p>
        </div>
      ),
      okText: '–£–¥–∞–ª–∏—Ç—å',
      cancelText: '–û—Ç–º–µ–Ω–∞',
      okType: 'danger',
      onOk: () => {
        console.log('üîç Deleting block:', blockId, blockToDelete.name) // LOG

        // –£–¥–∞–ª—è–µ–º –∫–æ—Ä–ø—É—Å –∏–∑ —Å–ø–∏—Å–∫–∞ –±–ª–æ–∫–æ–≤
        setBlocks(prev => prev.filter(b => b.id !== blockId))

        // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç–∏–ª–æ–±–∞—Ç—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç—Ç–∏–º –∫–æ—Ä–ø—É—Å–æ–º
        setStylobates(prev => prev.filter(s =>
          s.fromBlockId !== blockId && s.toBlockId !== blockId
        ))

        // –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø–æ–¥–∑–µ–º–Ω—ã–µ —Å–≤—è–∑–∏ —Å —ç—Ç–∏–º –∫–æ—Ä–ø—É—Å–æ–º
        setUndergroundParking(prev => ({
          ...prev,
          blockIds: prev.blockIds.filter(id => id !== blockId),
          connections: prev.connections.filter(conn =>
            conn.fromBlockId !== blockId && conn.toBlockId !== blockId
          )
        }))

        message.success(`–ö–æ—Ä–ø—É—Å "${blockToDelete.name}" —É–¥–∞–ª–µ–Ω`)
      },
    })
  }, [blocks])

  // –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∏–ª–æ–±–∞—Ç–∞–º–∏
  const handleAddTopFloorStylobate = useCallback((stylobateId: string | number) => {
    setStylobates(prev => prev.map(stylobate => {
      if (stylobate.id === stylobateId) {
        const newTopFloor = (stylobate.topFloor ?? stylobate.floors) + 1
        return {
          ...stylobate,
          topFloor: newTopFloor,
          floors: newTopFloor - (stylobate.bottomFloor ?? 1) + 1
        }
      }
      return stylobate
    }))
  }, [])

  const handleRemoveTopFloorStylobate = useCallback((stylobateId: string | number) => {
    setStylobates(prev => prev.map(stylobate => {
      if (stylobate.id === stylobateId) {
        const bottomFloor = stylobate.bottomFloor ?? 1
        const currentTopFloor = stylobate.topFloor ?? stylobate.floors
        if (currentTopFloor > bottomFloor) {
          const newTopFloor = currentTopFloor - 1
          return {
            ...stylobate,
            topFloor: newTopFloor,
            floors: newTopFloor - bottomFloor + 1
          }
        }
      }
      return stylobate
    }))
  }, [])

  const handleDeleteStylobate = useCallback((stylobateId: string | number) => {
    const stylobateToDelete = stylobates.find(s => s.id === stylobateId)
    if (!stylobateToDelete) return

    Modal.confirm({
      title: '–£–¥–∞–ª–∏—Ç—å —Å—Ç–∏–ª–æ–±–∞—Ç?',
      content: (
        <div>
          <p>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å—Ç–∏–ª–æ–±–∞—Ç <strong>"{stylobateToDelete.name}"</strong>?</p>
        </div>
      ),
      okText: '–£–¥–∞–ª–∏—Ç—å',
      cancelText: '–û—Ç–º–µ–Ω–∞',
      okType: 'danger',
      onOk: () => {
        setStylobates(prev => prev.filter(s => s.id !== stylobateId))
        message.success(`–°—Ç–∏–ª–æ–±–∞—Ç "${stylobateToDelete.name}" —É–¥–∞–ª–µ–Ω`)
      },
    })
  }, [stylobates])

  // –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–æ–≤ –ø–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤—É –º–µ–∂–¥—É –∫–æ—Ä–ø—É—Å–∞–º–∏
  const handleConnectionSpaceClick = useCallback((fromBlockId: number, toBlockId: number, floor: number) => {
    console.log('üîç ConnectionSpaceClick:', { fromBlockId, toBlockId, floor }) // LOG

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–¥–∑–µ–º–Ω–∞—è —Å–≤—è–∑—å
    const hasUndergroundConnection = undergroundParking.connections.some(
      conn => conn.fromBlockId === fromBlockId && conn.toBlockId === toBlockId
    )

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å—Ç–∏–ª–æ–±–∞—Ç
    const existingStylobate = stylobates.find(
      s => s.fromBlockId === fromBlockId && s.toBlockId === toBlockId
    )

    console.log('üîç –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ –∫–ª–∏–∫–∞:', { // LOG
      hasUndergroundConnection,
      existingStylobate: existingStylobate ? { floors: existingStylobate.floors } : null,
      clickedFloor: floor
    })

    if (floor <= 0) {
      // –ü—Ä–∏ –∫–ª–∏–∫–µ –Ω–∏–∂–µ –∏ –≤–∫–ª—é—á–∞—è 0 —ç—Ç–∞–∂ –º–µ–∂–¥—É –∫–æ—Ä–ø—É—Å–∞–º–∏
      if (hasUndergroundConnection) {
        // –ï—Å–ª–∏ –ø–∞—Ä–∫–∏–Ω–≥ –µ—Å—Ç—å - —É–±–∏—Ä–∞–µ–º
        setUndergroundParking(prev => ({
          ...prev,
          connections: prev.connections.filter(
            conn => !(conn.fromBlockId === fromBlockId && conn.toBlockId === toBlockId)
          )
        }))
        console.log('üîç –ü–æ–¥–∑–µ–º–Ω–∞—è —Å–≤—è–∑—å —É–¥–∞–ª–µ–Ω–∞') // LOG
      } else {
        // –ï—Å–ª–∏ –ø–∞—Ä–∫–∏–Ω–≥–∞ –Ω–µ—Ç - –ø–æ—è–≤–ª—è–µ—Ç—Å—è –ø–∞—Ä–∫–∏–Ω–≥, —Å–æ–µ–¥–∏–Ω—è—é—â–∏–π –∫–æ—Ä–ø—É—Å–∞
        setUndergroundParking(prev => ({
          ...prev,
          connections: [...prev.connections, { fromBlockId, toBlockId }]
        }))
        console.log('üîç –ü–æ–¥–∑–µ–º–Ω–∞—è —Å–≤—è–∑—å –¥–æ–±–∞–≤–ª–µ–Ω–∞') // LOG
      }

      // –£–ë–†–ê–ù–û: –≤—ã–∑–æ–≤ createParkingBlock - –ø–∞—Ä–∫–∏–Ω–≥ —Ç–µ–ø–µ—Ä—å –Ω–µ –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–æ—Ä–ø—É—Å
    } else if (floor > 0) {
      // –ü—Ä–∏ –∫–ª–∏–∫–µ –≤—ã—à–µ 0 —ç—Ç–∞–∂–∞ –º–µ–∂–¥—É –∫–æ—Ä–ø—É—Å–∞–º–∏
      if (existingStylobate) {
        // –°—Ç–∏–ª–æ–±–∞—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (floor === 1) {
          // 1. –ö–ª–∏–∫ –ø–æ 1 —ç—Ç–∞–∂—É —Å—Ç–∏–ª–æ–±–∞—Ç–∞ —É–º–µ–Ω—å—à–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–∞–∂–µ–π —Å—Ç–∏–ª–æ–±–∞—Ç–∞ –Ω–∞ –æ–¥–∏–Ω —ç—Ç–∞–∂
          const newFloors = existingStylobate.floors - 1
          if (newFloors <= 0) {
            // –ï—Å–ª–∏ –Ω–µ –æ—Å—Ç–∞–µ—Ç—Å—è —ç—Ç–∞–∂–µ–π - —É–¥–∞–ª—è–µ–º —Å—Ç–∏–ª–æ–±–∞—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é
            setStylobates(prev => prev.filter(
              s => !(s.fromBlockId === fromBlockId && s.toBlockId === toBlockId)
            ))
            console.log('üîç –ö–ª–∏–∫ –ø–æ 1 —ç—Ç–∞–∂—É - —Å—Ç–∏–ª–æ–±–∞—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω') // LOG
          } else {
            // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–∞–∂–µ–π —Å—Ç–∏–ª–æ–±–∞—Ç–∞ –Ω–∞ 1
            setStylobates(prev => prev.map(s =>
              s.fromBlockId === fromBlockId && s.toBlockId === toBlockId
                ? {
                    ...s,
                    floors: newFloors,
                    topFloor: (s.bottomFloor ?? 1) + newFloors - 1
                  }
                : s
            ))
            console.log('üîç –ö–ª–∏–∫ –ø–æ 1 —ç—Ç–∞–∂—É - —É–±—Ä–∞–Ω –≤–µ—Ä—Ö–Ω–∏–π —ç—Ç–∞–∂ —Å—Ç–∏–ª–æ–±–∞—Ç–∞, –æ—Å—Ç–∞–ª–æ—Å—å:', newFloors) // LOG
          }
        } else if (floor === existingStylobate.floors) {
          // 2. –ö–ª–∏–∫ –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —ç—Ç–∞–∂—É —Å—Ç–∏–ª–æ–±–∞—Ç–∞ –ø—Ä–∏–±–∞–≤–ª—è–µ—Ç –æ–¥–∏–Ω —ç—Ç–∞–∂
          setStylobates(prev => prev.map(s =>
            s.fromBlockId === fromBlockId && s.toBlockId === toBlockId
              ? {
                  ...s,
                  floors: s.floors + 1,
                  topFloor: (s.bottomFloor ?? 1) + s.floors
                }
              : s
          ))
          console.log('üîç –ö–ª–∏–∫ –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —ç—Ç–∞–∂—É - –¥–æ–±–∞–≤–ª–µ–Ω 1 —ç—Ç–∞–∂ —Å—Ç–∏–ª–æ–±–∞—Ç–∞, –≤—Å–µ–≥–æ:', existingStylobate.floors + 1) // LOG
        } else if (floor === existingStylobate.floors + 1) {
          // 3. –ü—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ —è—á–µ–π–∫—É —Å—Ä–∞–∑—É –≤—ã—à–µ —Å—Ç–∏–ª–æ–±–∞—Ç–∞ - –¥–æ–±–∞–≤–ª—è–µ–º 1 —ç—Ç–∞–∂
          setStylobates(prev => prev.map(s =>
            s.fromBlockId === fromBlockId && s.toBlockId === toBlockId
              ? {
                  ...s,
                  floors: s.floors + 1,
                  topFloor: (s.bottomFloor ?? 1) + s.floors
                }
              : s
          ))
          console.log('üîç –ö–ª–∏–∫ –≤—ã—à–µ —Å—Ç–∏–ª–æ–±–∞—Ç–∞ –Ω–∞ 1 —ç—Ç–∞–∂ - –¥–æ–±–∞–≤–ª–µ–Ω 1 —ç—Ç–∞–∂ —Å—Ç–∏–ª–æ–±–∞—Ç–∞, –≤—Å–µ–≥–æ:', existingStylobate.floors + 1) // LOG
        } else if (floor > existingStylobate.floors + 1) {
          // –ö–ª–∏–∫ –≤—ã—à–µ —Å—Ç–∏–ª–æ–±–∞—Ç–∞ –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 1 —ç—Ç–∞–∂ - –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç
          console.log('üîç –ö–ª–∏–∫ –≤—ã—à–µ —Å—Ç–∏–ª–æ–±–∞—Ç–∞ –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 1 —ç—Ç–∞–∂ - –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç') // LOG
        } else {
          // –ö–ª–∏–∫–∏ –ø–æ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–º —ç—Ç–∞–∂–∞–º —Å—Ç–∏–ª–æ–±–∞—Ç–∞ (–æ—Ç 2 –¥–æ –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ) - –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
          console.log('üîç –ö–ª–∏–∫ –ø–æ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–º—É —ç—Ç–∞–∂—É —Å—Ç–∏–ª–æ–±–∞—Ç–∞ - –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç') // LOG
        }
      } else {
        // –ö–æ–≥–¥–∞ –Ω–µ—Ç —Å—Ç–∏–ª–æ–±–∞—Ç–∞ - –ø—Ä–∏ –∫–ª–∏–∫–µ –º–µ–∂–¥—É –∫–æ—Ä–ø—É—Å–∞–º–∏ –≤—ã—à–µ 0 —ç—Ç–∞–∂–∞ –ø–æ—è–≤–ª—è–µ—Ç—Å—è 1 —ç—Ç–∞–∂ —Å—Ç–∏–ª–æ–±–∞—Ç–∞
        if (floor === 1) {
          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å—Ç–∏–ª–æ–±–∞—Ç —Å 1 —ç—Ç–∞–∂–æ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∫–ª–∏–∫–µ –ø–æ 1 —ç—Ç–∞–∂—É
          const fromBlock = blocks.find(b => b.id === fromBlockId)
          const toBlock = blocks.find(b => b.id === toBlockId)
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–∞—Ä–∫–∏–Ω–≥ –ø–æ–¥ —Å—Ç–∏–ª–æ–±–∞—Ç–æ–º
          const hasUndergroundParking = undergroundParking.connections.some(
            conn => conn.fromBlockId === fromBlockId && conn.toBlockId === toBlockId
          )

          const newStylobate: UIStylobate = {
            id: `${Math.max(0, ...stylobates.map(s => typeof s.id === 'number' ? s.id : parseInt(s.id) || 0)) + 1}`,
            name: `–°—Ç–∏–ª–æ–±–∞—Ç ${fromBlock?.name || fromBlockId}-${toBlock?.name || toBlockId}`,
            fromBlockId,
            toBlockId,
            floors: 1,
            bottomFloor: hasUndergroundParking ? 1 : 1, // –°—Ç–∏–ª–æ–±–∞—Ç –≤—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 1 —ç—Ç–∞–∂–∞
            topFloor: 1,
            x: 0,
            y: 0,
          }
          setStylobates(prev => [...prev, newStylobate])
          console.log('üîç –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Å—Ç–∏–ª–æ–±–∞—Ç —Å 1 —ç—Ç–∞–∂–æ–º') // LOG
        } else {
          // –ö–ª–∏–∫ –ø–æ –ø—É—Å—Ç—ã–º —è—á–µ–π–∫–∞–º –≤—ã—à–µ 1 —ç—Ç–∞–∂–∞ - –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, —Ç–∞–∫ –∫–∞–∫ —Å—Ç–∏–ª–æ–±–∞—Ç–∞ –Ω–µ—Ç
          console.log('üîç –ö–ª–∏–∫ –ø–æ –ø—É—Å—Ç–æ–π —è—á–µ–π–∫–µ –≤—ã—à–µ 1 —ç—Ç–∞–∂–∞ –±–µ–∑ —Å—Ç–∏–ª–æ–±–∞—Ç–∞ - –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç') // LOG
        }
      }
    }
  }, [undergroundParking.connections, stylobates, blocks])

  // –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø–æ–¥–∑–µ–º–Ω–æ–π –ø–∞—Ä–∫–æ–≤–∫–∏ –¥–ª—è –±–ª–æ–∫–∞
  const handleBlockParkingToggle = useCallback((blockId: number, floor: number) => {
    // –ü—Ä–∏ –∫–ª–∏–∫–µ –ø–æ –ø–æ–¥–∑–µ–º–Ω–æ–º—É —ç—Ç–∞–∂—É –∫–æ—Ä–ø—É—Å–∞ –æ–Ω —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ø–∞—Ä–∫–æ–≤–∫–æ–π
    const isCurrentlyParking = undergroundParking.blockIds.includes(blockId)

    console.log('üîç Block parking toggle:', { blockId, floor, isCurrentlyParking }) // LOG

    if (isCurrentlyParking) {
      // –£–±–∏—Ä–∞–µ–º –±–ª–æ–∫ –∏–∑ –ø–∞—Ä–∫–æ–≤–∫–∏
      setUndergroundParking(prev => ({
        ...prev,
        blockIds: prev.blockIds.filter(id => id !== blockId)
      }))

      // –ü—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –ø–∞—Ä–∫–æ–≤–∫–∏ –∫–æ—Ä–ø—É—Å –º–æ–∂–µ—Ç –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –±–æ–ª–µ–µ –Ω–∏–∑–∫–∏—Ö —ç—Ç–∞–∂–µ–π
      // –ù–æ –µ—Å–ª–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —ç—Ç–∞–∂ —Å—Ç–∞–ª –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º - –Ω–∞—á–∏–Ω–∞–µ–º —Å 1 —ç—Ç–∞–∂–∞
      setBlocks(prev => prev.map(block => {
        if (block.id === blockId && block.bottomFloor < 0) {
          return {
            ...block,
            bottomFloor: Math.max(1, block.bottomFloor) // –ù–µ –≤—ã—à–µ 1 —ç—Ç–∞–∂–∞
          }
        }
        return block
      }))
    } else {
      // –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫ –≤ –ø–∞—Ä–∫–æ–≤–∫—É
      setUndergroundParking(prev => ({
        ...prev,
        blockIds: [...prev.blockIds, blockId]
      }))

      // –ü—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –ø–∞—Ä–∫–æ–≤–∫–∏ –∫–æ—Ä–ø—É—Å –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –ø–æ–¥–∑–µ–º–Ω—ã–µ —ç—Ç–∞–∂–∏
      setBlocks(prev => prev.map(block => {
        if (block.id === blockId) {
          return {
            ...block,
            // –ï—Å–ª–∏ —É –∫–æ—Ä–ø—É—Å–∞ –Ω–µ—Ç –ø–æ–¥–∑–µ–º–Ω—ã—Ö —ç—Ç–∞–∂–µ–π - –¥–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∫–æ–≤–æ—á–Ω—ã–µ —ç—Ç–∞–∂–∏
            bottomFloor: block.bottomFloor >= 1 ? -2 : Math.min(block.bottomFloor, -1)
          }
        }
        return block
      }))
    }
  }, [undergroundParking.blockIds])

  // –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ —ç—Ç–∞–∂–∞
  const handleTechnicalFloorToggle = useCallback((blockId: number, floor: number) => {
    setBlocks(prev => prev.map(block => {
      if (block.id !== blockId) return block

      const technicalFloors = block.technicalFloors || []
      const isCurrentlyTechnical = technicalFloors.includes(floor)

      if (isCurrentlyTechnical) {
        // –£–±–∏—Ä–∞–µ–º –∏–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —ç—Ç–∞–∂–µ–π
        return {
          ...block,
          technicalFloors: technicalFloors.filter(f => f !== floor)
        }
      } else {
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —ç—Ç–∞–∂–∏
        return {
          ...block,
          technicalFloors: [...technicalFloors, floor].sort((a, b) => b - a) // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é
        }
      }
    }))
  }, [])

  // –§—É–Ω–∫—Ü–∏—è —Å–±—Ä–æ—Å–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
  const handleReset = useCallback(() => {
    console.log('üîç –°–±—Ä–æ—Å –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é') // LOG
    setBlocks([...originalBlocks])
    setStylobates([...originalStylobates])
    setUndergroundParking({ ...originalUndergroundParking })
  }, [originalBlocks, originalStylobates, originalUndergroundParking])

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
  const hasUnsavedChanges = useMemo(() => {
    return (
      JSON.stringify(blocks) !== JSON.stringify(originalBlocks) ||
      JSON.stringify(stylobates) !== JSON.stringify(originalStylobates) ||
      JSON.stringify(undergroundParking) !== JSON.stringify(originalUndergroundParking)
    )
  }, [blocks, stylobates, undergroundParking, originalBlocks, originalStylobates, originalUndergroundParking])

  const handleSave = async () => {
    try {
      // –ü–µ—Ä–µ–¥–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
      await onSave({
        projectName: projectData.name,
        projectAddress: projectData.address,
        blocks,
        stylobates,
        undergroundParking,
      })

      // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      setOriginalBlocks([...blocks])
      setOriginalStylobates([...stylobates])
      setOriginalUndergroundParking({ ...undergroundParking })

      message.success('–î–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã')
      console.log('üîç –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ') // LOG
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞:', error)
      message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞')
    }
  }

  // –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º:
  // ‚â§40 —ç—Ç–∞–∂–µ–π: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –≤—ã—Å–æ—Ç–∞ 12px, –±–µ–∑ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
  // 41-60 —ç—Ç–∞–∂–µ–π: –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ —á—Ç–æ–±—ã –≤—Å–µ –ø–æ–º–µ—Å—Ç–∏–ª–æ—Å—å, –±–µ–∑ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
  // >60 —ç—Ç–∞–∂–µ–π: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –≤—ã—Å–æ—Ç–∞ 12px + –ø—Ä–æ–∫—Ä—É—Ç–∫–∞
  const scalingInfo = useMemo(() => {
    if (!blocks.length)
      return {
        totalFloors: 0,
        needsScrolling: false,
        rowHeight: 12,
        maxTopFloor: 0,
        minBottomFloor: 0,
        tableScrollHeight: undefined as string | undefined,
      }

    console.log(
      'üîç ProjectCardModal: Calculating scaling for blocks:',
      blocks.map((b) => ({
        name: b.name,
        bottomFloor: b.bottomFloor,
        topFloor: b.topFloor,
      })),
    )

    const maxTopFloor = Math.max(...blocks.map((block) => block.topFloor))
    const minBottomFloor = Math.min(...blocks.map((block) => block.bottomFloor))
    const totalFloors = maxTopFloor - minBottomFloor + 1

    // –í—ã—Å–æ—Ç–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ 95vh
    const viewportHeight = typeof window !== 'undefined' ? window.innerHeight : 900
    const modalHeight = viewportHeight * 0.95 // 95vh
    const controlsAndPaddingHeight = 200 // –£–ú–ï–ù–¨–®–ï–ù–û: –º–µ—Å—Ç–æ –ø–æ–¥ –∑–∞–≥–æ–ª–æ–≤–æ–∫, —É–ø—Ä–∞–≤–ª—è—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏ –æ—Ç—Å—Ç—É–ø—ã
    const availableTableHeight = modalHeight - controlsAndPaddingHeight

    let rowHeight = 12 // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –≤—ã—Å–æ—Ç–∞ —Å—Ç—Ä–æ–∫–∏
    let tableScrollHeight: string | undefined = undefined
    let needsScrolling = false

    if (totalFloors <= 48) {
      // ‚â§48 —ç—Ç–∞–∂–µ–π: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –≤—ã—Å–æ—Ç–∞ —Å—Ç—Ä–æ–∫–∏ 12px, –±–µ–∑ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
      rowHeight = 12
      tableScrollHeight = undefined
      needsScrolling = false
    } else {
      // >48 —ç—Ç–∞–∂–µ–π: –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –≤—ã—Å–æ—Ç–æ–π —Å—Ç—Ä–æ–∫
      rowHeight = 12
      tableScrollHeight = `${availableTableHeight}px`
      needsScrolling = true
      console.log('üîç –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ >48 —ç—Ç–∞–∂–µ–π:', {
        totalFloors,
        availableTableHeight,
        tableScrollHeight,
      })
    }

    const result = {
      totalFloors,
      needsScrolling,
      rowHeight: Math.round(rowHeight),
      maxTopFloor,
      minBottomFloor,
      tableScrollHeight,
    }

    console.log('üîç ProjectCardModal: –£–ü–†–û–©–ï–ù–ù–ê–Ø –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏:', {
      totalFloors,
      category: totalFloors <= 48 ? '‚â§48 floors (standard 12px)' : '>48 floors (scrolled)',
      needsScrolling,
      availableTableHeight,
      finalRowHeight: rowHeight,
      tableScrollHeight,
      expectedTableHeight: totalFloors * rowHeight,
    })

    return result
  }, [blocks])

  const tableData = useMemo(() => {
    if (!blocks.length) return []

    const data = []

    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –≤—ã—á–∏—Å–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    const maxTopFloor = Math.max(...blocks.map((block) => block.topFloor))
    const minBottomFloor = Math.min(...blocks.map((block) => block.bottomFloor))

    console.log('üîç ProjectCardModal: TableData generation - floors range:', {
      maxTopFloor,
      minBottomFloor,
      totalFloors: maxTopFloor - minBottomFloor + 1,
      blocks: blocks.map(b => `${b.name}: ${b.bottomFloor}-${b.topFloor}`),
      generatedFloors: `from ${maxTopFloor} down to ${minBottomFloor}`
    })

    // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç—Ç–∞–∂–∞
    for (let floor = maxTopFloor; floor >= minBottomFloor; floor--) {
      const row: Record<string, unknown> = {
        key: floor,
        floor: floor as number,
      }

      // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ—Ä–ø—É—Å–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç—Ç–æ—Ç —ç—Ç–∞–∂
      blocks.forEach((block) => {
        const blockKey = `block_${block.id}`
        if (floor <= block.topFloor && floor >= block.bottomFloor) {
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —ç—Ç–∞–∂–∞ –∏ —Ü–≤–µ—Ç
          let backgroundColor
          const hasUndergroundParking = undergroundParking.blockIds.includes(block.id)
          const isTechnicalFloor = block.technicalFloors?.includes(floor) || false

          if (floor === 0) {
            backgroundColor = '#fff2e8' // –ö—Ä–æ–≤–ª—è
          } else if (isTechnicalFloor) {
            backgroundColor = '#003d82' // –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —ç—Ç–∞–∂
          } else if (floor > 0) {
            backgroundColor = '#f6ffed' // –¢–∏–ø–æ–≤–æ–π –∫–æ—Ä–ø—É—Å
          } else {
            backgroundColor = hasUndergroundParking ? '#e6f7ff' : '#f6ffed'
          }

          row[blockKey] = {
            floor,
            backgroundColor,
            blockName: block.name,
          }
        } else {
          row[blockKey] = null
        }
      })

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∏–ª–æ–±–∞—Ç—ã –∏ –ø–æ–¥–∑–µ–º–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –º–µ–∂–¥—É –∫–æ—Ä–ø—É—Å–∞–º–∏
      for (let i = 0; i < blocks.length - 1; i++) {
        const fromBlock = blocks[i]
        const toBlock = blocks[i + 1]
        const connectionKey = `connection_${fromBlock.id}_${toBlock.id}`

        const stylobate = stylobates.find(
          (s) => s.fromBlockId === fromBlock.id && s.toBlockId === toBlock.id,
        )
        const connection = undergroundParking.connections.find(
          (c) => c.fromBlockId === fromBlock.id && c.toBlockId === toBlock.id,
        )

        // –°—Ç–∏–ª–æ–±–∞—Ç - —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö —ç—Ç–∞–∂–µ–π
        if (stylobate && floor > 0 && floor <= stylobate.floors) {
          row[connectionKey] = {
            floor,
            backgroundColor: '#fffbe6', // –¶–≤–µ—Ç —Å—Ç–∏–ª–æ–±–∞—Ç–∞
            type: 'stylobate',
            name: stylobate.name,
          }
        }
        // –ü–æ–¥–∑–µ–º–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ - –¥–ª—è —ç—Ç–∞–∂–∞ 0 –∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —ç—Ç–∞–∂–µ–π
        // –ò —Ç–æ–ª—å–∫–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ —ç—Ç–∞–∂–µ–π –æ–±–æ–∏—Ö –∫–æ—Ä–ø—É—Å–æ–≤
        else if (connection && floor <= 0) {
          const minBottomFloor = Math.max(fromBlock.bottomFloor, toBlock.bottomFloor)
          if (floor >= minBottomFloor) {
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç: 0 —ç—Ç–∞–∂ - –∫–∞–∫ –∫—Ä–æ–≤–ª—è, –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ - –∫–∞–∫ –ø–æ–¥–∑–µ–º–Ω–∞—è –ø–∞—Ä–∫–æ–≤–∫–∞
            const backgroundColor = floor === 0 ? '#fff2e8' : '#e6f7ff'
            row[connectionKey] = {
              floor,
              backgroundColor,
              type: 'underground',
            }
          }
        }
        // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é —è—á–µ–π–∫—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º floor
        else {
          row[connectionKey] = {
            floor,
            backgroundColor: 'transparent',
            type: 'empty',
          }
        }
      }


      data.push(row)
    }

    console.log('üîç ProjectCardModal: Generated table data:', {
      totalRows: data.length,
      firstFloor: data[0]?.floor,
      lastFloor: data[data.length - 1]?.floor,
      hasNegativeFloors: data.some(row => (row.floor as number) < 0),
      negativeFloors: data.filter(row => (row.floor as number) < 0).map(row => row.floor as number)
    })

    return data
  }, [blocks, stylobates, undergroundParking])

  // –£–ë–†–ê–ù–û: –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, —Ç–æ–ª—å–∫–æ –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –¥–ª—è >48 —ç—Ç–∞–∂–µ–π
  const scalingStyles = useMemo(() => {
    // –ú–ê–°–®–¢–ê–ë–ò–†–£–ï–ú–´–ï –°–¢–ò–õ–ò –ó–ê–ì–û–õ–û–í–ö–û–í - –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –í–°–ï–ì–î–ê
    let styles = `
      /* –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Ç–∞–±–ª–∏—Ü—ã —Å –ø–æ–≤—ã—à–µ–Ω–Ω–æ–π —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ—Å—Ç—å—é */
      .building-table.ant-table-wrapper .ant-table-thead th,
      .building-table .ant-table .ant-table-thead th {
        font-size: ${Math.round(10 * scale)}px !important;
      }
      .building-table.ant-table-wrapper .ant-table-thead > tr > th,
      .building-table .ant-table .ant-table-thead > tr > th {
        font-size: ${Math.round(12 * scale)}px !important;
      }
      /* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –ø–æ–ª–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ */
      .ant-modal .building-table .ant-table-thead th {
        font-size: ${Math.round(10 * scale)}px !important;
      }
      .ant-modal .building-table .ant-table-thead > tr > th {
        font-size: ${Math.round(12 * scale)}px !important;
      }
    `

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è —Å–∫—Ä–æ–ª–ª–∏—Ä—É–µ–º—ã—Ö —Ç–∞–±–ª–∏—Ü >48 —ç—Ç–∞–∂–µ–π
    if (scalingInfo.needsScrolling && scalingInfo.tableScrollHeight) {
      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –¥–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —ç—Ç–∞–∂–µ–π
      const scrollHeight = parseFloat(scalingInfo.tableScrollHeight)
      const adjustedScrollHeight = `${Math.max(400, scrollHeight - 40)}px` // –£–º–µ–Ω—å—à–∞–µ–º –Ω–∞ 40px –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏

      console.log('üîç Scroll adjustments:', {
        originalHeight: scalingInfo.tableScrollHeight,
        adjustedHeight: adjustedScrollHeight,
        totalRows: scalingInfo.totalFloors,
        expectedTableHeight: scalingInfo.totalFloors * 12
      })

      styles += `
        .building-table-scrollable .ant-table-container {
          height: ${adjustedScrollHeight} !important;
          max-height: ${adjustedScrollHeight} !important;
        }
        .building-table-scrollable .ant-table-body {
          height: ${adjustedScrollHeight} !important;
          max-height: ${adjustedScrollHeight} !important;
          overflow-y: scroll !important;
        }
      `
    }

    console.log('üîç ProjectCardModal: –§–∏–Ω–∞–ª—å–Ω—ã–µ scalingStyles:', {
      stylesLength: styles.length,
      hasHeaderStyles: styles.includes('ant-table-thead'),
      stylesPreview: styles.substring(0, 200)
    })

    return styles
  }, [scalingInfo, scale])

  const tableColumns = useMemo(() => {
    const columns: Array<{
      title: React.ReactNode
      dataIndex: string
      key: string
      width: number
      render: (
        cell: {
          floor: number
          backgroundColor: string
          blockName?: string
          type?: string
          name?: string
        } | null,
      ) => React.ReactNode
    }> = []

    // –î–æ–±–∞–≤–ª—è–µ–º –ª–µ–≤—ã–π –æ—Ç—Å—Ç—É–ø 50px
    columns.push({
      title: '',
      dataIndex: 'left_margin',
      key: 'left_margin',
      width: 50,
      render: () => null, // –ü—É—Å—Ç–∞—è –∫–æ–ª–æ–Ω–∫–∞ –¥–ª—è –æ—Ç—Å—Ç—É–ø–∞
    })

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫ –∑–∞—Ä–∞–Ω–µ–µ (–∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ 95vw)
    const totalBlocks = blocks.length
    const totalConnections = Math.max(0, blocks.length - 1)
    const modalWidth = typeof window !== 'undefined' ? window.innerWidth * 0.95 - 64 : 1800 // 64px = 32px padding —Å –∫–∞–∂–¥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã
    const requiredWidth = 50 + (totalBlocks + totalConnections) * 100 // 50px –ª–µ–≤—ã–π –æ—Ç—Å—Ç—É–ø + –ø–æ 100px –Ω–∞ –∫–æ–ª–æ–Ω–∫—É

    let blockWidth = 100
    let connectionWidth = 100

    if (requiredWidth > modalWidth) {
      // –£–º–µ–Ω—å—à–∞–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Å–∫—Ä–æ–ª–ª–∞
      const availableWidthForBlocks = modalWidth - 50 // –í—ã—á–∏—Ç–∞–µ–º –ª–µ–≤—ã–π –æ—Ç—Å—Ç—É–ø
      blockWidth = Math.floor(availableWidthForBlocks / (totalBlocks + totalConnections))
      connectionWidth = blockWidth
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ—Ä–ø—É—Å–∞ –∏ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∏ –º–µ–∂–¥—É –Ω–∏–º–∏
    blocks.forEach((block, index) => {
      // –ö–æ–ª–æ–Ω–∫–∞ –∫–æ—Ä–ø—É—Å–∞ - –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è —à–∏—Ä–∏–Ω–∞
      columns.push({
        title: (
          <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', padding: '2px 0' }}>
            <div style={{ display: 'flex', gap: '2px', alignItems: 'center' }}>
              <button
                onClick={() => handleAddTopFloor(block.id)}
                style={{
                  border: 'none',
                  background: 'none',
                  cursor: 'pointer',
                  fontSize: '9px',
                  padding: '1px',
                  color: '#1677ff',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center'
                }}
                title={`–î–æ–±–∞–≤–∏—Ç—å —ç—Ç–∞–∂ —Å–≤–µ—Ä—Ö—É (${block.name})`}
              >
                <PlusOutlined />
              </button>
              <button
                onClick={() => handleRemoveTopFloor(block.id)}
                style={{
                  border: 'none',
                  background: 'none',
                  cursor: 'pointer',
                  fontSize: '9px',
                  padding: '1px',
                  color: '#1677ff',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center'
                }}
                title={`–£–¥–∞–ª–∏—Ç—å –≤–µ—Ä—Ö–Ω–∏–π —ç—Ç–∞–∂ (${block.name})`}
              >
                <MinusOutlined />
              </button>
            </div>
            <input
              value={block.name}
              onChange={(e) => handleBlockNameChange(block.id, e.target.value)}
              style={{
                fontSize: '10px',
                fontWeight: 'bold',
                margin: '1px 0',
                textAlign: 'center',
                border: '1px solid #d9d9d9',
                borderRadius: '4px',
                padding: '2px 4px',
                width: '80px',
                background: '#fff'
              }}
              title={`–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ—Ä–ø—É—Å–∞`}
            />
            {/* –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ—Ä–ø—É—Å–∞ */}
            <button
              onClick={() => handleDeleteBlock(block.id)}
              style={{
                border: 'none',
                background: 'none',
                cursor: 'pointer',
                fontSize: '10px',
                padding: '1px',
                color: '#ff4d4f',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                margin: '2px 0'
              }}
              title={`–£–¥–∞–ª–∏—Ç—å –∫–æ—Ä–ø—É—Å "${block.name}"`}
            >
              ‚úï
            </button>
            <div style={{ display: 'flex', gap: '2px', alignItems: 'center' }}>
              <button
                onClick={() => handleAddBottomFloor(block.id)}
                style={{
                  border: 'none',
                  background: 'none',
                  cursor: 'pointer',
                  fontSize: '9px',
                  padding: '1px',
                  color: '#1677ff',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center'
                }}
                title={`–î–æ–±–∞–≤–∏—Ç—å —ç—Ç–∞–∂ —Å–Ω–∏–∑—É (${block.name})`}
              >
                <PlusOutlined />
              </button>
              <button
                onClick={() => handleRemoveBottomFloor(block.id)}
                style={{
                  border: 'none',
                  background: 'none',
                  cursor: 'pointer',
                  fontSize: '9px',
                  padding: '1px',
                  color: '#1677ff',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center'
                }}
                title={`–£–¥–∞–ª–∏—Ç—å –Ω–∏–∂–Ω–∏–π —ç—Ç–∞–∂ (${block.name})`}
              >
                <MinusOutlined />
              </button>
            </div>
          </div>
        ),
        dataIndex: `block_${block.id}`,
        key: `block_${block.id}`,
        width: blockWidth,
        render: (cell: { floor: number; backgroundColor: string; blockName?: string } | null) => {
          if (!cell) {
            return (
              <div
                style={{
                  height: '100%',
                  width: '100%',
                  border: 'none',
                  backgroundColor: 'transparent',
                }}
              />
            )
          }

          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –ø–æ–¥–∑–µ–º–Ω—ã–π –ª–∏ —ç—Ç–æ —ç—Ç–∞–∂
          const isUndergroundFloor = cell.floor < 0
          const isParking = undergroundParking.blockIds.includes(block.id)

          return (
            <div
              style={{
                backgroundColor: cell.backgroundColor,
                height: '100%',
                width: '100%',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                fontSize: 8,
                fontWeight: 'bold',
                margin: 0,
                padding: 0,
                boxSizing: 'border-box',
                cursor: isUndergroundFloor || (technicalFloorMode && cell.floor > 0) ? 'pointer' : 'default',
                position: 'relative',
              }}
              onClick={
                isUndergroundFloor
                  ? () => handleBlockParkingToggle(block.id, cell.floor)
                  : technicalFloorMode && cell.floor > 0
                    ? () => handleTechnicalFloorToggle(block.id, cell.floor)
                    : undefined
              }
              title={
                isUndergroundFloor
                  ? isParking
                    ? "–ü–æ–¥–∑–µ–º–Ω–∞—è –ø–∞—Ä–∫–æ–≤–∫–∞ (–∫–ª–∏–∫–Ω–∏—Ç–µ –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è)"
                    : "–ü–æ–¥–∑–µ–º–Ω—ã–π —ç—Ç–∞–∂ (–∫–ª–∏–∫–Ω–∏—Ç–µ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –ø–∞—Ä–∫–æ–≤–∫–∏)"
                  : technicalFloorMode && cell.floor > 0
                    ? (block.technicalFloors?.includes(cell.floor) ? "–¢–µ—Ö.—ç—Ç–∞–∂ (–∫–ª–∏–∫–Ω–∏—Ç–µ –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è)" : "–û–±—ã—á–Ω—ã–π —ç—Ç–∞–∂ (–∫–ª–∏–∫–Ω–∏—Ç–µ –¥–ª—è –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏—è –≤ —Ç–µ—Ö.—ç—Ç–∞–∂)")
                    : undefined
              }
            >
              {cell.floor}
              {isUndergroundFloor && (
                <div style={{
                  position: 'absolute',
                  top: '50%',
                  left: '50%',
                  transform: 'translate(-50%, -50%)',
                  fontSize: '4px',
                  opacity: 0.7,
                  pointerEvents: 'none'
                }}>
                  {isParking ? 'üöó' : '‚è∏'}
                </div>
              )}
            </div>
          )
        },
      })

      // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –º–µ–∂–¥—É –∫–æ—Ä–ø—É—Å–∞–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ—Ä–ø—É—Å–∞)
      if (index < blocks.length - 1) {
        const nextBlock = blocks[index + 1]

        // –ù–∞–π–¥–µ–º —Å—Ç–∏–ª–æ–±–∞—Ç –º–µ–∂–¥—É —ç—Ç–∏–º–∏ –∫–æ—Ä–ø—É—Å–∞–º–∏
        const stylobateBetween = stylobates.find(
          (s) => s.fromBlockId === block.id && s.toBlockId === nextBlock.id,
        )

        // –ö–æ–ª–æ–Ω–∫–∞ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∞ (–¥–ª—è —Å—Ç–∏–ª–æ–±–∞—Ç–æ–≤ –∏ –ø–æ–¥–∑–µ–º–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π)
        columns.push({
          title: stylobateBetween ? stylobateBetween.name : '', // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∏–ª–æ–±–∞—Ç–∞
          dataIndex: `connection_${block.id}_${nextBlock.id}`,
          key: `connection_${block.id}_${nextBlock.id}`,
          width: connectionWidth,
          render: (
            cell: { floor: number; backgroundColor: string; type?: string; name?: string } | null,
          ) => {
            // –ü–æ–ª—É—á–∞–µ–º floor –∏–∑ —Å–∞–º–æ–π —è—á–µ–π–∫–∏
            const floor = cell?.floor || 0

            if (!cell || cell.type === 'empty') {
              return (
                <div
                  style={{
                    height: '100%',
                    width: '100%',
                    border: 'none',
                    backgroundColor: 'transparent',
                    cursor: 'pointer',
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                  }}
                  onClick={() => handleConnectionSpaceClick(block.id, nextBlock.id, floor)}
                  title={
                    floor < 0
                      ? "–ö–ª–∏–∫–Ω–∏—Ç–µ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø–æ–¥–∑–µ–º–Ω–æ–π —Å–≤—è–∑–∏"
                      : floor > 0
                      ? "–ö–ª–∏–∫–Ω–∏—Ç–µ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–∏–ª–æ–±–∞—Ç–∞"
                      : "–ö–ª–∏–∫–Ω–∏—Ç–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–≤—è–∑–∏"
                  }
                >
                  <div style={{ fontSize: '6px', color: '#ccc' }}>+</div>
                </div>
              )
            }
            return (
              <div
                style={{
                  backgroundColor: cell.backgroundColor,
                  height: '100%',
                  width: '100%',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  fontSize: 8,
                  margin: 0,
                  padding: 0,
                  boxSizing: 'border-box',
                  cursor: 'pointer',
                  position: 'relative',
                }}
                onClick={() => handleConnectionSpaceClick(block.id, nextBlock.id, floor)}
                title={
                  floor < 0
                    ? "–ü–æ–¥–∑–µ–º–Ω–∞—è —Å–≤—è–∑—å (–∫–ª–∏–∫–Ω–∏—Ç–µ –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è)"
                    : "–°—Ç–∏–ª–æ–±–∞—Ç (–∫–ª–∏–∫–Ω–∏—Ç–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è)"
                }
              >
                {cell.floor}
                <div style={{
                  position: 'absolute',
                  top: '50%',
                  left: '50%',
                  transform: 'translate(-50%, -50%)',
                  fontSize: '6px',
                  opacity: 0.7
                }}>
                  √ó
                </div>
              </div>
            )
          },
        })
      }
    })



    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–ø—É—Å–∞
    columns.push({
      title: (
        <button
          onClick={handleAddNewBlock}
          style={{
            border: 'none',
            background: 'none',
            cursor: 'pointer',
            fontSize: '16px',
            color: '#1677ff',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            width: '100%',
            height: '100%'
          }}
          title="–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫–æ—Ä–ø—É—Å"
        >
          +
        </button>
      ),
      dataIndex: 'add_block_button',
      key: 'add_block_button',
      width: 50,
      render: () => null, // –ü—É—Å—Ç–∞—è –∫–æ–ª–æ–Ω–∫–∞, –∫–Ω–æ–ø–∫–∞ —Ç–æ–ª—å–∫–æ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
    })

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∞–≤—ã–π –æ—Ç—Å—Ç—É–ø
    const finalUsedWidth = columns.reduce((sum, col) => sum + col.width, 0)
    const rightPadding = Math.max(0, modalWidth - finalUsedWidth)

    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤—ã–π –æ—Ç—Å—Ç—É–ø –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–æ–ª–æ–Ω–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ
    if (rightPadding > 10) {
      columns.push({
        title: '',
        dataIndex: 'right_margin',
        key: 'right_margin',
        width: rightPadding,
        render: () => null, // –ü—É—Å—Ç–∞—è –∫–æ–ª–æ–Ω–∫–∞ –¥–ª—è –ø—Ä–∞–≤–æ–≥–æ –æ—Ç—Å—Ç—É–ø–∞
      })
    }

    return columns
  }, [blocks, stylobates, undergroundParking.blockIds, technicalFloorMode, handleAddNewBlock, handleDeleteBlock, handleAddTopFloor, handleRemoveTopFloor, handleAddBottomFloor, handleRemoveBottomFloor, handleConnectionSpaceClick, handleBlockParkingToggle, handleTechnicalFloorToggle, handleBlockNameChange])

  return (
    <>
      <style>{tableStyles + scalingStyles}</style>
      <Modal
        open={visible}
        title={
          <span>
            {scalingInfo.needsScrolling
              ? `–ö–∞—Ä—Ç–æ—á–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ (${scalingInfo.totalFloors} —ç—Ç–∞–∂–µ–π - —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π)`
              : scalingInfo.totalFloors > 0
                ? `–ö–∞—Ä—Ç–æ—á–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ (${scalingInfo.totalFloors} —ç—Ç–∞–∂–µ–π - –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ—Ç—Å—è)`
                : '–ö–∞—Ä—Ç–æ—á–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞'}
            {hasUnsavedChanges && (
              <span style={{ color: '#ff4d4f', marginLeft: '8px' }}>
                ‚Ä¢ –ï—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
              </span>
            )}
          </span>
        }
        onCancel={() => {
          if (hasUnsavedChanges) {
            Modal.confirm({
              title: '–ù–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è',
              content: '–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è. –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è?',
              okText: '–î–∞, –∑–∞–∫—Ä—ã—Ç—å',
              cancelText: '–û—Ç–º–µ–Ω–∞',
              onOk: onCancel,
            })
          } else {
            onCancel()
          }
        }}
        onOk={handleSave}
        width="95vw"
        centered={true}
        styles={{
          body: {
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –¥–ª—è Ant Design 5 –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ 95% —ç–∫—Ä–∞–Ω–∞
            height: 'calc(95vh - 110px)', // 110px –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫–Ω–æ–ø–∫–∏ –≤ Ant Design 5
            maxHeight: 'calc(95vh - 110px)',
            overflow: 'hidden', // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ —Ç–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–∏ —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –Ω—É–∂–Ω–∞
            padding: '16px',
            display: 'flex',
            flexDirection: 'column',
          },
          content: {
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∞–º–æ–≥–æ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è 95% –≤—ã—Å–æ—Ç—ã —ç–∫—Ä–∞–Ω–∞
            height: '95vh',
            maxHeight: '95vh',
            display: 'flex',
            flexDirection: 'column',
          },
        }}
        okText="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"
        cancelText="–û—Ç–º–µ–Ω–∞"
        footer={(_, { OkBtn, CancelBtn }) => (
          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
            <div>
              {hasUnsavedChanges && (
                <button
                  onClick={handleReset}
                  style={{
                    background: 'none',
                    border: '1px solid #d9d9d9',
                    borderRadius: '6px',
                    padding: '4px 15px',
                    cursor: 'pointer',
                    color: '#666',
                    fontSize: '14px'
                  }}
                  title="–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è"
                >
                  –°–±—Ä–æ—Å–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
                </button>
              )}
            </div>
            <div style={{ display: 'flex', gap: '8px' }}>
              <CancelBtn />
              <OkBtn />
            </div>
          </div>
        )}
      >
        <div
          style={{
            marginBottom: 16,
            display: 'flex',
            justifyContent: 'space-between',
            alignItems: 'flex-start',
            gap: 16,
            flexShrink: 0,
          }}
        >
          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ */}
          <div style={{ flex: '0 0 auto' }}>
            <Title level={4} style={{ marginBottom: 8 }}>
              {projectData.name}
            </Title>
            <Text>{projectData.address}</Text>
            <br />
            <Text>
              –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ä–ø—É—Å–æ–≤: {blocks.length} (
              {blocks.map((b) => `${b.bottomFloor}; ${b.topFloor}`).join(', ')})
            </Text>
          </div>

          {/* –≠–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
          <div style={{ flex: 1, minWidth: 500 }}>
            <div style={{ display: 'flex', gap: 24, flexWrap: 'wrap', alignItems: 'flex-start' }}>
              {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é - –≠—Ç–∞–∂–∏ –∫–æ—Ä–ø—É—Å–æ–≤ */}
              <div style={{ flex: '1 1 240px' }}>
                <Text strong style={{ fontSize: '1.1em', marginBottom: 8, display: 'block' }}>
                  –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:
                </Text>
                <div style={{ fontSize: '0.95em', color: '#666', lineHeight: 1.4 }}>
                  <strong>–≠—Ç–∞–∂–∏ –∫–æ—Ä–ø—É—Å–æ–≤:</strong><br/>
                  ‚Ä¢ <strong>–ö–Ω–æ–ø–∫–∏ ‚Üë‚Üì</strong> –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö - –¥–æ–±–∞–≤–∏—Ç—å/—É–±—Ä–∞—Ç—å —ç—Ç–∞–∂–∏<br/>
                  ‚Ä¢ <strong>–ö–ª–∏–∫ –ø–æ –ø–æ–¥–∑–µ–º–Ω–æ–º—É —ç—Ç–∞–∂—É</strong> - –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –ø–∞—Ä–∫–æ–≤–∫—É üöó
                </div>
              </div>

              {/* –°–≤—è–∑–∏ –º–µ–∂–¥—É –∫–æ—Ä–ø—É—Å–∞–º–∏ - –æ—Ç–¥–µ–ª—å–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞ —Å–ø—Ä–∞–≤–∞ */}
              <div style={{ flex: '1 1 240px' }}>
                <Text strong style={{ fontSize: '1.1em', marginBottom: 8, display: 'block', opacity: 0 }}>
                  .
                </Text>
                <div style={{ fontSize: '0.95em', color: '#666', lineHeight: 1.4 }}>
                  <strong>–°–≤—è–∑–∏ –º–µ–∂–¥—É –∫–æ—Ä–ø—É—Å–∞–º–∏:</strong><br/>
                  ‚Ä¢ <strong>–ü–æ–¥–∑–µ–º–Ω—ã–µ —ç—Ç–∞–∂–∏:</strong> –ø–æ–¥–∑–µ–º–Ω—ã–µ —Å–≤—è–∑–∏<br/>
                  ‚Ä¢ <strong>–°—Ç–∏–ª–æ–±–∞—Ç—ã:</strong> –∫–ª–∏–∫ –≤—ã—à–µ –∫–æ—Ä–ø—É—Å–æ–≤ = –¥–æ–±–∞–≤–∏—Ç—å, –∫–ª–∏–∫ –ø–æ —ç—Ç–∞–∂—É = —É–±—Ä–∞—Ç—å<br/>
                  ‚Ä¢ <strong>–ö–ª–∏–∫ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–≤—è–∑–∏</strong> –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                </div>
              </div>

              {/* –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —ç—Ç–∞–∂ - —á–µ–∫-–±–æ–∫—Å */}
              <div style={{ flex: '1 1 200px' }}>
                <Text strong style={{ fontSize: '1.1em', marginBottom: 8, display: 'block', opacity: 0 }}>
                  .
                </Text>
                <div style={{ fontSize: '0.95em', color: '#666', lineHeight: 1.4 }}>
                  <label style={{ display: 'flex', alignItems: 'center', gap: 6, cursor: 'pointer' }}>
                    <input
                      type="checkbox"
                      checked={technicalFloorMode}
                      onChange={(e) => setTechnicalFloorMode(e.target.checked)}
                      style={{ margin: 0 }}
                    />
                    <strong>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —ç—Ç–∞–∂</strong>
                  </label>
                  <div style={{ marginTop: 4, fontSize: '0.85em' }}>
                    –ü—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ –∫–ª–∏–∫–∞–π—Ç–µ –Ω–∞ —ç—Ç–∞–∂–∏ –∫–æ—Ä–ø—É—Å–æ–≤ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤ —Ç–µ—Ö.—ç—Ç–∞–∂
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* –¶–≤–µ—Ç–æ–≤–∞—è –ª–µ–≥–µ–Ω–¥–∞ */}
          <div
            style={{
              display: 'flex',
              flexDirection: 'column',
              gap: 6,
              minWidth: 250,
              flexShrink: 0,
            }}
          >
            <Text strong style={{ fontSize: '0.9em', marginBottom: 4 }}>
              –õ–µ–≥–µ–Ω–¥–∞:
            </Text>
            <div
              style={{
                display: 'grid',
                gridTemplateColumns: '1fr 1fr',
                gridTemplateRows: '1fr 1fr 1fr',
                gap: 6,
              }}
            >
              <div style={{ display: 'flex', alignItems: 'center', gap: 6 }}>
                <div
                  style={{
                    width: '0.8em',
                    height: '0.8em',
                    backgroundColor: '#e6f7ff',
                    border: '1px solid #91d5ff',
                    borderRadius: 2,
                    flexShrink: 0,
                  }}
                />
                <Text style={{ fontSize: '0.7em', lineHeight: 1.2 }}>–ü–æ–¥–∑–µ–º–Ω—ã–π –ø–∞—Ä–∫–∏–Ω–≥</Text>
              </div>
              <div style={{ display: 'flex', alignItems: 'center', gap: 6 }}>
                <div
                  style={{
                    width: '0.8em',
                    height: '0.8em',
                    backgroundColor: '#f6ffed',
                    border: '1px solid #b7eb8f',
                    borderRadius: 2,
                    flexShrink: 0,
                  }}
                />
                <Text style={{ fontSize: '0.7em', lineHeight: 1.2 }}>–¢–∏–ø–æ–≤–æ–π –∫–æ—Ä–ø—É—Å</Text>
              </div>
              <div style={{ display: 'flex', alignItems: 'center', gap: 6 }}>
                <div
                  style={{
                    width: '0.8em',
                    height: '0.8em',
                    backgroundColor: '#fffbe6',
                    border: '1px solid #ffe58f',
                    borderRadius: 2,
                    flexShrink: 0,
                  }}
                />
                <Text style={{ fontSize: '0.7em', lineHeight: 1.2 }}>–°—Ç–∏–ª–æ–±–∞—Ç</Text>
              </div>
              <div style={{ display: 'flex', alignItems: 'center', gap: 6 }}>
                <div
                  style={{
                    width: '0.8em',
                    height: '0.8em',
                    backgroundColor: '#fff2e8',
                    border: '1px solid #ffbb96',
                    borderRadius: 2,
                    flexShrink: 0,
                  }}
                />
                <Text style={{ fontSize: '0.7em', lineHeight: 1.2 }}>–ö—Ä–æ–≤–ª—è</Text>
              </div>
              <div style={{ display: 'flex', alignItems: 'center', gap: 6 }}>
                <div
                  style={{
                    width: '0.8em',
                    height: '0.8em',
                    backgroundColor: '#003d82',
                    border: '1px solid #001529',
                    borderRadius: 2,
                    flexShrink: 0,
                  }}
                />
                <Text style={{ fontSize: '0.7em', lineHeight: 1.2 }}>–¢–µ—Ö.—ç—Ç–∞–∂</Text>
              </div>
            </div>
          </div>
        </div>

        {/* –¢–∞–±–ª–∏—á–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ä–ø—É—Å–æ–≤ */}
        <div
          style={{
            backgroundColor: '#fafafa',
            border: '1px solid #d9d9d9',
            flex: 1, // –ó–∞–Ω–∏–º–∞–µ—Ç –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –º–µ—Å—Ç–æ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
            overflow: 'hidden', // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
            minHeight: 0, // –í–∞–∂–Ω–æ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã flex
            display: 'flex',
            flexDirection: 'column',
          }}
        >
          <Table
            dataSource={tableData}
            columns={tableColumns}
            pagination={false}
            scroll={{
              x: tableColumns.reduce((sum, col) => sum + col.width, 0),
              // –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –¥–ª—è –∑–¥–∞–Ω–∏–π >60 —ç—Ç–∞–∂–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É, –¥–ª—è ‚â§60 - –±–µ–∑ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
              ...(scalingInfo.needsScrolling && scalingInfo.tableScrollHeight
                ? { y: parseInt(scalingInfo.tableScrollHeight) }
                : {}),
            }}
            size="small"
            bordered={false}
            showHeader={true}
            tableLayout="fixed"
            style={{
              backgroundColor: 'transparent',
              flex: 1, // –¢–∞–±–ª–∏—Ü–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –≤—Å—ë –¥–æ—Å—Ç—É–ø–Ω–æ–µ –º–µ—Å—Ç–æ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
              height: 'auto',
            }}
            className={(() => {
              // –£–ü–†–û–©–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: ‚â§48 —ç—Ç–∞–∂–µ–π - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å—Ç–∏–ª–∏, >48 - –ø—Ä–æ–∫—Ä—É—Ç–∫–∞
              const className = scalingInfo.needsScrolling
                ? 'building-table building-table-scrollable'
                : 'building-table'
              console.log(
                'üîç ProjectCardModal: Applied className:',
                className,
                'Scrolling:',
                scalingInfo.needsScrolling,
                'Scroll height:',
                scalingInfo.tableScrollHeight,
                'Total floors:',
                scalingInfo.totalFloors,
                'Table data rows:',
                tableData.length,
                'Min floor:',
                scalingInfo.minBottomFloor,
                'Max floor:',
                scalingInfo.maxTopFloor
              )
              return className
            })()}
          />
        </div>
        <style>{`
          .building-table .ant-table {
            table-layout: fixed !important;
            width: 100% !important;
          }
          .building-table .ant-table-container {
            overflow: hidden !important;
          }
          .building-table-scaled .ant-table-container {
            overflow: visible !important;
            height: 100% !important;
            display: flex !important;
            flex-direction: column !important;
          }
          .building-table-scrollable .ant-table-container {
            overflow: hidden !important;
            display: flex !important;
            flex-direction: column !important;
          }
          .building-table .ant-table-content {
            overflow: auto !important;
          }
          .building-table-scaled .ant-table-content {
            overflow: visible !important;
            flex: 1 !important;
            display: flex !important;
            flex-direction: column !important;
          }
          .building-table-scrollable .ant-table-content {
            overflow: hidden !important;
            height: 100% !important;
            flex: 1 !important;
            display: flex !important;
            flex-direction: column !important;
          }
          .building-table .ant-table-body {
            overflow: auto !important;
          }
          .building-table-scaled .ant-table-body {
            overflow: visible !important;
            flex: 1 !important;
          }
          .building-table-scrollable .ant-table-body {
            overflow-x: hidden !important;
            flex: 1 !important;
          }
          .building-table .ant-table-tbody {
            overflow: visible !important;
          }
          .building-table-scrollable .ant-table-tbody {
            overflow: visible !important;
          }
          .building-table .ant-table-tbody > tr {
            height: 12px !important;
            min-height: 12px !important;
          }
          .building-table .ant-table-tbody > tr > td {
            padding: 0 !important;
            border: none !important;
            vertical-align: middle !important;
            overflow: hidden !important;
            box-sizing: border-box !important;
            height: 12px !important;
            min-height: 12px !important;
          }
          .building-table .ant-table-tbody > tr > td > div:not([style*="transparent"]) {
            border: 1px solid #d9d9d9 !important;
          }
          .building-table .ant-table-thead > tr > th {
            padding: 2px 4px !important;
            background: #fafafa !important;
            border: 1px solid #d9d9d9 !important;
            text-align: center !important;
            /* font-size: 12px —É–¥–∞–ª–µ–Ω - –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ scalingStyles */
            overflow: hidden !important;
            box-sizing: border-box !important;
            height: 40px !important;
          }
          .building-table .ant-table-tbody > tr:hover > td {
            background: transparent !important;
          }
        `}</style>
      </Modal>
    </>
  )
}

import { useCallback, useState, useEffect, useMemo, useRef } from 'react'
import { Typography, Pagination } from 'antd'
import { useScale } from '@/shared/contexts/ScaleContext'
import { useFiltersState } from './hooks/useFiltersState'
import { useChessboardData } from './hooks/useChessboardData'
import { useColumnSettings } from './hooks/useColumnSettings'
import { useTableOperations } from './hooks/useTableOperations'
import { useVersionsState } from './hooks/useVersionsState'
import { ChessboardFilters } from './components/ChessboardFilters'
import { ChessboardTable } from './components/ChessboardTable'
import { ColumnSettingsDrawer } from './components/ColumnSettingsDrawer'
import { VersionsModal } from './components/VersionsModal'
import ChessboardSetsModal from '../ChessboardSetsModal'
import { chessboardSetsApi } from '@/entities/chessboard/api/chessboard-sets-api'

const { Title } = Typography

export default function Chessboard() {
  const { scale } = useScale()

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
  const [currentPage, setCurrentPage] = useState(() => {
    const saved = localStorage.getItem('chessboard-pagination-page')
    return saved ? parseInt(saved, 10) : 1
  })
  const [pageSize, setPageSize] = useState(() => {
    const saved = localStorage.getItem('chessboard-pagination-size')
    return saved ? parseInt(saved, 10) : 100
  })

  // –•—É–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
  const {
    filters,
    appliedFilters,
    filtersCollapsed,
    hasActiveFilters,
    hasAppliedFilters,
    updateFilter,
    updateCascadingFilter,
    resetFilters,
    applyFilters,
    updateDocumentVersions,
    toggleFiltersCollapsed,
    setAppliedFilters,
  } = useFiltersState()

  const { data, isLoading, error, statistics, documentVersions, documentationInfo } = useChessboardData({
    appliedFilters,
    filters,
    enabled: !!appliedFilters.project_id,
  })

  const {
    columnSettings,
    drawerVisible,
    toggleColumnVisibility,
    moveColumn,
    resetToDefault,
    toggleAllColumns,
    openDrawer,
    closeDrawer,
    getVisibleColumns,
    getAllColumnsWithVisibility,
  } = useColumnSettings()

  const {
    tableMode,
    hasUnsavedChanges,
    setMode,
    setSelectedRowKeys,
    addNewRow,
    removeNewRow,
    copyRow,
    updateNewRow,
    startEditing,
    updateEditedRow,
    updateRowColor,
    startEditBackup,
    stopEditBackup,
    updateEditingRow,
    saveChanges,
    cancelChanges,
    deleteSelectedRows,
    getDisplayData,
  } = useTableOperations()

  // –•—É–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏—è–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
  const {
    versionsModalOpen,
    selectedVersions,
    openVersionsModal,
    closeVersionsModal,
    handleVersionSelect,
    applyVersions,
  } = useVersionsState()

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–∞–ª–æ–º –∫–æ–º–ø–ª–µ–∫—Ç–æ–≤
  const [setsModalOpen, setSetsModalOpen] = useState(false)

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ —à–∞—Ö–º–∞—Ç–∫–∏
  const [currentStatus, setCurrentStatus] = useState<string | undefined>(undefined)

  // Ref –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä—É—á–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ (—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ useEffect)
  const statusSetManuallyRef = useRef(false)

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–º–ø–ª–µ–∫—Ç–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
  useEffect(() => {
    const detectSetStatus = async () => {
      if (!appliedFilters.project_id) {
        setCurrentStatus(undefined)
        statusSetManuallyRef.current = false
        return
      }

      // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é (–∏–∑ –∫–æ–º–ø–ª–µ–∫—Ç–∞), –Ω–µ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –µ–≥–æ
      if (statusSetManuallyRef.current) {
        console.log('üîç –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ - —Å—Ç–∞—Ç—É—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é') // LOG: –ø—Ä–æ–ø—É—Å–∫ –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        return
      }

      try {
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–º–ø–ª–µ–∫—Ç–∞
        const searchFilters = {
          project_id: appliedFilters.project_id,
          documentation_id: appliedFilters.documentation_code_ids.length > 0 ? appliedFilters.documentation_code_ids[0] : undefined,
          tag_id: appliedFilters.documentation_section_ids.length > 0 ? Number(appliedFilters.documentation_section_ids[0]) : undefined,
          block_ids: appliedFilters.block_ids.length > 0 ? appliedFilters.block_ids : undefined,
          cost_category_ids: appliedFilters.cost_category_ids.length > 0 ? appliedFilters.cost_category_ids.map(Number) : undefined,
          cost_type_ids: appliedFilters.detail_cost_category_ids.length > 0 ? appliedFilters.detail_cost_category_ids.map(Number) : undefined,
        }

        console.log('üîç –ü–æ–∏—Å–∫ –∫–æ–º–ø–ª–µ–∫—Ç–∞ –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º:', searchFilters) // LOG: –ø–æ–∏—Å–∫ –∫–æ–º–ø–ª–µ–∫—Ç–∞

        const matchedSet = await chessboardSetsApi.findSetByFilters(searchFilters)

        if (matchedSet && matchedSet.status) {
          console.log('‚úÖ –ù–∞–π–¥–µ–Ω –∫–æ–º–ø–ª–µ–∫—Ç —Å —Å—Ç–∞—Ç—É—Å–æ–º:', matchedSet.status) // LOG: –Ω–∞–π–¥–µ–Ω –∫–æ–º–ø–ª–µ–∫—Ç
          setCurrentStatus(matchedSet.status.id)
          statusSetManuallyRef.current = false // –≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
        } else {
          console.log('‚ùå –ö–æ–º–ø–ª–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –±–µ–∑ —Å—Ç–∞—Ç—É—Å–∞') // LOG: –∫–æ–º–ø–ª–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
          setCurrentStatus(undefined)
          statusSetManuallyRef.current = false
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–º–ø–ª–µ–∫—Ç–∞:', error) // LOG: –æ—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞
        setCurrentStatus(undefined)
        statusSetManuallyRef.current = false
      }
    }

    detectSetStatus()
  }, [
    appliedFilters.project_id,
    appliedFilters.documentation_code_ids,
    appliedFilters.documentation_section_ids,
    appliedFilters.block_ids,
    appliedFilters.cost_category_ids,
    appliedFilters.detail_cost_category_ids,
    appliedFilters.documentation_version_ids
  ])

  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —Ä—É—á–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
  useEffect(() => {
    statusSetManuallyRef.current = false
  }, [appliedFilters.project_id])

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
  const handleAddRow = useCallback(() => {
    if (appliedFilters.project_id) {
      addNewRow(appliedFilters.project_id)
    }
  }, [appliedFilters.project_id, addNewRow])

  const handleRowUpdate = useCallback(
    (rowId: string, updates: any) => {
      console.log('üìù handleRowUpdate called:', {
        rowId,
        updates,
        currentMode: tableMode.mode
      }) // LOG: –≥–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫

      if (tableMode.mode === 'add') {
        console.log('üìù Routing to updateNewRow') // LOG: –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∫ –Ω–æ–≤—ã–º —Å—Ç—Ä–æ–∫–∞–º
        updateNewRow(rowId, updates)
      } else if (tableMode.mode === 'edit') {
        console.log('üìù Routing to updateEditedRow') // LOG: –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–º —Å—Ç—Ä–æ–∫–∞–º
        updateEditedRow(rowId, updates)
      } else {
        console.warn('üìù Unknown table mode, ignoring update:', tableMode.mode) // LOG: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º
      }
    },
    [tableMode.mode, updateNewRow, updateEditedRow],
  )

  const handleStartEditing = useCallback(
    (rowId: string, rowData?: RowData) => {
      console.log(
        'üîç DEBUG: handleStartEditing –≤—ã–∑–≤–∞–Ω –¥–ª—è —Å—Ç—Ä–æ–∫–∏:',
        rowId,
        '—Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º:',
        tableMode.mode,
      ) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

      if (tableMode.mode === 'view') {
        console.log('üîç DEBUG: –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º edit –∏ –Ω–∞—á–∏–Ω–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ') // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        setMode('edit')
        startEditing(rowId)
      } else if (tableMode.mode === 'edit') {
        // –ï—Å–ª–∏ —É–∂–µ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º backup –ø–æ–¥—Ö–æ–¥ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        console.log('üîç DEBUG: –£–∂–µ –≤ —Ä–µ–∂–∏–º–µ edit, –Ω–∞—á–∏–Ω–∞–µ–º backup —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ') // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        if (rowData) {
          startEditBackup(rowId, rowData)
        }
      } else {
        console.log('üîç DEBUG: –†–µ–∂–∏–º –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:', tableMode.mode) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
      }
    },
    [tableMode.mode, setMode, startEditing, startEditBackup],
  )

  const handleBackupRowUpdate = useCallback(
    (rowId: string, updates: any) => {
      console.log('üîç DEBUG: handleBackupRowUpdate –¥–ª—è —Å—Ç—Ä–æ–∫–∏:', rowId, updates) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
      updateEditingRow(rowId, updates)
    },
    [updateEditingRow],
  )

  const handleRowDelete = useCallback(
    (rowId: string) => {
      if (tableMode.mode === 'add') {
        removeNewRow(rowId)
      }
    },
    [tableMode.mode, removeNewRow],
  )

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
  const handlePageChange = useCallback((page: number) => {
    setCurrentPage(page)
    localStorage.setItem('chessboard-pagination-page', page.toString())
  }, [])

  const handlePageSizeChange = useCallback((current: number, size: number) => {
    setCurrentPage(1) // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞
    setPageSize(size)
    localStorage.setItem('chessboard-pagination-page', '1')
    localStorage.setItem('chessboard-pagination-size', size.toString())
  }, [])

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–µ—Ä—Å–∏–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
  const handleOpenVersionsModal = useCallback(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ö
    if (filters.documentationCode.length > 0) {
      // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
      if (documentationInfo.length > 0 && documentVersions.length > 0) {
        openVersionsModal(documentationInfo, documentVersions)
      } else {
        console.log('üìã –î–∞–Ω–Ω—ã–µ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –î–æ–∫—É–º–µ–Ω—Ç—ã:', documentationInfo.length, '–í–µ—Ä—Å–∏–∏:', documentVersions.length) // LOG: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö
      }
    }
  }, [filters.documentationCode, documentationInfo, documentVersions, openVersionsModal])

  const handleApplyVersions = useCallback(() => {
    const requiredDocIds = documentationInfo.map(doc => doc.id)
    applyVersions(requiredDocIds, (versions) => {
      console.log('üîç –ü—Ä–∏–º–µ–Ω–µ–Ω—ã –≤–µ—Ä—Å–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:', versions) // LOG: –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–π
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏–∏ –≤ appliedFilters
      updateDocumentVersions(versions)
    })
  }, [documentationInfo, applyVersions, updateDocumentVersions])

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–ø–ª–µ–∫—Ç–æ–≤
  const handleOpenSetsModal = useCallback(() => {
    if (filters.project) {
      setSetsModalOpen(true)
    }
  }, [filters.project])

  const handleCloseSetsModal = useCallback(() => {
    setSetsModalOpen(false)
  }, [])

  const handleSelectSet = useCallback(async (setId: string) => {
    console.log('üîç –í—ã–±—Ä–∞–Ω –∫–æ–º–ø–ª–µ–∫—Ç:', setId) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–ª–µ–∫—Ç–∞
      const set = await chessboardSetsApi.getSetById(setId)
      if (!set) {
        console.error('–ö–æ–º–ø–ª–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω:', setId) // LOG: –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
        return
      }

      console.log('üîç –ó–∞–≥—Ä—É–∂–µ–Ω –∫–æ–º–ø–ª–µ–∫—Ç:', set) // LOG: –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–ª–µ–∫—Ç–∞

      // –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∏–∑ –∫–æ–º–ø–ª–µ–∫—Ç–∞
      const setFilters = chessboardSetsApi.getFiltersFromSet(set)
      console.log('üîç –§–∏–ª—å—Ç—Ä—ã –∫–æ–º–ø–ª–µ–∫—Ç–∞:', setFilters) // LOG: —Ñ–∏–ª—å—Ç—Ä—ã

      // –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã
      const updates = []

      if (setFilters.project_id) {
        updates.push(() => updateFilter('project', setFilters.project_id))
      }

      // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä —Ä–∞–∑–¥–µ–ª–∞ (—Ç—ç–≥ –ø—Ä–æ–µ–∫—Ç–∞)
      if (setFilters.tag_id !== undefined) {
        if (setFilters.tag_id === null) {
          updates.push(() => updateFilter('documentationSection', []))
        } else {
          updates.push(() => updateFilter('documentationSection', [String(setFilters.tag_id)]))
        }
      }

      if (setFilters.block_ids && setFilters.block_ids.length > 0) {
        updates.push(() => updateFilter('block', setFilters.block_ids))
      }

      if (setFilters.cost_category_ids && setFilters.cost_category_ids.length > 0) {
        updates.push(() => updateFilter('costCategory', setFilters.cost_category_ids.map(String)))
      }

      if (setFilters.cost_type_ids && setFilters.cost_type_ids.length > 0) {
        updates.push(() => updateFilter('costType', setFilters.cost_type_ids.map(String)))
      }

      // –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –µ—Å–ª–∏ –µ—Å—Ç—å (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç)
      if (set.documents && set.documents.length > 0) {
        const docIds = set.documents.map(doc => doc.documentation_id)
        updates.push(() => updateFilter('documentationCode', docIds))

        // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤–µ—Ä—Å–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        const versionMapping = set.documents.reduce((acc, doc) => {
          acc[doc.documentation_id] = doc.version_id
          return acc
        }, {} as Record<string, string>)
        updates.push(() => updateDocumentVersions(versionMapping))
      } else if (setFilters.documentation_id && setFilters.version_id) {
        // –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
        updates.push(() => updateFilter('documentationCode', [setFilters.documentation_id]))
        updates.push(() => updateDocumentVersions({ [setFilters.documentation_id]: setFilters.version_id }))
      }

      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª
      setSetsModalOpen(false)

      // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
      console.log('üîç –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤:', updates.length) // LOG: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
      for (const update of updates) {
        update()
      }

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–º–ø–ª–µ–∫—Ç–∞ —Å—Ä–∞–∑—É
      if (set.status) {
        console.log('üîç –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–º–ø–ª–µ–∫—Ç–∞:', set.status) // LOG: —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
        setCurrentStatus(set.status.id)
        statusSetManuallyRef.current = true // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ —Ä—É—á–Ω—É—é —É—Å—Ç–∞–Ω–æ–≤–∫—É
      }

      console.log('‚úÖ –í—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã –∫–æ–º–ø–ª–µ–∫—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã, –ø—Ä–∏–º–µ–Ω—è–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ') // LOG: –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏

      // –ù–ï–ú–ï–î–õ–ï–ù–ù–û –ø—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–ª–µ–∫—Ç–∞ (–±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è React)
      const directAppliedFilters = {
        // –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        project_id: setFilters.project_id || '',
        documentation_section_ids: setFilters.tag_id ? [String(setFilters.tag_id)] : [],
        documentation_code_ids: set.documents && set.documents.length > 0
          ? set.documents.map(doc => doc.documentation_id)
          : [],
        documentation_version_ids: appliedFilters.documentation_version_ids,

        // –°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        block_ids: setFilters.block_ids || [],
        cost_category_ids: setFilters.cost_category_ids ? setFilters.cost_category_ids.map(String) : [],
        detail_cost_category_ids: setFilters.cost_type_ids ? setFilters.cost_type_ids.map(String) : [],

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        material_search: '',
      }

      console.log('üîç –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –∫–æ–º–ø–ª–µ–∫—Ç–∞:', directAppliedFilters) // LOG: –ø—Ä—è–º–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ
      setAppliedFilters(directAppliedFilters)
      console.log('‚úÖ –§–∏–ª—å—Ç—Ä—ã –∫–æ–º–ø–ª–µ–∫—Ç–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –Ω–∞–ø—Ä—è–º—É—é') // LOG: —É—Å–ø–µ—à–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–º–ø–ª–µ–∫—Ç–∞:', error) // LOG: –æ—à–∏–±–∫–∞
      setSetsModalOpen(false)
    }
  }, [updateFilter, updateDocumentVersions, appliedFilters.documentation_version_ids, setAppliedFilters])

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
  const handleStatusChange = useCallback(async (statusId: string) => {
    console.log('üîç –ò–∑–º–µ–Ω–µ–Ω —Å—Ç–∞—Ç—É—Å —à–∞—Ö–º–∞—Ç–∫–∏:', statusId) // LOG: –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
    setCurrentStatus(statusId)
    statusSetManuallyRef.current = true // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ —Ä—É—á–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º

    // –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–æ–º–ø–ª–µ–∫—Ç –∏ –æ–±–Ω–æ–≤–∏—Ç—å –µ–≥–æ —Å—Ç–∞—Ç—É—Å
    if (appliedFilters.project_id) {
      try {
        const searchFilters = {
          project_id: appliedFilters.project_id,
          documentation_id: appliedFilters.documentation_code_ids.length > 0 ? appliedFilters.documentation_code_ids[0] : undefined,
          tag_id: appliedFilters.documentation_section_ids.length > 0 ? Number(appliedFilters.documentation_section_ids[0]) : undefined,
          block_ids: appliedFilters.block_ids.length > 0 ? appliedFilters.block_ids : undefined,
          cost_category_ids: appliedFilters.cost_category_ids.length > 0 ? appliedFilters.cost_category_ids.map(Number) : undefined,
          cost_type_ids: appliedFilters.detail_cost_category_ids.length > 0 ? appliedFilters.detail_cost_category_ids.map(Number) : undefined,
        }

        const matchedSet = await chessboardSetsApi.findSetByFilters(searchFilters)

        if (matchedSet) {
          console.log('üîç –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–º–ø–ª–µ–∫—Ç–∞:', matchedSet.id, statusId) // LOG: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–º–ø–ª–µ–∫—Ç–∞
          await chessboardSetsApi.addStatusToSet({
            chessboard_set_id: matchedSet.id,
            status_id: statusId,
            comment: '–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ —à–∞—Ö–º–∞—Ç–∫—É',
          })
          console.log('‚úÖ –°—Ç–∞—Ç—É—Å –∫–æ–º–ø–ª–µ–∫—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω') // LOG: —Å—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω
        } else {
          console.log('‚ùå –ö–æ–º–ø–ª–µ–∫—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω') // LOG: –∫–æ–º–ø–ª–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–º–ø–ª–µ–∫—Ç–∞:', error) // LOG: –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      }
    }
  }, [
    appliedFilters.project_id,
    appliedFilters.documentation_code_ids,
    appliedFilters.documentation_section_ids,
    appliedFilters.block_ids,
    appliedFilters.cost_category_ids,
    appliedFilters.detail_cost_category_ids
  ])


  // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ú–µ–º–æ–∏–∑–∏—Ä—É–µ–º –≤—ã–∑–æ–≤—ã —Ñ—É–Ω–∫—Ü–∏–π –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–∞–º–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
  const allDisplayData = useMemo(() => getDisplayData(data), [data, tableMode.mode, tableMode.selectedRowKeys?.length || 0, tableMode.newRows?.length || 0, tableMode.editedRows?.size || 0])
  const visibleColumns = useMemo(() => getVisibleColumns(), [columnSettings.columnOrder, columnSettings.hiddenColumns])
  const allColumnsWithVisibility = useMemo(() => getAllColumnsWithVisibility(), [columnSettings.columnOrder, columnSettings.hiddenColumns])

  // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∫ –¥–∞–Ω–Ω—ã–º
  const paginatedData = useMemo(() => {
    const startIndex = (currentPage - 1) * pageSize
    const endIndex = startIndex + pageSize
    return allDisplayData.slice(startIndex, endIndex)
  }, [allDisplayData, currentPage, pageSize])

  const displayData = paginatedData

  // –°–±—Ä–æ—Å –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    if (currentPage > 1 && allDisplayData.length <= (currentPage - 1) * pageSize) {
      setCurrentPage(1)
      localStorage.setItem('chessboard-pagination-page', '1')
    }
  }, [allDisplayData.length, currentPage, pageSize])

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
  const hasAppliedProject = !!appliedFilters.project_id

  if (error) {
    return (
      <div style={{ padding: 24 }}>
        <Title level={2}>–®–∞—Ö–º–∞—Ç–∫–∞</Title>
        <div style={{ color: 'red' }}>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {error.message}</div>
      </div>
    )
  }

  return (
    <div
      style={{
        height: 'calc(100vh - 96px)',
        display: 'flex',
        flexDirection: 'column',
        overflow: 'hidden',
      }}
    >
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div style={{ flexShrink: 0, padding: '16px 24px 0 24px' }}>
        <Title level={2} style={{ margin: 0, fontSize: Math.round(24 * scale) }}>
          –®–∞—Ö–º–∞—Ç–∫–∞
          {statistics.totalRows > 0 && (
            <span style={{ fontSize: Math.round(14 * scale), fontWeight: 'normal', color: '#666' }}>
              {' '}
              ({statistics.totalRows} –∑–∞–ø–∏—Å–µ–π, –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {statistics.uniqueMaterials},
              –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä: {statistics.uniqueNomenclature})
            </span>
          )}
        </Title>
      </div>

      {/* –§–∏–ª—å—Ç—Ä—ã */}
      <div style={{ flexShrink: 0, padding: '16px 24px 0 24px' }}>
        <ChessboardFilters
          filters={filters}
          appliedFilters={appliedFilters}
          filtersCollapsed={filtersCollapsed}
          hasActiveFilters={hasActiveFilters}
          hasAppliedFilters={hasAppliedFilters}
          isLoading={isLoading}
          statistics={statistics}
          onFilterChange={updateFilter}
          onCascadingFilterChange={updateCascadingFilter}
          onApplyFilters={applyFilters}
          onResetFilters={resetFilters}
          onToggleCollapsed={toggleFiltersCollapsed}
          onOpenColumnSettings={openDrawer}
          onOpenVersionsModal={handleOpenVersionsModal}
          onOpenSetsModal={handleOpenSetsModal}
          tableMode={tableMode}
          hasAppliedProject={hasAppliedProject}
          hasUnsavedChanges={hasUnsavedChanges}
          selectedRowsCount={tableMode.selectedRowKeys.length}
          onSetMode={setMode}
          onSaveChanges={saveChanges}
          onCancelChanges={cancelChanges}
          onDeleteSelected={deleteSelectedRows}
          onAddRow={handleAddRow}
          currentStatus={currentStatus}
          onStatusChange={handleStatusChange}
        />
      </div>

      {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ç–∞–±–ª–∏—Ü—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ */}
      <div
        style={{
          flex: 1,
          display: 'flex',
          flexDirection: 'column',
          overflow: 'hidden',
          minHeight: 0,
          padding: '0 24px 24px 24px',
        }}
      >
        <div
          style={{
            flex: 1,
            overflow: 'auto', // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É
            border: '1px solid #f0f0f0',
            borderRadius: '6px',
            minHeight: 0,
          }}
        >
          <ChessboardTable
            data={displayData}
            loading={isLoading}
            tableMode={tableMode}
            visibleColumns={visibleColumns}
            currentProjectId={appliedFilters.project_id}
            onSelectionChange={setSelectedRowKeys}
            onRowUpdate={handleRowUpdate}
            onBackupRowUpdate={handleBackupRowUpdate}
            onRowCopy={copyRow}
            onRowDelete={handleRowDelete}
            onRowColorChange={updateRowColor}
            onStartEditing={handleStartEditing}
          />
        </div>

        {/* –ü–∞–≥–∏–Ω–∞—Ü–∏—è –ø–æ–¥ —Ç–∞–±–ª–∏—Ü–µ–π */}
        <div style={{
          padding: '16px 0',
          textAlign: 'center',
          borderTop: '1px solid #f0f0f0'
        }}>
          <Pagination
            size="small"
            current={currentPage}
            total={allDisplayData.length}
            pageSize={pageSize}
            showSizeChanger
            showQuickJumper
            onChange={handlePageChange}
            onShowSizeChange={handlePageSizeChange}
            showTotal={(total, range) => `${range[0]}-${range[1]} –∏–∑ ${total} –∑–∞–ø–∏—Å–µ–π`}
            pageSizeOptions={['10', '20', '50', '100', '200', '500']}
          />
        </div>
      </div>

      {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤ */}
      <ColumnSettingsDrawer
        visible={drawerVisible}
        columns={allColumnsWithVisibility}
        onClose={closeDrawer}
        onToggleColumn={toggleColumnVisibility}
        onMoveColumn={moveColumn}
        onToggleAll={toggleAllColumns}
        onResetToDefault={resetToDefault}
      />

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –≤–µ—Ä—Å–∏–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ */}
      <VersionsModal
        open={versionsModalOpen}
        onCancel={closeVersionsModal}
        onOk={handleApplyVersions}
        selectedDocumentations={documentationInfo}
        documentVersions={documentVersions}
        selectedVersions={selectedVersions}
        onVersionSelect={handleVersionSelect}
      />

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–ª–µ–∫—Ç–∞–º–∏ */}
      <ChessboardSetsModal
        open={setsModalOpen}
        onClose={handleCloseSetsModal}
        projectId={appliedFilters.project_id}
        onSelectSet={handleSelectSet}
      />
    </div>
  )
}

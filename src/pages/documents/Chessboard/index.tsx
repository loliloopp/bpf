import { useCallback, useState, useEffect, useMemo } from 'react'
import { Typography, Pagination } from 'antd'
import { useScale } from '@/shared/contexts/ScaleContext'
import { useFiltersState } from './hooks/useFiltersState'
import { useChessboardData } from './hooks/useChessboardData'
import { useColumnSettings } from './hooks/useColumnSettings'
import { useTableOperations } from './hooks/useTableOperations'
import { ChessboardFilters } from './components/ChessboardFilters'
import { ChessboardTable } from './components/ChessboardTable'
import { ColumnSettingsDrawer } from './components/ColumnSettingsDrawer'

const { Title } = Typography

export default function Chessboard() {
  const { scale } = useScale()

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
  const [currentPage, setCurrentPage] = useState(() => {
    const saved = localStorage.getItem('chessboard-pagination-page')
    return saved ? parseInt(saved, 10) : 1
  })
  const [pageSize, setPageSize] = useState(() => {
    const saved = localStorage.getItem('chessboard-pagination-size')
    return saved ? parseInt(saved, 10) : 100
  })

  // –•—É–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
  const {
    filters,
    appliedFilters,
    filtersCollapsed,
    hasActiveFilters,
    hasAppliedFilters,
    updateFilter,
    updateCascadingFilter,
    resetFilters,
    applyFilters,
    toggleFiltersCollapsed,
  } = useFiltersState()

  const { data, isLoading, error, statistics } = useChessboardData({
    appliedFilters,
    enabled: !!appliedFilters.project_id,
  })

  const {
    columnSettings,
    drawerVisible,
    toggleColumnVisibility,
    moveColumn,
    resetToDefault,
    toggleAllColumns,
    openDrawer,
    closeDrawer,
    getVisibleColumns,
    getAllColumnsWithVisibility,
  } = useColumnSettings()

  const {
    tableMode,
    hasUnsavedChanges,
    setMode,
    setSelectedRowKeys,
    addNewRow,
    removeNewRow,
    copyRow,
    updateNewRow,
    startEditing,
    updateEditedRow,
    updateRowColor,
    startEditBackup,
    stopEditBackup,
    updateEditingRow,
    saveChanges,
    cancelChanges,
    deleteSelectedRows,
    getDisplayData,
  } = useTableOperations()

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
  const handleAddRow = useCallback(() => {
    if (appliedFilters.project_id) {
      addNewRow(appliedFilters.project_id)
    }
  }, [appliedFilters.project_id, addNewRow])

  const handleRowUpdate = useCallback(
    (rowId: string, updates: any) => {
      console.log('üìù handleRowUpdate called:', {
        rowId,
        updates,
        currentMode: tableMode.mode
      }) // LOG: –≥–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫

      if (tableMode.mode === 'add') {
        console.log('üìù Routing to updateNewRow') // LOG: –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∫ –Ω–æ–≤—ã–º —Å—Ç—Ä–æ–∫–∞–º
        updateNewRow(rowId, updates)
      } else if (tableMode.mode === 'edit') {
        console.log('üìù Routing to updateEditedRow') // LOG: –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–º —Å—Ç—Ä–æ–∫–∞–º
        updateEditedRow(rowId, updates)
      } else {
        console.warn('üìù Unknown table mode, ignoring update:', tableMode.mode) // LOG: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º
      }
    },
    [tableMode.mode, updateNewRow, updateEditedRow],
  )

  const handleStartEditing = useCallback(
    (rowId: string, rowData?: RowData) => {
      console.log(
        'üîç DEBUG: handleStartEditing –≤—ã–∑–≤–∞–Ω –¥–ª—è —Å—Ç—Ä–æ–∫–∏:',
        rowId,
        '—Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º:',
        tableMode.mode,
      ) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

      if (tableMode.mode === 'view') {
        console.log('üîç DEBUG: –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º edit –∏ –Ω–∞—á–∏–Ω–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ') // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        setMode('edit')
        startEditing(rowId)
      } else if (tableMode.mode === 'edit') {
        // –ï—Å–ª–∏ —É–∂–µ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º backup –ø–æ–¥—Ö–æ–¥ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        console.log('üîç DEBUG: –£–∂–µ –≤ —Ä–µ–∂–∏–º–µ edit, –Ω–∞—á–∏–Ω–∞–µ–º backup —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ') // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        if (rowData) {
          startEditBackup(rowId, rowData)
        }
      } else {
        console.log('üîç DEBUG: –†–µ–∂–∏–º –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:', tableMode.mode) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
      }
    },
    [tableMode.mode, setMode, startEditing, startEditBackup],
  )

  const handleBackupRowUpdate = useCallback(
    (rowId: string, updates: any) => {
      console.log('üîç DEBUG: handleBackupRowUpdate –¥–ª—è —Å—Ç—Ä–æ–∫–∏:', rowId, updates) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
      updateEditingRow(rowId, updates)
    },
    [updateEditingRow],
  )

  const handleRowDelete = useCallback(
    (rowId: string) => {
      if (tableMode.mode === 'add') {
        removeNewRow(rowId)
      }
    },
    [tableMode.mode, removeNewRow],
  )

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
  const handlePageChange = useCallback((page: number) => {
    setCurrentPage(page)
    localStorage.setItem('chessboard-pagination-page', page.toString())
  }, [])

  const handlePageSizeChange = useCallback((current: number, size: number) => {
    setCurrentPage(1) // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞
    setPageSize(size)
    localStorage.setItem('chessboard-pagination-page', '1')
    localStorage.setItem('chessboard-pagination-size', size.toString())
  }, [])

  // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ú–µ–º–æ–∏–∑–∏—Ä—É–µ–º –≤—ã–∑–æ–≤—ã —Ñ—É–Ω–∫—Ü–∏–π –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–∞–º–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
  const allDisplayData = useMemo(() => getDisplayData(data), [data, tableMode.mode, tableMode.selectedRowKeys?.length || 0, tableMode.newRows?.length || 0, tableMode.editedRows?.size || 0])
  const visibleColumns = useMemo(() => getVisibleColumns(), [columnSettings.columnOrder, columnSettings.hiddenColumns])
  const allColumnsWithVisibility = useMemo(() => getAllColumnsWithVisibility(), [columnSettings.columnOrder, columnSettings.hiddenColumns])

  // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∫ –¥–∞–Ω–Ω—ã–º
  const paginatedData = useMemo(() => {
    const startIndex = (currentPage - 1) * pageSize
    const endIndex = startIndex + pageSize
    return allDisplayData.slice(startIndex, endIndex)
  }, [allDisplayData, currentPage, pageSize])

  const displayData = paginatedData

  // –°–±—Ä–æ—Å –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    if (currentPage > 1 && allDisplayData.length <= (currentPage - 1) * pageSize) {
      setCurrentPage(1)
      localStorage.setItem('chessboard-pagination-page', '1')
    }
  }, [allDisplayData.length, currentPage, pageSize])

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
  const hasAppliedProject = !!appliedFilters.project_id

  if (error) {
    return (
      <div style={{ padding: 24 }}>
        <Title level={2}>–®–∞—Ö–º–∞—Ç–∫–∞</Title>
        <div style={{ color: 'red' }}>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {error.message}</div>
      </div>
    )
  }

  return (
    <div
      style={{
        height: 'calc(100vh - 96px)',
        display: 'flex',
        flexDirection: 'column',
        overflow: 'hidden',
      }}
    >
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div style={{ flexShrink: 0, padding: '16px 24px 0 24px' }}>
        <Title level={2} style={{ margin: 0, fontSize: Math.round(24 * scale) }}>
          –®–∞—Ö–º–∞—Ç–∫–∞
          {statistics.totalRows > 0 && (
            <span style={{ fontSize: Math.round(14 * scale), fontWeight: 'normal', color: '#666' }}>
              {' '}
              ({statistics.totalRows} –∑–∞–ø–∏—Å–µ–π, –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {statistics.uniqueMaterials},
              –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä: {statistics.uniqueNomenclature})
            </span>
          )}
        </Title>
      </div>

      {/* –§–∏–ª—å—Ç—Ä—ã */}
      <div style={{ flexShrink: 0, padding: '16px 24px 0 24px' }}>
        <ChessboardFilters
          filters={filters}
          appliedFilters={appliedFilters}
          filtersCollapsed={filtersCollapsed}
          hasActiveFilters={hasActiveFilters}
          hasAppliedFilters={hasAppliedFilters}
          isLoading={isLoading}
          statistics={statistics}
          onFilterChange={updateFilter}
          onCascadingFilterChange={updateCascadingFilter}
          onApplyFilters={applyFilters}
          onResetFilters={resetFilters}
          onToggleCollapsed={toggleFiltersCollapsed}
          onOpenColumnSettings={openDrawer}
          tableMode={tableMode}
          hasAppliedProject={hasAppliedProject}
          hasUnsavedChanges={hasUnsavedChanges}
          selectedRowsCount={tableMode.selectedRowKeys.length}
          onSetMode={setMode}
          onSaveChanges={saveChanges}
          onCancelChanges={cancelChanges}
          onDeleteSelected={deleteSelectedRows}
          onAddRow={handleAddRow}
        />
      </div>

      {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ç–∞–±–ª–∏—Ü—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ */}
      <div
        style={{
          flex: 1,
          display: 'flex',
          flexDirection: 'column',
          overflow: 'hidden',
          minHeight: 0,
          padding: '0 24px 24px 24px',
        }}
      >
        <div
          style={{
            flex: 1,
            overflow: 'auto', // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É
            border: '1px solid #f0f0f0',
            borderRadius: '6px',
            minHeight: 0,
          }}
        >
          <ChessboardTable
            data={displayData}
            loading={isLoading}
            tableMode={tableMode}
            visibleColumns={visibleColumns}
            currentProjectId={appliedFilters.project_id}
            onSelectionChange={setSelectedRowKeys}
            onRowUpdate={handleRowUpdate}
            onBackupRowUpdate={handleBackupRowUpdate}
            onRowCopy={copyRow}
            onRowDelete={handleRowDelete}
            onRowColorChange={updateRowColor}
            onStartEditing={handleStartEditing}
          />
        </div>

        {/* –ü–∞–≥–∏–Ω–∞—Ü–∏—è –ø–æ–¥ —Ç–∞–±–ª–∏—Ü–µ–π */}
        <div style={{
          padding: '16px 0',
          textAlign: 'center',
          borderTop: '1px solid #f0f0f0'
        }}>
          <Pagination
            size="small"
            current={currentPage}
            total={allDisplayData.length}
            pageSize={pageSize}
            showSizeChanger
            showQuickJumper
            onChange={handlePageChange}
            onShowSizeChange={handlePageSizeChange}
            showTotal={(total, range) => `${range[0]}-${range[1]} –∏–∑ ${total} –∑–∞–ø–∏—Å–µ–π`}
            pageSizeOptions={['10', '20', '50', '100', '200', '500']}
          />
        </div>
      </div>

      {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤ */}
      <ColumnSettingsDrawer
        visible={drawerVisible}
        columns={allColumnsWithVisibility}
        onClose={closeDrawer}
        onToggleColumn={toggleColumnVisibility}
        onMoveColumn={moveColumn}
        onToggleAll={toggleAllColumns}
        onResetToDefault={resetToDefault}
      />
    </div>
  )
}

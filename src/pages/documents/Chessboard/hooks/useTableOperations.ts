import { useState, useCallback, useMemo } from 'react'
import { useQueryClient } from '@tanstack/react-query'
import { message } from 'antd'
import type { Key } from 'react'
import { supabase } from '@/lib/supabase'
import type { TableMode, RowData, RowColor } from '../types'

export const useTableOperations = () => {
  const queryClient = useQueryClient()

  // –†–µ–∂–∏–º —Ç–∞–±–ª–∏—Ü—ã (–ø—Ä–æ—Å–º–æ—Ç—Ä, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ)
  const [tableMode, setTableMode] = useState<TableMode>({
    mode: 'view',
    selectedRowKeys: [],
  })

  // –ù–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ (–¥–ª—è —Ä–µ–∂–∏–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è)
  const [newRows, setNewRows] = useState<RowData[]>([])

  // –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ (–¥–ª—è —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  const [editedRows, setEditedRows] = useState<Map<string, Partial<RowData>>>(new Map())

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ç–∞–±–ª–∏—Ü—ã
  const setMode = useCallback((mode: TableMode['mode']) => {
    console.log('üîç DEBUG: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞:', mode) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    setTableMode(prev => ({
      ...prev,
      mode,
      selectedRowKeys: mode === 'view' ? [] : prev.selectedRowKeys,
    }))

    // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Ä–µ–∂–∏–º–æ–≤
    if (mode === 'view') {
      setNewRows([])
      setEditedRows(new Map())
    }
  }, [])

  // –í—ã–±–æ—Ä —Å—Ç—Ä–æ–∫ –¥–ª—è –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
  const setSelectedRowKeys = useCallback((keys: Key[]) => {
    setTableMode(prev => ({ ...prev, selectedRowKeys: keys }))
  }, [])

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
  const addNewRow = useCallback((projectId: string) => {
    if (!projectId) {
      message.warning('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏')
      return
    }

    const newRow: RowData = {
      id: `new-${Date.now()}-${Math.random()}`,
      project: '',
      projectId,
      block: '',
      blockId: '',
      costCategory: '',
      costCategoryId: '',
      costType: '',
      costTypeId: '',
      location: '',
      locationId: '',
      nomenclatureId: '',
      material: '',
      quantity: 0,
      unit: '',
      unitId: '',
      rate: '',
      rateId: '',
      amount: 0,
      color: '',
      floorQuantities: {},
      isNew: true,
      isEditing: true,
    }

    setNewRows(prev => [...prev, newRow])
  }, [])

  // –£–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
  const removeNewRow = useCallback((rowId: string) => {
    setNewRows(prev => prev.filter(row => row.id !== rowId))
  }, [])

  // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏
  const copyRow = useCallback((sourceRow: RowData) => {
    const copiedRow: RowData = {
      ...sourceRow,
      id: `copy-${Date.now()}-${Math.random()}`,
      isNew: true,
      isEditing: true,
    }

    setNewRows(prev => [...prev, copiedRow])
  }, [])

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
  const updateNewRow = useCallback((rowId: string, updates: Partial<RowData>) => {
    setNewRows(prev =>
      prev.map(row =>
        row.id === rowId ? { ...row, ...updates } : row
      )
    )
  }, [])

  // –ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å—Ç—Ä–æ–∫–∏
  const startEditing = useCallback((rowId: string) => {
    setEditedRows(prev => {
      const newMap = new Map(prev)
      if (!newMap.has(rowId)) {
        newMap.set(rowId, {})
      }
      return newMap
    })
  }, [])

  // –û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏
  const cancelEditing = useCallback((rowId: string) => {
    setEditedRows(prev => {
      const newMap = new Map(prev)
      newMap.delete(rowId)
      return newMap
    })
  }, [])

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–π —Å—Ç—Ä–æ–∫–∏
  const updateEditedRow = useCallback((rowId: string, updates: Partial<RowData>) => {
    setEditedRows(prev => {
      const newMap = new Map(prev)
      const currentEdits = newMap.get(rowId) || {}
      newMap.set(rowId, { ...currentEdits, ...updates })
      return newMap
    })
  }, [])

  // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ —Å—Ç—Ä–æ–∫–∏
  const updateRowColor = useCallback((rowId: string, color: RowColor) => {
    if (tableMode.mode === 'add') {
      updateNewRow(rowId, { color })
    } else {
      updateEditedRow(rowId, { color })
    }
  }, [tableMode.mode, updateNewRow, updateEditedRow])

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
  const saveChanges = useCallback(async () => {
    try {
      const promises: Promise<any>[] = []

      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å—Ç—Ä–æ–∫
      if (newRows.length > 0) {
        const newRowsData = newRows.map(row => ({
          project_id: row.projectId,
          block_id: row.blockId || null,
          cost_category_id: row.costCategoryId || null,
          detail_cost_category_id: row.costTypeId || null,
          location_id: row.locationId || null,
          nomenclature_id: row.nomenclatureId || null,
          quantity: row.quantity,
          unit_id: row.unitId || null,
          rate_id: row.rateId || null,
          amount: row.amount,
          color: row.color || null,
          floor_quantities: Object.keys(row.floorQuantities).length > 0 ? row.floorQuantities : null,
          original_material: row.originalMaterial || null,
          original_quantity: row.originalQuantity || null,
          original_unit: row.originalUnit || null,
          original_unit_id: row.originalUnitId || null,
        }))

        promises.push(
          supabase.from('chessboard').insert(newRowsData)
        )
      }

      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
      for (const [rowId, updates] of editedRows.entries()) {
        const updateData: any = {}

        if (updates.blockId !== undefined) updateData.block_id = updates.blockId || null
        if (updates.costCategoryId !== undefined) updateData.cost_category_id = updates.costCategoryId || null
        if (updates.costTypeId !== undefined) updateData.detail_cost_category_id = updates.costTypeId || null
        if (updates.locationId !== undefined) updateData.location_id = updates.locationId || null
        if (updates.nomenclatureId !== undefined) updateData.nomenclature_id = updates.nomenclatureId || null
        if (updates.quantity !== undefined) updateData.quantity = updates.quantity
        if (updates.unitId !== undefined) updateData.unit_id = updates.unitId || null
        if (updates.rateId !== undefined) updateData.rate_id = updates.rateId || null
        if (updates.amount !== undefined) updateData.amount = updates.amount
        if (updates.color !== undefined) updateData.color = updates.color || null
        if (updates.floorQuantities !== undefined) {
          updateData.floor_quantities = Object.keys(updates.floorQuantities).length > 0 ? updates.floorQuantities : null
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º updated_at
        updateData.updated_at = new Date().toISOString()

        promises.push(
          supabase.from('chessboard').update(updateData).eq('id', rowId)
        )
      }

      await Promise.all(promises)

      // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
      queryClient.invalidateQueries({ queryKey: ['chessboard-data'] })

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setNewRows([])
      setEditedRows(new Map())
      setMode('view')

      message.success('–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã')
    } catch (error) {
      console.error('Error saving changes:', error)
      message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π')
    }
  }, [newRows, editedRows, queryClient, setMode])

  // –û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
  const cancelChanges = useCallback(() => {
    setNewRows([])
    setEditedRows(new Map())
    setMode('view')
  }, [setMode])

  // –£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
  const deleteSelectedRows = useCallback(async () => {
    if (tableMode.selectedRowKeys.length === 0) {
      message.warning('–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è')
      return
    }

    try {
      const { error } = await supabase
        .from('chessboard')
        .delete()
        .in('id', tableMode.selectedRowKeys as string[])

      if (error) throw error

      queryClient.invalidateQueries({ queryKey: ['chessboard-data'] })
      setMode('view')
      message.success(`–£–¥–∞–ª–µ–Ω–æ —Å—Ç—Ä–æ–∫: ${tableMode.selectedRowKeys.length}`)
    } catch (error) {
      console.error('Error deleting rows:', error)
      message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç—Ä–æ–∫')
    }
  }, [tableMode.selectedRowKeys, queryClient, setMode])

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Å —É—á–µ—Ç–æ–º –Ω–æ–≤—ã—Ö –∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫)
  const getDisplayData = useCallback((originalData: RowData[]) => {
    const dataWithEdits = originalData.map(row => {
      const edits = editedRows.get(row.id)
      return edits ? { ...row, ...edits, isEditing: true } : row
    })

    return [...dataWithEdits, ...newRows]
  }, [editedRows, newRows])

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
  const hasUnsavedChanges = useMemo(() => {
    return newRows.length > 0 || editedRows.size > 0
  }, [newRows.length, editedRows.size])

  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    tableMode,
    newRows,
    editedRows,
    hasUnsavedChanges,

    // –î–µ–π—Å—Ç–≤–∏—è —Å —Ä–µ–∂–∏–º–∞–º–∏
    setMode,
    setSelectedRowKeys,

    // –û–ø–µ—Ä–∞—Ü–∏–∏ —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏
    addNewRow,
    removeNewRow,
    copyRow,
    updateNewRow,
    startEditing,
    cancelEditing,
    updateEditedRow,
    updateRowColor,

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ/–æ—Ç–º–µ–Ω–∞
    saveChanges,
    cancelChanges,
    deleteSelectedRows,

    // –£—Ç–∏–ª–∏—Ç—ã
    getDisplayData,
  }
}
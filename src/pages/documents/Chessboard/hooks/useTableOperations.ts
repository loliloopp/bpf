import { useState, useCallback, useMemo } from 'react'
import { useQueryClient } from '@tanstack/react-query'
import { App } from 'antd'
import type { Key } from 'react'
import { supabase } from '@/lib/supabase'
import type { TableMode, RowData, RowColor } from '../types'

export const useTableOperations = () => {
  const queryClient = useQueryClient()
  const { message } = App.useApp()

  // –†–µ–∂–∏–º —Ç–∞–±–ª–∏—Ü—ã (–ø—Ä–æ—Å–º–æ—Ç—Ä, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ)
  const [tableMode, setTableMode] = useState<TableMode>({
    mode: 'view',
    selectedRowKeys: [],
  })

  // –ù–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ (–¥–ª—è —Ä–µ–∂–∏–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è)
  const [newRows, setNewRows] = useState<RowData[]>([])

  // –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ (–¥–ª—è —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  const [editedRows, setEditedRows] = useState<Map<string, Partial<RowData>>>(new Map())

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ç–∞–±–ª–∏—Ü—ã
  const setMode = useCallback((mode: TableMode['mode']) => {
    console.log('üîç DEBUG: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞:', mode) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    setTableMode(prev => ({
      ...prev,
      mode,
      selectedRowKeys: mode === 'view' ? [] : prev.selectedRowKeys,
    }))

    // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Ä–µ–∂–∏–º–æ–≤
    if (mode === 'view') {
      setNewRows([])
      setEditedRows(new Map())
    }
  }, [])

  // –í—ã–±–æ—Ä —Å—Ç—Ä–æ–∫ –¥–ª—è –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
  const setSelectedRowKeys = useCallback((keys: Key[]) => {
    setTableMode(prev => ({ ...prev, selectedRowKeys: keys }))
  }, [])

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
  const addNewRow = useCallback((projectId: string) => {
    if (!projectId) {
      message.warning('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏')
      return
    }

    const newRow: RowData = {
      id: `new-${Date.now()}-${Math.random()}`,
      project: '',
      projectId,
      block: '',
      blockId: '',
      costCategory: '',
      costCategoryId: '',
      costType: '',
      costTypeId: '',
      location: '',
      locationId: '',
      nomenclatureId: '',
      material: '',
      quantity: 0,
      unit: '',
      unitId: '',
      rate: '',
      rateId: '',
      amount: 0,
      color: '',
      floorQuantities: {},
      isNew: true,
      isEditing: true,
    }

    setNewRows(prev => [...prev, newRow])
  }, [])

  // –£–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
  const removeNewRow = useCallback((rowId: string) => {
    setNewRows(prev => prev.filter(row => row.id !== rowId))
  }, [])

  // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏
  const copyRow = useCallback((sourceRow: RowData) => {
    const copiedRow: RowData = {
      ...sourceRow,
      id: `copy-${Date.now()}-${Math.random()}`,
      isNew: true,
      isEditing: true,
    }

    setNewRows(prev => [...prev, copiedRow])
  }, [])

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
  const updateNewRow = useCallback((rowId: string, updates: Partial<RowData>) => {
    setNewRows(prev =>
      prev.map(row =>
        row.id === rowId ? { ...row, ...updates } : row
      )
    )
  }, [])

  // –ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å—Ç—Ä–æ–∫–∏
  const startEditing = useCallback((rowId: string) => {
    setEditedRows(prev => {
      const newMap = new Map(prev)
      if (!newMap.has(rowId)) {
        newMap.set(rowId, {})
      }
      return newMap
    })
  }, [])

  // –û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏
  const cancelEditing = useCallback((rowId: string) => {
    setEditedRows(prev => {
      const newMap = new Map(prev)
      newMap.delete(rowId)
      return newMap
    })
  }, [])

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–π —Å—Ç—Ä–æ–∫–∏
  const updateEditedRow = useCallback((rowId: string, updates: Partial<RowData>) => {
    setEditedRows(prev => {
      const newMap = new Map(prev)
      const currentEdits = newMap.get(rowId) || {}
      newMap.set(rowId, { ...currentEdits, ...updates })
      return newMap
    })
  }, [])

  // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ —Å—Ç—Ä–æ–∫–∏
  const updateRowColor = useCallback((rowId: string, color: RowColor) => {
    if (tableMode.mode === 'add') {
      updateNewRow(rowId, { color })
    } else {
      updateEditedRow(rowId, { color })
    }
  }, [tableMode.mode, updateNewRow, updateEditedRow])

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
  const saveChanges = useCallback(async () => {
    try {
      const promises: Promise<any>[] = []

      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å—Ç—Ä–æ–∫
      if (newRows.length > 0) {
        const newRowsData = newRows.map(row => ({
          project_id: row.projectId,
          block_id: row.blockId || null,
          cost_category_id: row.costCategoryId || null,
          detail_cost_category_id: row.costTypeId || null,
          location_id: row.locationId || null,
          nomenclature_id: row.nomenclatureId || null,
          quantity: row.quantity,
          unit_id: row.unitId || null,
          rate_id: row.rateId || null,
          amount: row.amount,
          color: row.color || null,
          floor_quantities: Object.keys(row.floorQuantities).length > 0 ? row.floorQuantities : null,
          original_material: row.originalMaterial || null,
          original_quantity: row.originalQuantity || null,
          original_unit: row.originalUnit || null,
          original_unit_id: row.originalUnitId || null,
        }))

        promises.push(
          supabase.from('chessboard').insert(newRowsData)
        )
      }

      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
      for (const [rowId, updates] of editedRows.entries()) {
        console.log('üîç saveChanges - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É:', { rowId, updates }) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ chessboard
        const chessboardUpdateData: any = {}

        // –ü–æ–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã chessboard (—Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø–æ–ª—è –∏–∑ —Å—Ö–µ–º—ã –ë–î)
        if (updates.color !== undefined) {
          chessboardUpdateData.color = updates.color || null
        }
        if (updates.unitId !== undefined) {
          chessboardUpdateData.unit_id = updates.unitId || null
        }
        if (updates.materialId !== undefined) {
          // materialId –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å UUID, –∞ –Ω–µ —Å—Ç—Ä–æ–∫–∞
          chessboardUpdateData.material = updates.materialId || null
        }
        if (updates.material !== undefined) {
          // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è material –∫–∞–∫ UUID —Å—Ç—Ä–æ–∫–∞
          chessboardUpdateData.material = updates.material || null
          console.log('üîç DEBUG: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—è material:', updates.material) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º updated_at
        chessboardUpdateData.updated_at = new Date().toISOString()

        console.log('üìä saveChanges - –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã:', { rowId, chessboardUpdateData }) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        console.log('üîç DEBUG: –≤—Å–µ updates –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:', { rowId, updates }) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        console.log('üîç DEBUG: –ø–æ–ª—è –≤ updates:', Object.keys(updates)) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —á—Ç–æ –æ–±–Ω–æ–≤–ª—è—Ç—å
        if (Object.keys(chessboardUpdateData).length > 1) { // > 1 –ø–æ—Ç–æ–º—É —á—Ç–æ updated_at –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å
          console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã chessboard') // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
          promises.push(
            supabase.from('chessboard').update(chessboardUpdateData).eq('id', rowId)
          )
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º mapping —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π (—Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö)
        const mappingUpdateData: any = {}
        if (updates.blockId !== undefined) mappingUpdateData.block_id = updates.blockId || null
        if (updates.costCategoryId !== undefined) {
          // cost_category_id –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å integer
          mappingUpdateData.cost_category_id = updates.costCategoryId ? parseInt(updates.costCategoryId) : null
        }
        if (updates.costTypeId !== undefined) {
          // cost_type_id –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å integer
          mappingUpdateData.cost_type_id = updates.costTypeId ? parseInt(updates.costTypeId) : null
        }
        if (updates.locationId !== undefined) {
          // location_id –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å integer
          mappingUpdateData.location_id = updates.locationId ? parseInt(updates.locationId) : null
        }

        if (Object.keys(mappingUpdateData).length > 0) {
          mappingUpdateData.updated_at = new Date().toISOString()
          console.log('üìä saveChanges - –¥–∞–Ω–Ω—ã–µ –¥–ª—è mapping —Ç–∞–±–ª–∏—Ü—ã:', { rowId, mappingUpdateData }) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏ –∑–∞—Ç–µ–º update –∏–ª–∏ insert
          const mappingPromise = supabase
            .from('chessboard_mapping')
            .select('id')
            .eq('chessboard_id', rowId)
            .maybeSingle()
            .then(async ({ data: existingMapping, error: selectError }) => {
              if (selectError) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è mapping:', selectError) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                throw selectError
              }

              if (existingMapping) {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
                console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é mapping –∑–∞–ø–∏—Å—å:', existingMapping.id) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                const { error: updateError } = await supabase
                  .from('chessboard_mapping')
                  .update(mappingUpdateData)
                  .eq('chessboard_id', rowId)

                if (updateError) {
                  console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ mapping:', updateError) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                  throw updateError
                }
              } else {
                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                console.log('‚ûï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é mapping –∑–∞–ø–∏—Å—å –¥–ª—è chessboard_id:', rowId) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                const { error: insertError } = await supabase
                  .from('chessboard_mapping')
                  .insert({ ...mappingUpdateData, chessboard_id: rowId })

                if (insertError) {
                  console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ mapping:', insertError) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                  throw insertError
                }
              }
            })

          promises.push(mappingPromise)
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º nomenclature mapping –¥–ª—è –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã (–∫–∞–∫ –≤ backup)
        if (updates.nomenclatureId !== undefined || updates.supplier !== undefined) {
          console.log('üîç –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã:', { nomenclatureId: updates.nomenclatureId, supplier: updates.supplier }) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

          // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Å–≤—è–∑—å (–∫–∞–∫ –≤ backup)
          promises.push(
            supabase.from('chessboard_nomenclature_mapping').delete().eq('chessboard_id', rowId)
          )

          // –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é —Å–≤—è–∑—å
          const nomenclatureId = updates.nomenclatureId !== undefined ? updates.nomenclatureId : null
          if (nomenclatureId) {
            promises.push(
              supabase.from('chessboard_nomenclature_mapping').insert({
                chessboard_id: rowId,
                nomenclature_id: nomenclatureId,
                supplier_name: updates.supplier || null
              })
            )
          }
        }

        // –ö–∞—Å–∫–∞–¥–Ω–æ–µ –æ—á–∏—â–µ–Ω–∏–µ: –ø—Ä–∏ —Å–º–µ–Ω–µ –≤–∏–¥–∞ –∑–∞—Ç—Ä–∞—Ç –æ—á–∏—â–∞–µ–º –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç
        if (updates.costTypeId !== undefined) {
          console.log('üîÑ –ö–∞—Å–∫–∞–¥–Ω–æ–µ –æ—á–∏—â–µ–Ω–∏–µ: –∏–∑–º–µ–Ω–∏–ª—Å—è –≤–∏–¥ –∑–∞—Ç—Ä–∞—Ç, –æ—á–∏—â–∞–µ–º –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç') // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
          // –£–¥–∞–ª—è–µ–º —Å–≤—è–∑—å —Å —Ä–∞—Å—Ü–µ–Ω–∫–æ–π (–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ–º —Ä–∞–±–æ—Ç)
          promises.push(
            supabase.from('chessboard_rates_mapping').delete().eq('chessboard_id', rowId)
          )
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º rates mapping –¥–ª—è –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç (–∫–∞–∫ –≤ backup)
        if (updates.rateId !== undefined) {
          console.log('üîç –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ü–µ–Ω–∫–∏ (–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç):', updates.rateId) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

          // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Å–≤—è–∑—å (–∫–∞–∫ –≤ backup)
          promises.push(
            supabase.from('chessboard_rates_mapping').delete().eq('chessboard_id', rowId)
          )

          // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ —Ä–∞—Å—Ü–µ–Ω–∫–∞, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
          if (updates.rateId) {
            promises.push(
              supabase.from('chessboard_rates_mapping').insert({
                chessboard_id: rowId,
                rate_id: updates.rateId
              })
            )
          }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º floor mapping –¥–ª—è —ç—Ç–∞–∂–µ–π –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–ø–æ –ª–æ–≥–∏–∫–µ –∏–∑ backup)
        if (updates.quantityPd !== undefined || updates.quantitySpec !== undefined || updates.quantityRd !== undefined || updates.floorQuantities !== undefined || updates.floors !== undefined) {
          console.log('üîç –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç—Ç–∞–∂–µ–π –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤ - –∏—Å—Ö–æ–¥–Ω—ã–µ updates:', {
            quantityPd: updates.quantityPd,
            quantitySpec: updates.quantitySpec,
            quantityRd: updates.quantityRd,
            floorQuantities: updates.floorQuantities,
            floors: updates.floors
          }) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

          // –í–ê–ñ–ù–û: –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ chessboard_floor_mapping, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
          const currentRowPromise = supabase
            .from('chessboard_floor_mapping')
            .select('"quantityPd", "quantitySpec", "quantityRd", floor_number')
            .eq('chessboard_id', rowId)
            .then(async ({ data: currentFloorMappings, error: currentRowError }) => {
              if (currentRowError) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –º–∞–ø–ø–∏–Ω–≥–∞ —ç—Ç–∞–∂–µ–π:', currentRowError) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                throw currentRowError
              }

              console.log('üìä –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ floor_mapping –∏–∑ –ë–î:', currentFloorMappings) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

              // –°—É–º–º–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–∑ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π floor_mapping –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—â–∏—Ö —Å—É–º–º
              let currentTotalPd = 0
              let currentTotalSpec = 0
              let currentTotalRd = 0
              let floorsArray: number[] = []

              if (currentFloorMappings && currentFloorMappings.length > 0) {
                currentFloorMappings.forEach(mapping => {
                  currentTotalPd += Number(mapping.quantityPd) || 0
                  currentTotalSpec += Number(mapping.quantitySpec) || 0
                  currentTotalRd += Number(mapping.quantityRd) || 0
                  if (mapping.floor_number) {
                    floorsArray.push(mapping.floor_number)
                  }
                })
              }

              // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É —ç—Ç–∞–∂–µ–π –∏–∑ –º–∞—Å—Å–∏–≤–∞
              const currentFloorsString = floorsArray.length > 0 ? floorsArray.sort((a, b) => a - b).join('-') : ''

              console.log('üìä –°—É–º–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞:', {
                currentTotalPd,
                currentTotalSpec,
                currentTotalRd,
                currentFloorsString
              }) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

              // –û–±—ä–µ–¥–∏–Ω—è–µ–º –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É updates)
              let finalQuantityPd = updates.quantityPd !== undefined ? updates.quantityPd : currentTotalPd
              let finalQuantitySpec = updates.quantitySpec !== undefined ? updates.quantitySpec : currentTotalSpec
              let finalQuantityRd = updates.quantityRd !== undefined ? updates.quantityRd : currentTotalRd
              const finalFloors = updates.floors !== undefined ? updates.floors : currentFloorsString

              // –í–ê–ñ–ù–û: –ï—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å —Ç–æ–ª—å–∫–æ —ç—Ç–∞–∂–∏ (–Ω–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞), –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
              if (updates.floors !== undefined &&
                  updates.quantityPd === undefined &&
                  updates.quantitySpec === undefined &&
                  updates.quantityRd === undefined) {

                console.log('üîÑ –ü–µ—Ä–µ—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —ç—Ç–∞–∂–µ–π:', {
                  oldFloors: currentFloorsString,
                  newFloors: updates.floors,
                  currentTotals: { currentTotalPd, currentTotalSpec, currentTotalRd }
                }) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—É–º–º–∞—Ä–Ω—ã–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ (–æ–Ω–∏ –æ—Å—Ç–∞–Ω—É—Ç—Å—è —Ç–µ–º–∏ –∂–µ)
                finalQuantityPd = currentTotalPd
                finalQuantitySpec = currentTotalSpec
                finalQuantityRd = currentTotalRd
              }

              const allQuantities = {
                quantityPd: finalQuantityPd,
                quantitySpec: finalQuantitySpec,
                quantityRd: finalQuantityRd,
                floors: finalFloors
              }

              console.log('üìä –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ (–Ω–æ–≤—ã–µ + —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ):', allQuantities) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

              // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ —ç—Ç–∞–∂–µ–π –¥–ª—è —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏ (–∫–∞–∫ –≤ backup)
              await supabase.from('chessboard_floor_mapping').delete().eq('chessboard_id', rowId)

              // –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É —ç—Ç–∞–∂–µ–π
              const floors = allQuantities.floors ? parseFloorsString(allQuantities.floors) : []
              const floorQuantities = updates.floorQuantities
              const locationId = updates.locationId ? parseInt(updates.locationId) : null

              if (floors.length > 0) {
                console.log('üìä –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –¥–ª—è —ç—Ç–∞–∂–µ–π:', floors) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

                const floorMappings = floors.map((floor: number) => {
                  const qty = floorQuantities?.[floor] || {}

                  // –ü—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤ –ø–æ —ç—Ç–∞–∂–∞–º (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ü–û–õ–ù–´–ï –¥–∞–Ω–Ω—ã–µ)
                  const proportionalQuantityPd = qty.quantityPd ? Number(qty.quantityPd) :
                    (allQuantities.quantityPd && floors.length > 1) ? Number(allQuantities.quantityPd) / floors.length :
                    allQuantities.quantityPd ? Number(allQuantities.quantityPd) : null

                  const proportionalQuantitySpec = qty.quantitySpec ? Number(qty.quantitySpec) :
                    (allQuantities.quantitySpec && floors.length > 1) ? Number(allQuantities.quantitySpec) / floors.length :
                    allQuantities.quantitySpec ? Number(allQuantities.quantitySpec) : null

                  const proportionalQuantityRd = qty.quantityRd ? Number(qty.quantityRd) :
                    (allQuantities.quantityRd && floors.length > 1) ? Number(allQuantities.quantityRd) / floors.length :
                    allQuantities.quantityRd ? Number(allQuantities.quantityRd) : null

                  console.log(`üìä –≠—Ç–∞–∂ ${floor} - –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞:`, {
                    quantityPd: proportionalQuantityPd,
                    quantitySpec: proportionalQuantitySpec,
                    quantityRd: proportionalQuantityRd
                  }) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

                  return {
                    chessboard_id: rowId,
                    floor_number: floor,
                    location_id: locationId,
                    quantityPd: proportionalQuantityPd,
                    quantitySpec: proportionalQuantitySpec,
                    quantityRd: proportionalQuantityRd,
                    created_at: new Date().toISOString(),
                    updated_at: new Date().toISOString()
                  }
                })

                await supabase.from('chessboard_floor_mapping').insert(floorMappings)
              } else {
                // –ï—Å–ª–∏ –Ω–µ—Ç —ç—Ç–∞–∂–µ–π, —Å–æ–∑–¥–∞–µ–º –æ–¥–Ω—É –∑–∞–ø–∏—Å—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–∫–∞–∫ –≤ backup)
                const qty = floorQuantities?.[0] || {}

                console.log('üìä –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–±–µ–∑ —ç—Ç–∞–∂–µ–π)') // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

                const defaultFloorMapping = {
                  chessboard_id: rowId,
                  location_id: locationId,
                  quantityPd: qty.quantityPd ? Number(qty.quantityPd) :
                            allQuantities.quantityPd ? Number(allQuantities.quantityPd) : null,
                  quantitySpec: qty.quantitySpec ? Number(qty.quantitySpec) :
                              allQuantities.quantitySpec ? Number(allQuantities.quantitySpec) : null,
                  quantityRd: qty.quantityRd ? Number(qty.quantityRd) :
                             allQuantities.quantityRd ? Number(allQuantities.quantityRd) : null,
                  created_at: new Date().toISOString(),
                  updated_at: new Date().toISOString()
                }

                await supabase.from('chessboard_floor_mapping').insert(defaultFloorMapping)
              }
            })

          promises.push(currentRowPromise)
        }

        // –§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —ç—Ç–∞–∂–µ–π - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω—ã –∏ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —ç—Ç–∞–∂–∏
        function parseFloorsString(floorsStr: string): number[] {
          if (!floorsStr) return []

          console.log('üîç –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏ —ç—Ç–∞–∂–µ–π:', floorsStr) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

          const result: number[] = []
          const parts = floorsStr.split(/[,\s]+/) // –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –∑–∞–ø—è—Ç–æ–π –∏ –ø—Ä–æ–±–µ–ª–∞–º

          parts.forEach(part => {
            const trimmedPart = part.trim()
            if (!trimmedPart) return

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä "2-4")
            if (trimmedPart.includes('-')) {
              const [startStr, endStr] = trimmedPart.split('-')
              const start = Number(startStr.trim())
              const end = Number(endStr.trim())

              if (!isNaN(start) && !isNaN(end) && start <= end) {
                // –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω —ç—Ç–∞–∂–µ–π –æ—Ç start –¥–æ end –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ
                for (let i = start; i <= end; i++) {
                  if (!result.includes(i)) {
                    result.push(i)
                  }
                }
                console.log(`üìä –î–∏–∞–ø–∞–∑–æ–Ω "${trimmedPart}" -> —ç—Ç–∞–∂–∏:`, Array.from({length: end - start + 1}, (_, i) => start + i)) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
              }
            } else {
              // –û—Ç–¥–µ–ª—å–Ω—ã–π —ç—Ç–∞–∂
              const floor = Number(trimmedPart)
              if (!isNaN(floor) && !result.includes(floor)) {
                result.push(floor)
                console.log(`üìä –û—Ç–¥–µ–ª—å–Ω—ã–π —ç—Ç–∞–∂: ${floor}`) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
              }
            }
          })

          const sortedResult = result.sort((a, b) => a - b)
          console.log(`üìä –ò—Ç–æ–≥–æ–≤—ã–π –º–∞—Å—Å–∏–≤ —ç—Ç–∞–∂–µ–π:`, sortedResult) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

          return sortedResult
        }


        // –í–ê–ñ–ù–û: workName (–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç) –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é,
        // –∞ –±–µ—Ä–µ—Ç—Å—è –∏–∑ rates —á–µ—Ä–µ–∑ chessboard_rates_mapping, –∫–æ—Ç–æ—Ä–∞—è —É–∂–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤—ã—à–µ

        // –í–ê–ñ–ù–û: floors (–≠—Ç–∞–∂–∏) - —ç—Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –ø–æ–ª–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –∏–∑ floor_number
        // –≤ chessboard_floor_mapping, –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è

        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if (updates.workName !== undefined) {
          console.log('‚ÑπÔ∏è workName - –≤—ã—á–∏—Å–ª—è–µ–º–æ–µ –ø–æ–ª–µ, –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é:', updates.workName) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        }
        if (updates.floors !== undefined) {
          console.log('‚ÑπÔ∏è floors - –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –ø–æ–ª–µ, –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é:', updates.floors) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        }
      }

      await Promise.all(promises)

      // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –¥–ª—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
      console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –¥–ª—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö') // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

      // Invalidate –≤—Å–µ—Ö queries, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 'chessboard-'
      await queryClient.invalidateQueries({
        predicate: (query) => {
          const queryKey = query.queryKey
          return Array.isArray(queryKey) && typeof queryKey[0] === 'string' && queryKey[0].startsWith('chessboard-')
        }
      })

      console.log('‚úÖ –í—Å–µ chessboard –∫—ç—à–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã, –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∞–Ω—ã') // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setNewRows([])
      setEditedRows(new Map())
      setMode('view')

      message.success('–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã')
    } catch (error) {
      console.error('Error saving changes:', error)
      message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π')
    }
  }, [newRows, editedRows, queryClient, setMode])

  // –û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
  const cancelChanges = useCallback(() => {
    setNewRows([])
    setEditedRows(new Map())
    setMode('view')
  }, [setMode])

  // –£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
  const deleteSelectedRows = useCallback(async () => {
    if (tableMode.selectedRowKeys.length === 0) {
      message.warning('–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è')
      return
    }

    try {
      const { error } = await supabase
        .from('chessboard')
        .delete()
        .in('id', tableMode.selectedRowKeys as string[])

      if (error) throw error

      // Invalidate –≤—Å–µ—Ö queries, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 'chessboard-'
      await queryClient.invalidateQueries({
        predicate: (query) => {
          const queryKey = query.queryKey
          return Array.isArray(queryKey) && typeof queryKey[0] === 'string' && queryKey[0].startsWith('chessboard-')
        }
      })
      setMode('view')
      message.success(`–£–¥–∞–ª–µ–Ω–æ —Å—Ç—Ä–æ–∫: ${tableMode.selectedRowKeys.length}`)
    } catch (error) {
      console.error('Error deleting rows:', error)
      message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç—Ä–æ–∫')
    }
  }, [tableMode.selectedRowKeys, queryClient, setMode])

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Å —É—á–µ—Ç–æ–º –Ω–æ–≤—ã—Ö –∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫)
  const getDisplayData = useCallback((originalData: RowData[]) => {
    const dataWithEdits = originalData.map(row => {
      const edits = editedRows.get(row.id)
      return edits ? { ...row, ...edits, isEditing: true } : row
    })

    return [...dataWithEdits, ...newRows]
  }, [editedRows, newRows])

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
  const hasUnsavedChanges = useMemo(() => {
    return newRows.length > 0 || editedRows.size > 0
  }, [newRows.length, editedRows.size])

  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    tableMode,
    newRows,
    editedRows,
    hasUnsavedChanges,

    // –î–µ–π—Å—Ç–≤–∏—è —Å —Ä–µ–∂–∏–º–∞–º–∏
    setMode,
    setSelectedRowKeys,

    // –û–ø–µ—Ä–∞—Ü–∏–∏ —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏
    addNewRow,
    removeNewRow,
    copyRow,
    updateNewRow,
    startEditing,
    cancelEditing,
    updateEditedRow,
    updateRowColor,

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ/–æ—Ç–º–µ–Ω–∞
    saveChanges,
    cancelChanges,
    deleteSelectedRows,

    // –£—Ç–∏–ª–∏—Ç—ã
    getDisplayData,
  }
}
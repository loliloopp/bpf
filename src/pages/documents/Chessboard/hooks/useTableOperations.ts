import { useState, useCallback, useMemo } from 'react'
import { useQueryClient } from '@tanstack/react-query'
import { App } from 'antd'
import type { Key } from 'react'
import { supabase } from '@/lib/supabase'
import type { TableMode, RowData, RowColor } from '../types'
import { parseFloorsFromString } from '../utils/floors'

export const useTableOperations = () => {
  const queryClient = useQueryClient()
  const { message } = App.useApp()

  // –†–µ–∂–∏–º —Ç–∞–±–ª–∏—Ü—ã (–ø—Ä–æ—Å–º–æ—Ç—Ä, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ)
  const [tableMode, setTableMode] = useState<TableMode>({
    mode: 'view',
    selectedRowKeys: [],
  })

  // –ù–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ (–¥–ª—è —Ä–µ–∂–∏–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è)
  const [newRows, setNewRows] = useState<RowData[]>([])

  // –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ (–¥–ª—è —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  const [editedRows, setEditedRows] = useState<Map<string, Partial<RowData>>>(new Map())

  // –°—Ç—Ä–æ–∫–∏ –≤ —Ä–µ–∂–∏–º–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (backup –ø–æ–¥—Ö–æ–¥)
  const [editingRows, setEditingRows] = useState<Record<string, RowData>>({})

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ç–∞–±–ª–∏—Ü—ã
  const setMode = useCallback((mode: TableMode['mode']) => {
    console.log('üîç DEBUG: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞:', mode) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    setTableMode((prev) => ({
      ...prev,
      mode,
      selectedRowKeys: mode === 'view' ? [] : prev.selectedRowKeys,
    }))

    // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Ä–µ–∂–∏–º–æ–≤
    if (mode === 'view') {
      setNewRows([])
      setEditedRows(new Map())
      setEditingRows({})
    }
  }, [])

  // –í—ã–±–æ—Ä —Å—Ç—Ä–æ–∫ –¥–ª—è –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
  const setSelectedRowKeys = useCallback((keys: Key[]) => {
    setTableMode((prev) => ({ ...prev, selectedRowKeys: keys }))
  }, [])

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
  const addNewRow = useCallback((projectId: string) => {
    if (!projectId) {
      message.warning('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏')
      return
    }

    const newRow: RowData = {
      id: `new-${Date.now()}-${Math.random()}`,
      project: '',
      projectId,
      block: '',
      blockId: '',
      costCategory: '',
      costCategoryId: '',
      costType: '',
      costTypeId: '',
      location: '',
      locationId: '',
      nomenclatureId: '',
      material: '',
      quantity: 0,
      unit: '',
      unitId: '',
      rate: '',
      rateId: '',
      amount: 0,
      color: '',
      floorQuantities: {},
      isNew: true,
      isEditing: true,
    }

    setNewRows((prev) => [...prev, newRow])
  }, [])

  // –£–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
  const removeNewRow = useCallback((rowId: string) => {
    setNewRows((prev) => prev.filter((row) => row.id !== rowId))
  }, [])

  // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏
  const copyRow = useCallback((sourceRow: RowData) => {
    const copiedRow: RowData = {
      ...sourceRow,
      id: `copy-${Date.now()}-${Math.random()}`,
      isNew: true,
      isEditing: true,
    }

    setNewRows((prev) => [...prev, copiedRow])
  }, [])

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
  const updateNewRow = useCallback((rowId: string, updates: Partial<RowData>) => {
    setNewRows((prev) => prev.map((row) => (row.id === rowId ? { ...row, ...updates } : row)))
  }, [])

  // –ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å—Ç—Ä–æ–∫–∏
  const startEditing = useCallback((rowId: string) => {
    setEditedRows(prev => {
      const newMap = new Map(prev)
      if (!newMap.has(rowId)) {
        newMap.set(rowId, {})
      }
      return newMap
    })
  }, [])

  // –û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏
  const cancelEditing = useCallback((rowId: string) => {
    setEditedRows(prev => {
      const newMap = new Map(prev)
      newMap.delete(rowId)
      return newMap
    })
  }, [])

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–π —Å—Ç—Ä–æ–∫–∏
  const updateEditedRow = useCallback((rowId: string, updates: Partial<RowData>) => {
    console.log('üîÑ updateEditedRow called:', { rowId, updates }) // LOG: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–π —Å—Ç—Ä–æ–∫–∏

    setEditedRows(prev => {
      const newMap = new Map(prev)
      const currentEdits = newMap.get(rowId) || {}
      newMap.set(rowId, { ...currentEdits, ...updates })
      return newMap
    })
  }, [])

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (backup –ø–æ–¥—Ö–æ–¥)
  const startEditBackup = useCallback((rowId: string, originalRow: RowData) => {
    console.log('üîç DEBUG: –ù–∞—á–∏–Ω–∞–µ–º backup —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏:', rowId) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    setEditingRows(prev => ({
      ...prev,
      [rowId]: { ...originalRow, isEditing: true }
    }))
  }, [])

  const stopEditBackup = useCallback((rowId: string) => {
    console.log('üîç DEBUG: –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º backup —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏:', rowId) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    setEditingRows(prev => {
      const updated = { ...prev }
      delete updated[rowId]
      return updated
    })
  }, [])

  const updateEditingRow = useCallback((rowId: string, updates: Partial<RowData>) => {
    console.log('üîç DEBUG: –û–±–Ω–æ–≤–ª—è–µ–º backup —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—É—é —Å—Ç—Ä–æ–∫—É:', { rowId, updates }) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    setEditingRows(prev => {
      if (prev[rowId]) {
        return {
          ...prev,
          [rowId]: { ...prev[rowId], ...updates }
        }
      }
      return prev
    })
  }, [])

  // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ —Å—Ç—Ä–æ–∫–∏
  const updateRowColor = useCallback(
    (rowId: string, color: RowColor) => {
      if (tableMode.mode === 'add') {
        updateNewRow(rowId, { color })
      } else if (editingRows[rowId]) {
        // –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –≤ —Ä–µ–∂–∏–º–µ backup —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        updateEditingRow(rowId, { color })
      } else {
        // –û–±—ã—á–Ω–æ–µ –æ–¥–∏–Ω–æ—á–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        updateEditedRow(rowId, { color })
      }
    },
    [tableMode.mode, updateNewRow, updateEditedRow, updateEditingRow, editingRows],
  )

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
  const saveChanges = useCallback(async () => {
    try {
      const promises: Promise<any>[] = []

      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å—Ç—Ä–æ–∫
      if (newRows.length > 0) {
        const newRowsData = newRows.map((row) => ({
          project_id: row.projectId,
          block_id: row.blockId || null,
          cost_category_id: row.costCategoryId || null,
          detail_cost_category_id: row.costTypeId || null,
          location_id: row.locationId || null,
          nomenclature_id: row.nomenclatureId || null,
          quantity: row.quantity,
          unit_id: row.unitId || null,
          rate_id: row.rateId || null,
          amount: row.amount,
          color: row.color || null,
          floor_quantities:
            Object.keys(row.floorQuantities).length > 0 ? row.floorQuantities : null,
          original_material: row.originalMaterial || null,
          original_quantity: row.originalQuantity || null,
          original_unit: row.originalUnit || null,
          original_unit_id: row.originalUnitId || null,
        }))

        promises.push(supabase.from('chessboard').insert(newRowsData))
      }

      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
      for (const [rowId, updates] of editedRows.entries()) {
        console.log('üîç saveChanges - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É:', { rowId, updates }) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ chessboard
        const chessboardUpdateData: any = {}

        // –ü–æ–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã chessboard (—Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø–æ–ª—è –∏–∑ —Å—Ö–µ–º—ã –ë–î)
        if (updates.color !== undefined) {
          chessboardUpdateData.color = updates.color || null
        }
        if (updates.unitId !== undefined) {
          chessboardUpdateData.unit_id = updates.unitId || null
        }
        if (updates.materialId !== undefined) {
          // materialId –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å UUID, –∞ –Ω–µ —Å—Ç—Ä–æ–∫–∞
          chessboardUpdateData.material = updates.materialId || null
        }
        if (updates.material !== undefined) {
          // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è material –∫–∞–∫ UUID —Å—Ç—Ä–æ–∫–∞
          chessboardUpdateData.material = updates.material || null
          console.log('üîç DEBUG: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—è material:', updates.material) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        }
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: floors –∏ floorQuantities —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ chessboard_floor_mapping
        // –ù–µ –ø—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Ö –≤ –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É chessboard

        // –û–±–Ω–æ–≤–ª—è–µ–º updated_at
        chessboardUpdateData.updated_at = new Date().toISOString()

        console.log('üìä saveChanges - –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã:', { rowId, chessboardUpdateData }) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —á—Ç–æ –æ–±–Ω–æ–≤–ª—è—Ç—å
        if (Object.keys(chessboardUpdateData).length > 1) { // > 1 –ø–æ—Ç–æ–º—É —á—Ç–æ updated_at –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å
          console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã chessboard') // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
          promises.push(
            supabase.from('chessboard').update(chessboardUpdateData).eq('id', rowId)
          )
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º mapping —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π (—Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö)
        const mappingUpdateData: any = {}
        if (updates.blockId !== undefined) mappingUpdateData.block_id = updates.blockId || null
        if (updates.costCategoryId !== undefined) {
          // cost_category_id –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å integer
          mappingUpdateData.cost_category_id = updates.costCategoryId ? parseInt(updates.costCategoryId) : null
        }
        if (updates.costTypeId !== undefined) {
          // cost_type_id –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å integer
          mappingUpdateData.cost_type_id = updates.costTypeId ? parseInt(updates.costTypeId) : null
        }
        if (updates.locationId !== undefined) {
          // location_id –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å integer
          mappingUpdateData.location_id = updates.locationId ? parseInt(updates.locationId) : null
        }

        if (Object.keys(mappingUpdateData).length > 0) {
          mappingUpdateData.updated_at = new Date().toISOString()
          console.log('üìä saveChanges - –¥–∞–Ω–Ω—ã–µ –¥–ª—è mapping —Ç–∞–±–ª–∏—Ü—ã:', { rowId, mappingUpdateData }) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏ –∑–∞—Ç–µ–º update –∏–ª–∏ insert
          const mappingPromise = supabase
            .from('chessboard_mapping')
            .select('id')
            .eq('chessboard_id', rowId)
            .maybeSingle()
            .then(async ({ data: existingMapping, error: selectError }) => {
              if (selectError) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è mapping:', selectError) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                throw selectError
              }

              if (existingMapping) {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
                console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é mapping –∑–∞–ø–∏—Å—å:', existingMapping.id) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                const { error: updateError } = await supabase
                  .from('chessboard_mapping')
                  .update(mappingUpdateData)
                  .eq('chessboard_id', rowId)

                if (updateError) {
                  console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ mapping:', updateError) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                  throw updateError
                }
              } else {
                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                console.log('‚ûï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é mapping –∑–∞–ø–∏—Å—å –¥–ª—è chessboard_id:', rowId) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                const { error: insertError } = await supabase
                  .from('chessboard_mapping')
                  .insert({ ...mappingUpdateData, chessboard_id: rowId })

                if (insertError) {
                  console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ mapping:', insertError) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                  throw insertError
                }
              }
            })

          promises.push(mappingPromise)
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º floors mapping –¥–ª—è —ç—Ç–∞–∂–µ–π
        if (updates.floors !== undefined || updates.floorQuantities !== undefined) {
          console.log('üè¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç—Ç–∞–∂–µ–π:', { floors: updates.floors, floorQuantities: updates.floorQuantities }) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

          // –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç—Ç–∞–∂–µ–π (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ —Å—Ç–∞—Ä–æ–π –ª–æ–≥–∏–∫–µ –∏–∑ backup)
          const updateFloorsPromise = async () => {
            try {
              // 1. –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–≤—è–∑–∏ —ç—Ç–∞–∂–µ–π
              const { error: deleteError } = await supabase
                .from('chessboard_floor_mapping')
                .delete()
                .eq('chessboard_id', rowId)

              if (deleteError) {
                console.error('üè¢ –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö —ç—Ç–∞–∂–µ–π:', deleteError) // LOG: –æ—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
                throw deleteError
              }

              // 2. –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É —ç—Ç–∞–∂–µ–π –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
              const floorsString = updates.floors !== undefined ? updates.floors : ''
              if (!floorsString) {
                console.log('üè¢ –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ —ç—Ç–∞–∂–µ–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å—Ç–∞–≤–∫—É') // LOG: –ø—É—Å—Ç—ã–µ —ç—Ç–∞–∂–∏
                return
              }

              const floors = parseFloorsFromString(floorsString)
              const floorQuantities = updates.floorQuantities || {}

              console.log('üè¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ —ç—Ç–∞–∂–µ–π:', { floors, floorQuantities }) // LOG: –æ–±—Ä–∞–±–æ—Ç–∫–∞ —ç—Ç–∞–∂–µ–π

              if (floors.length > 0) {
                const totalFloors = floors.length
                const floorMappings = floors.map((floor) => ({
                  chessboard_id: rowId,
                  floor_number: floor,
                  quantityPd: floorQuantities?.[floor]?.quantityPd
                    ? Number(floorQuantities[floor].quantityPd)
                    : null,
                  quantitySpec: floorQuantities?.[floor]?.quantitySpec
                    ? Number(floorQuantities[floor].quantitySpec)
                    : null,
                  quantityRd: floorQuantities?.[floor]?.quantityRd
                    ? Number(floorQuantities[floor].quantityRd)
                    : null,
                }))

                console.log('üè¢ –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —ç—Ç–∞–∂–∏:', floorMappings) // LOG: –≤—Å—Ç–∞–≤–∫–∞ —ç—Ç–∞–∂–µ–π

                const { error: insertError } = await supabase
                  .from('chessboard_floor_mapping')
                  .insert(floorMappings)

                if (insertError) {
                  console.error('üè¢ –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –Ω–æ–≤—ã—Ö —ç—Ç–∞–∂–µ–π:', insertError) // LOG: –æ—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏
                  throw insertError
                }

                console.log('‚úÖ –≠—Ç–∞–∂–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã') // LOG: —É—Å–ø–µ—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
              }
            } catch (error) {
              console.error('üè¢ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç—Ç–∞–∂–µ–π:', error) // LOG: –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞
              throw error
            }
          }

          promises.push(updateFloorsPromise())
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º nomenclature mapping –¥–ª—è –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã
        if (updates.nomenclatureId !== undefined || updates.supplier !== undefined) {
          console.log('üîç –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã:', { nomenclatureId: updates.nomenclatureId, supplier: updates.supplier }) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

          // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Å–≤—è–∑—å
          promises.push(
            supabase.from('chessboard_nomenclature_mapping').delete().eq('chessboard_id', rowId)
          )

          // –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é —Å–≤—è–∑—å
          const nomenclatureId = updates.nomenclatureId !== undefined ? updates.nomenclatureId : null
          if (nomenclatureId) {
            promises.push(
              supabase.from('chessboard_nomenclature_mapping').insert({
                chessboard_id: rowId,
                nomenclature_id: nomenclatureId,
                supplier_name: updates.supplier || null
              })
            )
          }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º rates mapping –¥–ª—è –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç
        if (updates.rateId !== undefined || updates.workName !== undefined) {
          console.log('üí∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ü–µ–Ω–∫–∏:', { rateId: updates.rateId, workName: updates.workName }) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
          // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Å–≤—è–∑—å
          promises.push(
            supabase.from('chessboard_rates_mapping').delete().eq('chessboard_id', rowId)
          )
          // –ï—Å–ª–∏ –µ—Å—Ç—å rateId, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é —Å–≤—è–∑—å
          const rateId = updates.rateId !== undefined ? updates.rateId : null
          if (rateId) {
            promises.push(
              supabase.from('chessboard_rates_mapping').insert({
                chessboard_id: rowId,
                rate_id: rateId
              })
            )
          }
        }
      }

      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫ –≤ —Ä–µ–∂–∏–º–µ backup —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ–ª–Ω–∞—è –ª–æ–≥–∏–∫–∞)
      for (const [rowId, editedRowData] of Object.entries(editingRows)) {
        console.log('üîç saveChanges - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º backup —Å—Ç—Ä–æ–∫—É:', { rowId, editedRowData }) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É chessboard
        const chessboardUpdateData: any = {}

        if (editedRowData.color !== undefined) {
          chessboardUpdateData.color = editedRowData.color || null
        }
        if (editedRowData.unitId !== undefined) {
          chessboardUpdateData.unit_id = editedRowData.unitId || null
        }
        if (editedRowData.material !== undefined) {
          chessboardUpdateData.material = editedRowData.material || null
        }

        chessboardUpdateData.updated_at = new Date().toISOString()

        if (Object.keys(chessboardUpdateData).length > 1) {
          console.log('‚úÖ Backup: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã chessboard') // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
          promises.push(
            supabase.from('chessboard').update(chessboardUpdateData).eq('id', rowId)
          )
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º mapping —Ç–∞–±–ª–∏—Ü—É –¥–ª—è backup —Å—Ç—Ä–æ–∫–∏
        const mappingUpdateData: any = {}
        if (editedRowData.blockId !== undefined) mappingUpdateData.block_id = editedRowData.blockId || null
        if (editedRowData.costCategoryId !== undefined) {
          mappingUpdateData.cost_category_id = editedRowData.costCategoryId ? parseInt(editedRowData.costCategoryId) : null
        }
        if (editedRowData.costTypeId !== undefined) {
          mappingUpdateData.cost_type_id = editedRowData.costTypeId ? parseInt(editedRowData.costTypeId) : null
        }
        if (editedRowData.locationId !== undefined) {
          mappingUpdateData.location_id = editedRowData.locationId ? parseInt(editedRowData.locationId) : null
        }

        if (Object.keys(mappingUpdateData).length > 0) {
          mappingUpdateData.updated_at = new Date().toISOString()
          console.log('üìä Backup: –¥–∞–Ω–Ω—ã–µ –¥–ª—è mapping —Ç–∞–±–ª–∏—Ü—ã:', { rowId, mappingUpdateData }) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

          const mappingPromise = supabase
            .from('chessboard_mapping')
            .select('id')
            .eq('chessboard_id', rowId)
            .maybeSingle()
            .then(async ({ data: existingMapping, error: selectError }) => {
              if (selectError) {
                console.error('‚ùå Backup: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ mapping:', selectError) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                throw selectError
              }

              if (existingMapping) {
                console.log('üîÑ Backup: –æ–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é mapping –∑–∞–ø–∏—Å—å:', existingMapping.id) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                const { error: updateError } = await supabase
                  .from('chessboard_mapping')
                  .update(mappingUpdateData)
                  .eq('chessboard_id', rowId)

                if (updateError) throw updateError
              } else {
                console.log('‚ûï Backup: —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é mapping –∑–∞–ø–∏—Å—å –¥–ª—è:', rowId) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                const { error: insertError } = await supabase
                  .from('chessboard_mapping')
                  .insert({ ...mappingUpdateData, chessboard_id: rowId })

                if (insertError) throw insertError
              }
            })

          promises.push(mappingPromise)
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º nomenclature mapping –¥–ª—è backup —Å—Ç—Ä–æ–∫–∏
        if (editedRowData.nomenclatureId !== undefined || editedRowData.supplier !== undefined) {
          console.log('üîç Backup: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã:', { nomenclatureId: editedRowData.nomenclatureId, supplier: editedRowData.supplier }) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

          promises.push(
            supabase.from('chessboard_nomenclature_mapping').delete().eq('chessboard_id', rowId)
          )

          const nomenclatureId = editedRowData.nomenclatureId
          if (nomenclatureId) {
            promises.push(
              supabase.from('chessboard_nomenclature_mapping').insert({
                chessboard_id: rowId,
                nomenclature_id: nomenclatureId,
                supplier_name: editedRowData.supplier || null
              })
            )
          }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º rates mapping –¥–ª—è backup —Å—Ç—Ä–æ–∫–∏
        if (editedRowData.rateId !== undefined || editedRowData.workName !== undefined) {
          console.log('üí∞ Backup: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ü–µ–Ω–∫–∏:', { rateId: editedRowData.rateId, workName: editedRowData.workName }) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
          promises.push(
            supabase.from('chessboard_rates_mapping').delete().eq('chessboard_id', rowId)
          )
          const rateId = editedRowData.rateId
          if (rateId) {
            promises.push(
              supabase.from('chessboard_rates_mapping').insert({
                chessboard_id: rowId,
                rate_id: rateId
              })
            )
          }
        }

        console.log('üíæ Backup —Å—Ç—Ä–æ–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞:', rowId) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
      }

      await Promise.all(promises)

      // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –¥–ª—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
      console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –¥–ª—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö') // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

      // Invalidate –≤—Å–µ—Ö queries, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 'chessboard-'
      await queryClient.invalidateQueries({
        predicate: (query) => {
          const queryKey = query.queryKey
          return (
            Array.isArray(queryKey) &&
            typeof queryKey[0] === 'string' &&
            queryKey[0].startsWith('chessboard-')
          )
        },
      })

      console.log('‚úÖ –í—Å–µ chessboard –∫—ç—à–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã, –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∞–Ω—ã') // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setNewRows([])
      setEditedRows(new Map())
      setEditingRows({})
      setMode('view')

      message.success('–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã')
    } catch (error) {
      console.error('Error saving changes:', error)
      message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π')
    }
  }, [newRows, editedRows, editingRows, queryClient, setMode])

  // –û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
  const cancelChanges = useCallback(() => {
    setNewRows([])
    setEditedRows(new Map())
    setEditingRows({})
    setMode('view')
  }, [setMode])

  // –£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
  const deleteSelectedRows = useCallback(async () => {
    if (tableMode.selectedRowKeys.length === 0) {
      message.warning('–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è')
      return
    }

    try {
      const { error } = await supabase
        .from('chessboard')
        .delete()
        .in('id', tableMode.selectedRowKeys as string[])

      if (error) throw error

      // Invalidate –≤—Å–µ—Ö queries, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 'chessboard-'
      await queryClient.invalidateQueries({
        predicate: (query) => {
          const queryKey = query.queryKey
          return (
            Array.isArray(queryKey) &&
            typeof queryKey[0] === 'string' &&
            queryKey[0].startsWith('chessboard-')
          )
        },
      })
      setMode('view')
      message.success(`–£–¥–∞–ª–µ–Ω–æ —Å—Ç—Ä–æ–∫: ${tableMode.selectedRowKeys.length}`)
    } catch (error) {
      console.error('Error deleting rows:', error)
      message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç—Ä–æ–∫')
    }
  }, [tableMode.selectedRowKeys, queryClient, setMode])

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Å —É—á–µ—Ç–æ–º –Ω–æ–≤—ã—Ö, –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫ –∏ backup —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  const getDisplayData = useCallback((originalData: RowData[]) => {
    const dataWithEdits = originalData.map(row => {
      // –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –≤ —Ä–µ–∂–∏–º–µ backup —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë –¥–∞–Ω–Ω—ã–µ
      if (editingRows[row.id]) {
        return editingRows[row.id]
      }

      // –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω–æ–µ –æ–¥–∏–Ω–æ—á–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
      const edits = editedRows.get(row.id)
      return edits ? { ...row, ...edits, isEditing: true } : row
    })

    return [...dataWithEdits, ...newRows]
  }, [editedRows, newRows, editingRows])

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
  const hasUnsavedChanges = useMemo(() => {
    return newRows.length > 0 || editedRows.size > 0 || Object.keys(editingRows).length > 0
  }, [newRows.length, editedRows.size, editingRows])

  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    tableMode,
    newRows,
    editedRows,
    editingRows,
    hasUnsavedChanges,

    // –î–µ–π—Å—Ç–≤–∏—è —Å —Ä–µ–∂–∏–º–∞–º–∏
    setMode,
    setSelectedRowKeys,

    // –û–ø–µ—Ä–∞—Ü–∏–∏ —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏ (–æ–¥–∏–Ω–æ—á–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)
    addNewRow,
    removeNewRow,
    copyRow,
    updateNewRow,
    startEditing,
    cancelEditing,
    updateEditedRow,
    updateRowColor,

    // –û–ø–µ—Ä–∞—Ü–∏–∏ backup –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    startEditBackup,
    stopEditBackup,
    updateEditingRow,

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ/–æ—Ç–º–µ–Ω–∞
    saveChanges,
    cancelChanges,
    deleteSelectedRows,

    // –£—Ç–∏–ª–∏—Ç—ã
    getDisplayData,
  }
}

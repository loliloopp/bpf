import { useState, useCallback, useMemo } from 'react'
import { useQueryClient } from '@tanstack/react-query'
import { App } from 'antd'
import type { Key } from 'react'
import { supabase } from '@/lib/supabase'
import type { TableMode, RowData, RowColor } from '../types'
import { parseFloorsFromString } from '../utils/floors'

export const useTableOperations = (refetch?: () => void) => {
  const queryClient = useQueryClient()
  const { message } = App.useApp()

  // –†–µ–∂–∏–º —Ç–∞–±–ª–∏—Ü—ã (–ø—Ä–æ—Å–º–æ—Ç—Ä, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ)
  const [tableMode, setTableMode] = useState<TableMode>({
    mode: 'view',
    selectedRowKeys: [],
  })

  // –ù–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ (–¥–ª—è —Ä–µ–∂–∏–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è)
  const [newRows, setNewRows] = useState<RowData[]>([])

  // –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ (–¥–ª—è —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  const [editedRows, setEditedRows] = useState<Map<string, Partial<RowData>>>(new Map())

  // –°—Ç—Ä–æ–∫–∏ –≤ —Ä–µ–∂–∏–º–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (backup –ø–æ–¥—Ö–æ–¥)
  const [editingRows, setEditingRows] = useState<Record<string, RowData>>({})

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ç–∞–±–ª–∏—Ü—ã
  const setMode = useCallback((mode: TableMode['mode']) => {
    console.log('üîç DEBUG: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞:', mode) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    setTableMode((prev) => ({
      ...prev,
      mode,
      selectedRowKeys: mode === 'view' ? [] : prev.selectedRowKeys,
    }))

    // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Ä–µ–∂–∏–º–æ–≤
    if (mode === 'view') {
      setNewRows([])
      setEditedRows(new Map())
      setEditingRows({})
    }
  }, [message])

  // –í—ã–±–æ—Ä —Å—Ç—Ä–æ–∫ –¥–ª—è –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
  const setSelectedRowKeys = useCallback((keys: Key[]) => {
    setTableMode((prev) => ({ ...prev, selectedRowKeys: keys }))
  }, [message])

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
  const addNewRow = useCallback((projectId: string, insertPosition: 'first' | 'after' = 'first', afterRowIndex?: number) => {
    console.log('üöÄ addNewRow –≤—ã–∑–≤–∞–Ω–∞:', { projectId, insertPosition, afterRowIndex }) // LOG: –≤—ã–∑–æ–≤ addNewRow
    if (!projectId) {
      message.warning('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏')
      return
    }

    const newRow: RowData = {
      id: `new-${Date.now()}-${Math.random()}`,
      project: '',
      projectId,
      // –î–∞–Ω–Ω—ã–µ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
      documentationSection: '',
      documentationCode: '',
      documentationProjectName: '',
      documentationVersion: '',
      documentationVersionId: '',
      documentationCodeId: '',
      // –î–∞–Ω–Ω—ã–µ –∏–∑ –º–∞–ø–ø–∏–Ω–≥–æ–≤
      block: '',
      blockId: '',
      floors: '',
      costCategory: '',
      costCategoryId: '',
      costType: '',
      costTypeId: '',
      workName: '',
      workUnit: '',
      rateId: '',
      location: '',
      locationId: '',
      material: '',
      materialType: '–ë–∞–∑–∞',
      quantityPd: '',
      quantitySpec: '',
      quantityRd: '',
      nomenclature: '',
      nomenclatureId: '',
      supplier: '',
      unit: '',
      unitId: '',
      comments: '',
      color: '',
      // –î–∞–Ω–Ω—ã–µ —ç—Ç–∞–∂–µ–π –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
      floorQuantities: {},
      // –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è
      isNew: true,
      isEditing: tableMode.mode === 'add', // LOG: isEditing –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–µ–∂–∏–º–∞
      _insertPosition: insertPosition,
      _afterRowIndex: afterRowIndex,
    }

    setNewRows((prev) => {
      console.log('üìù setNewRows - —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', { prevLength: prev.length, insertPosition, afterRowIndex }) // LOG: —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º
      if (insertPosition === 'first') {
        const result = [newRow, ...prev]
        console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –≤ –Ω–∞—á–∞–ª–æ, –Ω–æ–≤–∞—è –¥–ª–∏–Ω–∞:', result.length) // LOG: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –Ω–∞—á–∞–ª–æ
        return result
      } else if (insertPosition === 'after' && afterRowIndex !== undefined) {
        const newRows = [...prev]
        newRows.splice(afterRowIndex + 1, 0, newRow)
        console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ –∏–Ω–¥–µ–∫—Å–∞', afterRowIndex, '–Ω–æ–≤–∞—è –¥–ª–∏–Ω–∞:', newRows.length) // LOG: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∏–Ω–¥–µ–∫—Å–∞
        return newRows
      }
      const result = [...prev, newRow]
      console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –≤ –∫–æ–Ω–µ—Ü, –Ω–æ–≤–∞—è –¥–ª–∏–Ω–∞:', result.length) // LOG: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ–Ω–µ—Ü
      return result
    })
  }, [message])

  // –£–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
  const removeNewRow = useCallback((rowId: string) => {
    setNewRows((prev) => prev.filter((row) => row.id !== rowId))
  }, [message])

  // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏
  const copyRow = useCallback((sourceRow: RowData, insertPosition: 'after' = 'after', afterRowIndex?: number) => {
    console.log('üîÑ copyRow –≤—ã–∑–≤–∞–Ω–∞:', { sourceRowId: sourceRow?.id, insertPosition, afterRowIndex }) // LOG: –≤—ã–∑–æ–≤ copyRow
    const copiedRow: RowData = {
      ...sourceRow,
      id: `copy-${Date.now()}-${Math.random()}`,
      isNew: true,
      isEditing: tableMode.mode === 'add', // LOG: isEditing –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–µ–∂–∏–º–∞
      _insertPosition: insertPosition,
      _afterRowIndex: afterRowIndex,
    }

    setNewRows((prev) => {
      if (insertPosition === 'after' && afterRowIndex !== undefined) {
        const newRows = [...prev]
        newRows.splice(afterRowIndex + 1, 0, copiedRow)
        return newRows
      }
      return [...prev, copiedRow]
    })
  }, [message])

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
  const updateNewRow = useCallback((rowId: string, updates: Partial<RowData>) => {
    setNewRows((prev) => prev.map((row) => (row.id === rowId ? { ...row, ...updates } : row)))
  }, [message])

  // –ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å—Ç—Ä–æ–∫–∏
  const startEditing = useCallback((rowId: string) => {
    setEditedRows(prev => {
      const newMap = new Map(prev)
      if (!newMap.has(rowId)) {
        newMap.set(rowId, {})
      }
      return newMap
    })
  }, [message])

  // –û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏
  const cancelEditing = useCallback((rowId: string) => {
    setEditedRows(prev => {
      const newMap = new Map(prev)
      newMap.delete(rowId)
      return newMap
    })
  }, [message])

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–π —Å—Ç—Ä–æ–∫–∏
  const updateEditedRow = useCallback((rowId: string, updates: Partial<RowData>) => {
    console.log('üîÑ updateEditedRow called:', { rowId, updates }) // LOG: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–π —Å—Ç—Ä–æ–∫–∏

    setEditedRows(prev => {
      const newMap = new Map(prev)
      const currentEdits = newMap.get(rowId) || {}
      newMap.set(rowId, { ...currentEdits, ...updates })
      return newMap
    })
  }, [message])

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (backup –ø–æ–¥—Ö–æ–¥)
  const startEditBackup = useCallback((rowId: string, originalRow: RowData) => {
    console.log('üîç DEBUG: –ù–∞—á–∏–Ω–∞–µ–º backup —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏:', rowId) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    setEditingRows(prev => ({
      ...prev,
      [rowId]: { ...originalRow, isEditing: true }
    }))
  }, [message])

  const stopEditBackup = useCallback((rowId: string) => {
    console.log('üîç DEBUG: –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º backup —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏:', rowId) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    setEditingRows(prev => {
      const updated = { ...prev }
      delete updated[rowId]
      return updated
    })
  }, [message])

  const updateEditingRow = useCallback((rowId: string, updates: Partial<RowData>) => {
    console.log('üîç DEBUG: –û–±–Ω–æ–≤–ª—è–µ–º backup —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—É—é —Å—Ç—Ä–æ–∫—É:', { rowId, updates }) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    setEditingRows(prev => {
      if (prev[rowId]) {
        return {
          ...prev,
          [rowId]: { ...prev[rowId], ...updates }
        }
      }
      return prev
    })
  }, [message])

  // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ —Å—Ç—Ä–æ–∫–∏
  const updateRowColor = useCallback(
    async (rowId: string, color: RowColor) => {
      if (tableMode.mode === 'add') {
        updateNewRow(rowId, { color })
      } else if (editingRows[rowId]) {
        // –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –≤ —Ä–µ–∂–∏–º–µ backup —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        updateEditingRow(rowId, { color })
      } else if (tableMode.mode === 'view') {
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–≤–µ—Ç –≤ –ë–î –±–µ–∑ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        try {
          console.log('üé® Updating row color directly in DB:', { rowId, color }) // LOG: –ø—Ä—è–º–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –≤ –ë–î

          const { error } = await supabase
            .from('chessboard')
            .update({ color })
            .eq('id', rowId)

          if (error) {
            console.error('‚ùå Failed to update row color:', error) // LOG: –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–∞
            message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–≤–µ—Ç–∞ —Å—Ç—Ä–æ–∫–∏')
          } else {
            console.log('‚úÖ Row color updated successfully') // LOG: —Ü–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à React Query
            queryClient.invalidateQueries({ queryKey: ['chessboard-data'] })
            message.success('–¶–≤–µ—Ç —Å—Ç—Ä–æ–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω')
          }
        } catch (error) {
          console.error('‚ùå Error updating row color:', error) // LOG: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–≤–µ—Ç–∞
          message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–≤–µ—Ç–∞ —Å—Ç—Ä–æ–∫–∏')
        }
      } else {
        // –û–±—ã—á–Ω–æ–µ –æ–¥–∏–Ω–æ—á–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ä–µ–∂–∏–º–æ–≤
        updateEditedRow(rowId, { color })
      }
    },
    [tableMode.mode, updateNewRow, updateEditedRow, updateEditingRow, editingRows, queryClient, message],
  )

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
  const saveChanges = useCallback(async () => {
    try {
      const promises: Promise<any>[] = []

      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å—Ç—Ä–æ–∫ - –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–∞–∫ –≤ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
      if (newRows.length > 0) {
        for (const row of newRows) {
          console.log('üîç DEBUG: –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏:', { blockId: row.blockId, block: row.block, costCategoryId: row.costCategoryId, locationId: row.locationId }) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
          // 1. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ chessboard (—Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –ë–î)
          const chessboardData = {
            project_id: row.projectId,
            color: row.color || null,
            unit_id: row.unitId || null,
            material: row.materialId || null,
            material_type: row.materialType || '–ë–∞–∑–∞',
          }

          // –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ - –µ—Å–ª–∏ —ç—Ç–æ UUID, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å, –µ—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ - –∏—â–µ–º/—Å–æ–∑–¥–∞–µ–º
          if (row.material && row.material.trim()) {
            const materialValue = row.material.trim()
            console.log('üîç DEBUG: –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏:', materialValue) // LOG

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ UUID
            const isUUID = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i.test(materialValue)

            if (isUUID) {
              // –ï—Å–ª–∏ —ç—Ç–æ UUID, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
              chessboardData.material = materialValue
              console.log('üîç DEBUG: –ò—Å–ø–æ–ª—å–∑—É–µ–º UUID –º–∞—Ç–µ—Ä–∏–∞–ª–∞:', materialValue) // LOG
            } else {
              // –ï—Å–ª–∏ —ç—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ, –∏—â–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª
              const { data: existingMaterial, error: findError } = await supabase
                .from('materials')
                .select('uuid')
                .eq('name', materialValue)
                .single()

              if (findError && findError.code !== 'PGRST116') {
                console.error('üîç ERROR: –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏:', findError) // LOG
                throw findError
              }

              let materialId: string
              if (existingMaterial) {
                materialId = existingMaterial.uuid
                console.log('üîç DEBUG: –ú–∞—Ç–µ—Ä–∏–∞–ª –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏, UUID:', materialId) // LOG
              } else {
                console.log('üîç DEBUG: –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏:', materialValue) // LOG
                const { data: newMaterial, error: createError } = await supabase
                  .from('materials')
                  .insert({ name: materialValue })
                  .select('uuid')
                  .single()

                if (createError) {
                  console.error('üîç ERROR: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏:', createError) // LOG
                  throw createError
                }

                materialId = newMaterial.uuid
                console.log('üîç DEBUG: –ù–æ–≤—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª —Å–æ–∑–¥–∞–Ω –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏, UUID:', materialId) // LOG
              }

              chessboardData.material = materialId
            }
          }

          console.log('üìä –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ chessboard:', chessboardData) // LOG

          const { data: newChessboardRow, error: insertError } = await supabase
            .from('chessboard')
            .insert(chessboardData)
            .select('id')
            .single()

          if (insertError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ chessboard:', insertError) // LOG
            throw insertError
          }

          const newRowId = newChessboardRow.id
          console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ chessboard —Å ID:', newRowId) // LOG

          // 2. –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ mapping —Ç–∞–±–ª–∏—Ü–µ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é)
          const mappingData: any = {}
          console.log('üîç DEBUG: –ü—Ä–æ–≤–µ—Ä—è–µ–º blockId –¥–ª—è mapping:', { blockId: row.blockId, hasBlockId: !!row.blockId }) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
          if (row.blockId) {
            mappingData.block_id = row.blockId
            console.log('‚úÖ DEBUG: –î–æ–±–∞–≤–∏–ª–∏ block_id –≤ mapping:', mappingData.block_id) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
          }
          if (row.costCategoryId) mappingData.cost_category_id = parseInt(row.costCategoryId)
          if (row.costTypeId) mappingData.cost_type_id = parseInt(row.costTypeId)
          if (row.locationId) mappingData.location_id = parseInt(row.locationId)

          if (Object.keys(mappingData).length > 0) {
            mappingData.chessboard_id = newRowId
            mappingData.updated_at = new Date().toISOString()

            console.log('üìä –°–æ–∑–¥–∞–Ω–∏–µ mapping –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏:', mappingData) // LOG

            const { error: mappingError } = await supabase
              .from('chessboard_mapping')
              .insert(mappingData)

            if (mappingError) {
              console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è mapping –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏:', mappingError) // LOG
              throw mappingError
            }
          }

          // 3. –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑–∏ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é)
          if (row.documentationVersionId) {
            console.log('üìÑ –°–æ–∑–¥–∞–Ω–∏–µ documentation mapping –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏:', row.documentationVersionId) // LOG
            const { error: docError } = await supabase
              .from('chessboard_documentation_mapping')
              .insert({
                chessboard_id: newRowId,
                version_id: row.documentationVersionId
              })

            if (docError) {
              console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è documentation mapping:', docError) // LOG
              throw docError
            }
          }

          // 4. –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑–∏ —Å –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–æ–π (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é)
          if (row.nomenclatureId) {
            console.log('üè∑Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ nomenclature mapping –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏:', row.nomenclatureId) // LOG
            const { error: nomError } = await supabase
              .from('chessboard_nomenclature_mapping')
              .insert({
                chessboard_id: newRowId,
                nomenclature_id: row.nomenclatureId,
                supplier_name: row.supplier || null
              })

            if (nomError) {
              console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è nomenclature mapping:', nomError) // LOG
              throw nomError
            }
          }

          // 5. –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑–∏ —Å —Ä–∞—Å—Ü–µ–Ω–∫–∞–º–∏ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é)
          if (row.rateId || row.workName) {
            console.log('üí∞ –°–æ–∑–¥–∞–Ω–∏–µ rates mapping –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏:', { rateId: row.rateId, workName: row.workName }) // LOG

            let finalRateId = row.rateId

            // –ï—Å–ª–∏ –µ—Å—Ç—å workName –Ω–æ –Ω–µ—Ç rateId, –∏—â–µ–º/—Å–æ–∑–¥–∞–µ–º —Ä–∞—Å—Ü–µ–Ω–∫—É
            if (row.workName && row.workName.trim() && !finalRateId) {
              const workNameValue = row.workName.trim()
              console.log('üí∞ –ü–æ–∏—Å–∫ —Ä–∞—Å—Ü–µ–Ω–∫–∏ –ø–æ workName:', workNameValue) // LOG

              // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ä–∞—Å—Ü–µ–Ω–∫—É
              const { data: existingRate, error: findRateError } = await supabase
                .from('rates')
                .select('id')
                .eq('work_name', workNameValue)
                .single()

              if (findRateError && findRateError.code !== 'PGRST116') {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ä–∞—Å—Ü–µ–Ω–∫–∏:', findRateError) // LOG
                throw findRateError
              }

              if (existingRate) {
                finalRateId = existingRate.id
                console.log('‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Ä–∞—Å—Ü–µ–Ω–∫–∞:', finalRateId) // LOG
              } else {
                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ä–∞—Å—Ü–µ–Ω–∫—É —Å–æ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                console.log('üí∞ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ä–∞—Å—Ü–µ–Ω–∫–∏:', workNameValue) // LOG
                const { data: newRate, error: createRateError } = await supabase
                  .from('rates')
                  .insert({
                    work_name: workNameValue,
                    work_set: '',
                    base_rate: 0,
                    unit_id: row.unitId || null,
                    active: true
                  })
                  .select('id')
                  .single()

                if (createRateError) {
                  console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Ü–µ–Ω–∫–∏:', createRateError) // LOG
                  throw createRateError
                }

                finalRateId = newRate.id
                console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Ä–∞—Å—Ü–µ–Ω–∫–∞:', finalRateId) // LOG
              }
            }

            // –°–æ–∑–¥–∞–µ–º mapping —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å finalRateId
            if (finalRateId) {
              const { error: rateError } = await supabase
                .from('chessboard_rates_mapping')
                .insert({
                  chessboard_id: newRowId,
                  rate_id: finalRateId
                })

              if (rateError) {
                console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è rates mapping:', rateError) // LOG
                throw rateError
              }
            }
          }

          // 6. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤ chessboard_floor_mapping (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é)
          if (row.floorQuantities && Object.keys(row.floorQuantities).length > 0) {
            console.log('üè¢ –°–æ–∑–¥–∞–Ω–∏–µ floor mapping –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏:', row.floorQuantities) // LOG

            const floorRecords = []
            for (const [floorNumber, quantities] of Object.entries(row.floorQuantities)) {
              console.log(`üè¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —ç—Ç–∞–∂ ${floorNumber}:`, quantities) // LOG
              floorRecords.push({
                chessboard_id: newRowId,
                floor_number: parseInt(floorNumber),
                quantityPd: quantities.quantityPd ? Number(quantities.quantityPd) : null,
                quantitySpec: quantities.quantitySpec ? Number(quantities.quantitySpec) : null,
                quantityRd: quantities.quantityRd ? Number(quantities.quantityRd) : null
              })
            }

            if (floorRecords.length > 0) {
              const { error: floorError } = await supabase
                .from('chessboard_floor_mapping')
                .insert(floorRecords)

              if (floorError) {
                console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è floor mapping:', floorError) // LOG
                throw floorError
              }
            }
          } else if (row.quantityPd || row.quantitySpec || row.quantityRd) {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—â–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–µ–∑ —ç—Ç–∞–∂–µ–π
            console.log('üè¢ –°–æ–∑–¥–∞–Ω–∏–µ general quantities –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏') // LOG
            console.log('üìä –û–±—â–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏:', { quantityPd: row.quantityPd, quantitySpec: row.quantitySpec, quantityRd: row.quantityRd }) // LOG
            const { error: quantityError } = await supabase
              .from('chessboard_floor_mapping')
              .insert({
                chessboard_id: newRowId,
                floor_number: null,
                quantityPd: row.quantityPd ? Number(row.quantityPd) : null,
                quantitySpec: row.quantitySpec ? Number(row.quantitySpec) : null,
                quantityRd: row.quantityRd ? Number(row.quantityRd) : null
              })

            if (quantityError) {
              console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è general quantities:', quantityError) // LOG
              throw quantityError
            }
          }
        }
      }

      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
      for (const [rowId, updates] of editedRows.entries()) {
        console.log('üîç saveChanges - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É:', { rowId, updates }) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
      console.log('üîç DEBUG: –í—Å–µ –∫–ª—é—á–∏ –≤ updates:', Object.keys(updates)) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
      console.log('üîç DEBUG: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏:', {
        documentationSection: updates.documentationSection,
        documentationCode: updates.documentationCode,
        documentationSectionId: updates.documentationSectionId,
        documentationCodeId: updates.documentationCodeId,
        documentationTagId: updates.documentationTagId,
        documentationId: updates.documentationId,
        block: updates.block,
        blockId: updates.blockId
      }) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ chessboard
        const chessboardUpdateData: any = {}

        // –ü–æ–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã chessboard (—Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø–æ–ª—è –∏–∑ —Å—Ö–µ–º—ã –ë–î)
        if (updates.color !== undefined) {
          chessboardUpdateData.color = updates.color || null
        }
        if (updates.unitId !== undefined) {
          chessboardUpdateData.unit_id = updates.unitId || null
        }
        if (updates.materialId !== undefined) {
          // materialId –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å UUID, –∞ –Ω–µ —Å—Ç—Ä–æ–∫–∞
          chessboardUpdateData.material = updates.materialId || null
        }
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞: –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª –≤ —Ç–∞–±–ª–∏—Ü–µ materials
        if (updates.material !== undefined) {
          const materialName = updates.material?.trim()
          if (materialName) {
            console.log('üîç DEBUG: –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞, –∏—â–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º:', materialName) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

            // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª (–ø–æ–ª–µ uuid, –∞ –Ω–µ id!)
            const { data: existingMaterial, error: findError } = await supabase
              .from('materials')
              .select('uuid')
              .eq('name', materialName)
              .single()

            if (findError && findError.code !== 'PGRST116') {
              console.error('üîç ERROR: –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞:', findError) // LOG: –æ—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞
              throw findError
            }

            let materialId: string
            if (existingMaterial) {
              // –ú–∞—Ç–µ—Ä–∏–∞–ª –Ω–∞–π–¥–µ–Ω
              materialId = existingMaterial.uuid
              console.log('üîç DEBUG: –ú–∞—Ç–µ—Ä–∏–∞–ª –Ω–∞–π–¥–µ–Ω, UUID:', materialId) // LOG: –Ω–∞–π–¥–µ–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª
            } else {
              // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª
              console.log('üîç DEBUG: –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª:', materialName) // LOG: –Ω–æ–≤—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª
              const { data: newMaterial, error: createError } = await supabase
                .from('materials')
                .insert({ name: materialName })
                .select('uuid')
                .single()

              if (createError) {
                console.error('üîç ERROR: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞:', createError) // LOG: –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è
                throw createError
              }

              materialId = newMaterial.uuid
              console.log('üîç DEBUG: –ù–æ–≤—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª —Å–æ–∑–¥–∞–Ω, UUID:', materialId) // LOG: —Å–æ–∑–¥–∞–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª
            }

            chessboardUpdateData.material = materialId
          } else {
            chessboardUpdateData.material = null
          }
        }
        if (updates.materialType !== undefined) {
          chessboardUpdateData.material_type = updates.materialType || '–ë–∞–∑–∞'
          console.log('üîç DEBUG: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—è materialType:', updates.materialType) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        }
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: floors –∏ floorQuantities —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ chessboard_floor_mapping
        // –ù–µ –ø—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Ö –≤ –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É chessboard

        // –û–±–Ω–æ–≤–ª—è–µ–º updated_at
        chessboardUpdateData.updated_at = new Date().toISOString()

        console.log('üìä saveChanges - –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã:', { rowId, chessboardUpdateData }) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —á—Ç–æ –æ–±–Ω–æ–≤–ª—è—Ç—å
        if (Object.keys(chessboardUpdateData).length > 1) { // > 1 –ø–æ—Ç–æ–º—É —á—Ç–æ updated_at –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å
          console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã chessboard') // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
          const chessboardPromise = supabase.from('chessboard').update(chessboardUpdateData).eq('id', rowId)
          promises.push(chessboardPromise)
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º mapping —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π (—Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö)
        const mappingUpdateData: any = {}
        console.log('üîç DEBUG: –ü—Ä–æ–≤–µ—Ä—è–µ–º blockId:', { blockId: updates.blockId, block: updates.block }) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        if (updates.blockId !== undefined) {
          mappingUpdateData.block_id = updates.blockId || null
          console.log('‚úÖ DEBUG: –î–æ–±–∞–≤–∏–ª–∏ block_id –≤ mapping:', mappingUpdateData.block_id) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        } else if (updates.block !== undefined) {
          // –ï—Å–ª–∏ –ø—Ä–∏—à–ª–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª–æ–∫–∞ –≤–º–µ—Å—Ç–æ ID - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∫–∞–∫ ID (–±–ª–æ–∫–∏ –º–æ–≥—É—Ç –±—ã—Ç—å UUID)
          mappingUpdateData.block_id = updates.block || null
          console.log('‚úÖ DEBUG: –î–æ–±–∞–≤–∏–ª–∏ block (as ID) –≤ mapping:', mappingUpdateData.block_id) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        }
        if (updates.costCategoryId !== undefined) {
          // cost_category_id –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å integer
          mappingUpdateData.cost_category_id = updates.costCategoryId ? parseInt(updates.costCategoryId) : null
        }
        if (updates.costTypeId !== undefined) {
          // cost_type_id –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å integer
          mappingUpdateData.cost_type_id = updates.costTypeId ? parseInt(updates.costTypeId) : null
        }
        if (updates.locationId !== undefined) {
          // location_id –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å integer
          mappingUpdateData.location_id = updates.locationId ? parseInt(updates.locationId) : null
        }

        if (Object.keys(mappingUpdateData).length > 0) {
          mappingUpdateData.updated_at = new Date().toISOString()
          console.log('üìä saveChanges - –¥–∞–Ω–Ω—ã–µ –¥–ª—è mapping —Ç–∞–±–ª–∏—Ü—ã:', { rowId, mappingUpdateData }) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏ –∑–∞—Ç–µ–º update –∏–ª–∏ insert
          const mappingPromise = supabase
            .from('chessboard_mapping')
            .select('id')
            .eq('chessboard_id', rowId)
            .maybeSingle()
            .then(async ({ data: existingMapping, error: selectError }) => {
              if (selectError) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è mapping:', selectError) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                throw selectError
              }

              if (existingMapping) {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
                console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é mapping –∑–∞–ø–∏—Å—å:', existingMapping.id) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                const { error: updateError } = await supabase
                  .from('chessboard_mapping')
                  .update(mappingUpdateData)
                  .eq('chessboard_id', rowId)

                if (updateError) {
                  console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ mapping:', updateError) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                  throw updateError
                }
              } else {
                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                console.log('‚ûï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é mapping –∑–∞–ø–∏—Å—å –¥–ª—è chessboard_id:', rowId) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                const { error: insertError } = await supabase
                  .from('chessboard_mapping')
                  .insert({ ...mappingUpdateData, chessboard_id: rowId })

                if (insertError) {
                  console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ mapping:', insertError) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                  throw insertError
                }
              }
            })

          promises.push(mappingPromise)
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º documentation mapping –¥–ª—è –ø–æ–ª–µ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        console.log('üîç DEBUG: –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏:', {
          documentationSectionId_defined: updates.documentationSectionId !== undefined,
          documentationCodeId_defined: updates.documentationCodeId !== undefined,
          documentationSectionId_value: updates.documentationSectionId,
          documentationCodeId_value: updates.documentationCodeId,
          documentationSection: updates.documentationSection,
          documentationCode: updates.documentationCode
        }) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

        if (updates.documentationSectionId !== undefined || updates.documentationCodeId !== undefined) {
          console.log('üìÑ –í–û–®–õ–ò –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏:', { documentationSectionId: updates.documentationSectionId, documentationCodeId: updates.documentationCodeId }) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

          // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–≤—è–∑–∏
          promises.push(
            supabase.from('chessboard_documentation_mapping').delete().eq('chessboard_id', rowId)
          )

          // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å–≤—è–∑—å - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è documentationVersionId –∫–∞–∫ version_id
          // –í —Ç–∞–±–ª–∏—Ü–µ chessboard_documentation_mapping –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ–ª–µ version_id
          if (updates.documentationVersionId) {
            console.log('üìÑ –î–æ–±–∞–≤–ª—è–µ–º version_id (documentationVersionId):', updates.documentationVersionId) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            promises.push(
              supabase.from('chessboard_documentation_mapping').insert({
                chessboard_id: rowId,
                version_id: updates.documentationVersionId
              })
            )
          } else if (updates.documentationCodeId) {
            // Fallback: –µ—Å–ª–∏ –≤–µ—Ä—Å–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞, –Ω–æ –≤—ã–±—Ä–∞–Ω –¥–æ–∫—É–º–µ–Ω—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º documentationCodeId
            console.log('üìÑ Fallback: –¥–æ–±–∞–≤–ª—è–µ–º version_id (documentationCodeId):', updates.documentationCodeId) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            promises.push(
              supabase.from('chessboard_documentation_mapping').insert({
                chessboard_id: rowId,
                version_id: updates.documentationCodeId
              })
            )
          } else {
            console.log('üìÑ documentationCodeId –Ω–µ —É–∫–∞–∑–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ documentation_mapping') // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
          }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º floors mapping –¥–ª—è —ç—Ç–∞–∂–µ–π –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤
        if (updates.floors !== undefined || updates.floorQuantities !== undefined ||
            updates.quantityPd !== undefined || updates.quantitySpec !== undefined || updates.quantityRd !== undefined) {
          console.log('üè¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç—Ç–∞–∂–µ–π –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤:', {
            floors: updates.floors,
            floorQuantities: updates.floorQuantities,
            quantityPd: updates.quantityPd,
            quantitySpec: updates.quantitySpec,
            quantityRd: updates.quantityRd
          }) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

          // –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç—Ç–∞–∂–µ–π –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤
          const updateFloorsPromise = async () => {
            try {
              // 1. –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ —ç—Ç–∞–∂–µ–π
              const { data: existingFloors } = await supabase
                .from('chessboard_floor_mapping')
                .select('*')
                .eq('chessboard_id', rowId)

              console.log('üîç –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ —ç—Ç–∞–∂–µ–π:', existingFloors) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

              // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç—Ç–∞–∂–∏ –∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
              const floorsString = updates.floors !== undefined ? updates.floors : ''
              const floorQuantities = updates.floorQuantities || {}

              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä—è–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤ (–±–µ–∑ —ç—Ç–∞–∂–µ–π)
              const hasDirectQuantityUpdates = updates.quantityPd !== undefined ||
                                               updates.quantitySpec !== undefined ||
                                               updates.quantityRd !== undefined

              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —ç—Ç–∞–∂–∏ –≤ –ë–î (–∫—Ä–æ–º–µ –∑–∞–ø–∏—Å–µ–π —Å floor_number = null)
              const existingFloorsWithNumbers = existingFloors?.filter(floor => floor.floor_number !== null) || []
              const hasExistingFloors = existingFloorsWithNumbers.length > 0

              console.log('üîç DEBUG: –ê–Ω–∞–ª–∏–∑ —É—Å–ª–æ–≤–∏–π –æ–±—Ä–∞–±–æ—Ç–∫–∏:', {
                floorsString,
                floorsStringTrimmed: floorsString.trim(),
                floorsStringExists: !!(floorsString && floorsString.trim()),
                hasDirectQuantityUpdates,
                hasExistingFloors,
                existingFloorsWithNumbers,
                updateFields: {
                  floors: updates.floors,
                  quantityPd: updates.quantityPd,
                  quantitySpec: updates.quantitySpec,
                  quantityRd: updates.quantityRd
                },
                floorQuantities
              }) // LOG: –∞–Ω–∞–ª–∏–∑ —É—Å–ª–æ–≤–∏–π

              if (floorsString && floorsString.trim()) {
                console.log('‚úÖ DEBUG: –í—ã–ø–æ–ª–Ω—è–µ–º —Å–µ–∫—Ü–∏—é –û–ë–†–ê–ë–û–¢–ö–ê –≠–¢–ê–ñ–ï–ô') // LOG: –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–µ–∫—Ü–∏–∏
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ —ç—Ç–∞–∂–∞–º–∏
                const floors = parseFloorsFromString(floorsString)
                console.log('üè¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ —ç—Ç–∞–∂–µ–π:', { floors, floorQuantities, hasDirectQuantityUpdates, quantityUpdates: { quantityPd: updates.quantityPd, quantitySpec: updates.quantitySpec, quantityRd: updates.quantityRd } }) // LOG: –æ–±—Ä–∞–±–æ—Ç–∫–∞ —ç—Ç–∞–∂–µ–π

                if (floors.length > 0) {
                  // –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–∏ —É–∫–∞–∑–∞–Ω–∏–∏ —ç—Ç–∞–∂–µ–π —É–¥–∞–ª—è–µ–º –í–°–ï —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
                  // (–≤–∫–ª—é—á–∞—è –∑–∞–ø–∏—Å–∏ —Å floor_number = null - –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–µ–∑ —ç—Ç–∞–∂–µ–π)
                  console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º –í–°–ï —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ —ç—Ç–∞–∂–µ–π –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤') // LOG: —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π
                  const { error: deleteError } = await supabase
                    .from('chessboard_floor_mapping')
                    .delete()
                    .eq('chessboard_id', rowId) // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏

                  if (deleteError) {
                    console.error('üè¢ –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö —ç—Ç–∞–∂–µ–π:', deleteError) // LOG: –æ—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
                    throw deleteError
                  }

                  // –¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —ç—Ç–∞–∂–µ–π
                  const newFloorRecords = floors.map(floor => {
                    // –ù–∞—Ö–æ–¥–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –¥–ª—è —ç—Ç–æ–≥–æ —ç—Ç–∞–∂–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ–∏–∑–º–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
                    const existingFloorRecord = existingFloors?.find(f => f.floor_number === floor)

                    const floorQuantityData = {
                      // –ü–†–ò–û–†–ò–¢–ï–¢: –ø—Ä—è–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤, –∑–∞—Ç–µ–º floorQuantities, –∑–∞—Ç–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
                      quantityPd: hasDirectQuantityUpdates && updates.quantityPd !== undefined
                        ? (updates.quantityPd ? Number(updates.quantityPd) : null)
                        : (floorQuantities?.[floor]?.quantityPd
                          ? Number(floorQuantities[floor].quantityPd)
                          : (existingFloorRecord?.quantityPd || null)),
                      quantitySpec: hasDirectQuantityUpdates && updates.quantitySpec !== undefined
                        ? (updates.quantitySpec ? Number(updates.quantitySpec) : null)
                        : (floorQuantities?.[floor]?.quantitySpec
                          ? Number(floorQuantities[floor].quantitySpec)
                          : (existingFloorRecord?.quantitySpec || null)),
                      quantityRd: hasDirectQuantityUpdates && updates.quantityRd !== undefined
                        ? (updates.quantityRd ? Number(updates.quantityRd) : null)
                        : (floorQuantities?.[floor]?.quantityRd
                          ? Number(floorQuantities[floor].quantityRd)
                          : (existingFloorRecord?.quantityRd || null)),
                    }

                    console.log(`üè¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ —ç—Ç–∞–∂–∞ ${floor}:`, {
                      hasDirectQuantityUpdates,
                      directUpdates: { quantityPd: updates.quantityPd, quantitySpec: updates.quantitySpec, quantityRd: updates.quantityRd },
                      floorQuantitiesForThisFloor: floorQuantities?.[floor],
                      existingRecord: existingFloorRecord,
                      resultQuantityData: floorQuantityData
                    }) // LOG: –æ–±—Ä–∞–±–æ—Ç–∫–∞ —ç—Ç–∞–∂–∞

                    return {
                      chessboard_id: rowId,
                      floor_number: floor,
                      ...floorQuantityData
                    }
                  })

                  console.log('‚ûï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —ç—Ç–∞–∂–∏:', newFloorRecords) // LOG: —Å–æ–∑–¥–∞–Ω–∏–µ —ç—Ç–∞–∂–µ–π

                  const { error: insertError } = await supabase
                    .from('chessboard_floor_mapping')
                    .insert(newFloorRecords)

                  if (insertError) {
                    console.error('üè¢ –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö —ç—Ç–∞–∂–µ–π:', insertError) // LOG: –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è
                    throw insertError
                  }

                  console.log('‚úÖ –≠—Ç–∞–∂–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–º–µ–Ω–µ–Ω—ã') // LOG: —É—Å–ø–µ—Ö –∑–∞–º–µ–Ω—ã
                }
              } else if (hasExistingFloors && hasDirectQuantityUpdates) {
                // –ù–û–í–ê–Ø –°–ï–ö–¶–ò–Ø: –ï—Å—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —ç—Ç–∞–∂–∏ –≤ –ë–î, –Ω–æ –ø–æ–ª–µ floors –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ
                // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —ç—Ç–∞–∂–µ–π
                                console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —ç—Ç–∞–∂–µ–π:', existingFloorsWithNumbers) // LOG: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —ç—Ç–∞–∂–µ–π

                // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏
                const { error: deleteError } = await supabase
                  .from('chessboard_floor_mapping')
                  .delete()
                  .eq('chessboard_id', rowId) // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏

                if (deleteError) {
                                    throw deleteError
                }

                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —ç—Ç–∞–∂–µ–π —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞–º–∏
                const totalFloors = existingFloorsWithNumbers.length
                
                const updatedFloorRecords = existingFloorsWithNumbers.map(existingFloor => {
                  return {
                    chessboard_id: rowId,
                    floor_number: existingFloor.floor_number,
                    // –†–ê–°–ü–†–ï–î–ï–õ–Ø–ï–ú –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –º–µ–∂–¥—É –≤—Å–µ–º–∏ —ç—Ç–∞–∂–∞–º–∏ –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
                    quantityPd: hasDirectQuantityUpdates && updates.quantityPd !== undefined
                      ? (updates.quantityPd ? Number(updates.quantityPd) / totalFloors : null)
                      : (existingFloor.quantityPd || null),
                    quantitySpec: hasDirectQuantityUpdates && updates.quantitySpec !== undefined
                      ? (updates.quantitySpec ? Number(updates.quantitySpec) / totalFloors : null)
                      : (existingFloor.quantitySpec || null),
                    quantityRd: hasDirectQuantityUpdates && updates.quantityRd !== undefined
                      ? (updates.quantityRd ? Number(updates.quantityRd) / totalFloors : null)
                      : (existingFloor.quantityRd || null),
                  }
                })

                console.log('üìê –ö–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –ø–æ —ç—Ç–∞–∂–∞–º:', updatedFloorRecords.map(record => ({
                  floor: record.floor_number,
                  quantityPd: record.quantityPd,
                  quantitySpec: record.quantitySpec,
                  quantityRd: record.quantityRd
                }))) // LOG: —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è

                const { error: insertError } = await supabase
                  .from('chessboard_floor_mapping')
                  .insert(updatedFloorRecords)

                if (insertError) {
                                    throw insertError
                }

                              } else if (hasDirectQuantityUpdates && (!floorsString || !floorsString.trim()) && !hasExistingFloors) {
                                console.log('‚ö†Ô∏è DEBUG: –£—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:', {
                  hasDirectQuantityUpdates,
                  floorsStringEmpty: !floorsString || !floorsString.trim(),
                  floorsString,
                  floorsStringTrimmed: floorsString?.trim()
                }) // LOG: —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤ –ë–ï–ó —É–∫–∞–∑–∞–Ω–∏—è —ç—Ç–∞–∂–µ–π - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–∞–∂–∏ –ù–ï —É–∫–∞–∑–∞–Ω—ã
                console.log('üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤ –±–µ–∑ —ç—Ç–∞–∂–µ–π') // LOG: –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–µ–∑ —ç—Ç–∞–∂–µ–π

                // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å —Å floor_number = null
                const existingRecord = existingFloors?.find(floor => floor.floor_number === null)

                if (existingRecord) {
                  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å, —Å–æ—Ö—Ä–∞–Ω—è—è –Ω–µ–∏–∑–º–µ–Ω–Ω—ã–µ –ø–æ–ª—è
                  const updateData: any = {}

                  if (updates.quantityPd !== undefined) {
                    updateData.quantityPd = updates.quantityPd ? Number(updates.quantityPd) : null
                  }
                  if (updates.quantitySpec !== undefined) {
                    updateData.quantitySpec = updates.quantitySpec ? Number(updates.quantitySpec) : null
                  }
                  if (updates.quantityRd !== undefined) {
                    updateData.quantityRd = updates.quantityRd ? Number(updates.quantityRd) : null
                  }

                  console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å:', { id: existingRecord.id, updateData }) // LOG: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏

                  const { error: updateError } = await supabase
                    .from('chessboard_floor_mapping')
                    .update(updateData)
                    .eq('id', existingRecord.id)

                  if (updateError) {
                    console.error('üìä –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤:', updateError) // LOG: –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    throw updateError
                  }
                } else {
                  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                  const quantityMapping = {
                    chessboard_id: rowId,
                    floor_number: null, // –≠—Ç–∞–∂ –Ω–µ —É–∫–∞–∑–∞–Ω
                    quantityPd: updates.quantityPd !== undefined
                      ? (updates.quantityPd ? Number(updates.quantityPd) : null)
                      : null,
                    quantitySpec: updates.quantitySpec !== undefined
                      ? (updates.quantitySpec ? Number(updates.quantitySpec) : null)
                      : null,
                    quantityRd: updates.quantityRd !== undefined
                      ? (updates.quantityRd ? Number(updates.quantityRd) : null)
                      : null,
                  }

                  console.log('‚ûï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤:', quantityMapping) // LOG: —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏

                  const { error: insertError } = await supabase
                    .from('chessboard_floor_mapping')
                    .insert(quantityMapping)

                  if (insertError) {
                    console.error('üìä –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤:', insertError) // LOG: –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è
                    throw insertError
                  }
                }

                console.log('‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã') // LOG: —É—Å–ø–µ—Ö –æ–±—Ä–∞–±–æ—Ç–∫–∏
              } else if (hasExistingFloors && updates.floors !== undefined && (!floorsString || !floorsString.trim())) {
                // –ù–û–í–ê–Ø –°–ï–ö–¶–ò–Ø: –£–¥–∞–ª–µ–Ω–∏–µ —ç—Ç–∞–∂–µ–π - –ø–µ—Ä–µ—Ö–æ–¥ –æ—Ç —ç—Ç–∞–∂–µ–π –∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞–º –±–µ–∑ —ç—Ç–∞–∂–µ–π
                                
                // –°—É–º–º–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —ç—Ç–∞–∂–µ–π
                const totalQuantities = existingFloorsWithNumbers.reduce((totals, floor) => {
                  return {
                    quantityPd: (totals.quantityPd || 0) + (floor.quantityPd || 0),
                    quantitySpec: (totals.quantitySpec || 0) + (floor.quantitySpec || 0),
                    quantityRd: (totals.quantityRd || 0) + (floor.quantityRd || 0),
                  }
                }, { quantityPd: 0, quantitySpec: 0, quantityRd: 0 })

                // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏
                const { error: deleteError } = await supabase
                  .from('chessboard_floor_mapping')
                  .delete()
                  .eq('chessboard_id', rowId)

                if (deleteError) {
                                    throw deleteError
                }

                // –°–æ–∑–¥–∞–µ–º –æ–¥–Ω—É –∑–∞–ø–∏—Å—å —Å floor_number = null –∏ —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞–º–∏
                const nullFloorRecord = {
                  chessboard_id: rowId,
                  floor_number: null, // –≠—Ç–∞–∂–∏ —É–¥–∞–ª–µ–Ω—ã
                  quantityPd: totalQuantities.quantityPd || null,
                  quantitySpec: totalQuantities.quantitySpec || null,
                  quantityRd: totalQuantities.quantityRd || null,
                }

                const { error: insertError } = await supabase
                  .from('chessboard_floor_mapping')
                  .insert(nullFloorRecord)

                if (insertError) {
                                    throw insertError
                }

                              } else {
                                console.log('üè¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ chessboard_floor_mapping') // LOG: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
              }
            } catch (error) {
              console.error('üè¢ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç—Ç–∞–∂–µ–π:', error) // LOG: –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞
              throw error
            }
          }

          promises.push(updateFloorsPromise())
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º nomenclature mapping –¥–ª—è –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã
        if (updates.nomenclatureId !== undefined || updates.supplier !== undefined) {
          console.log('üîç –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã:', { nomenclatureId: updates.nomenclatureId, supplier: updates.supplier }) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

          // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Å–≤—è–∑—å
          promises.push(
            supabase.from('chessboard_nomenclature_mapping').delete().eq('chessboard_id', rowId)
          )

          // –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é —Å–≤—è–∑—å
          const nomenclatureId = updates.nomenclatureId !== undefined ? updates.nomenclatureId : null
          if (nomenclatureId) {
            promises.push(
              supabase.from('chessboard_nomenclature_mapping').insert({
                chessboard_id: rowId,
                nomenclature_id: nomenclatureId,
                supplier_name: updates.supplier || null
              })
            )
          }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º rates mapping –¥–ª—è –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç
        if (updates.rateId !== undefined || updates.workName !== undefined) {
          console.log('üí∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ü–µ–Ω–∫–∏:', { rateId: updates.rateId, workName: updates.workName }) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
          // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Å–≤—è–∑—å
          promises.push(
            supabase.from('chessboard_rates_mapping').delete().eq('chessboard_id', rowId)
          )
          // –ï—Å–ª–∏ –µ—Å—Ç—å rateId, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é —Å–≤—è–∑—å
          const rateId = updates.rateId !== undefined ? updates.rateId : null
          if (rateId) {
            promises.push(
              supabase.from('chessboard_rates_mapping').insert({
                chessboard_id: rowId,
                rate_id: rateId
              })
            )
          }
        }
      }

      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫ –≤ —Ä–µ–∂–∏–º–µ backup —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ–ª–Ω–∞—è –ª–æ–≥–∏–∫–∞)
      for (const [rowId, editedRowData] of Object.entries(editingRows)) {
        console.log('üîç saveChanges - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º backup —Å—Ç—Ä–æ–∫—É:', { rowId, editedRowData }) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É chessboard
        const chessboardUpdateData: any = {}

        if (editedRowData.color !== undefined) {
          chessboardUpdateData.color = editedRowData.color || null
        }
        if (editedRowData.unitId !== undefined) {
          chessboardUpdateData.unit_id = editedRowData.unitId || null
        }
        if (editedRowData.material !== undefined) {
          chessboardUpdateData.material = editedRowData.material || null
        }

        chessboardUpdateData.updated_at = new Date().toISOString()

        if (Object.keys(chessboardUpdateData).length > 1) {
          console.log('‚úÖ Backup: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã chessboard') // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
          promises.push(
            supabase.from('chessboard').update(chessboardUpdateData).eq('id', rowId)
          )
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º mapping —Ç–∞–±–ª–∏—Ü—É –¥–ª—è backup —Å—Ç—Ä–æ–∫–∏
        const mappingUpdateData: any = {}
        if (editedRowData.blockId !== undefined) mappingUpdateData.block_id = editedRowData.blockId || null
        if (editedRowData.costCategoryId !== undefined) {
          mappingUpdateData.cost_category_id = editedRowData.costCategoryId ? parseInt(editedRowData.costCategoryId) : null
        }
        if (editedRowData.costTypeId !== undefined) {
          mappingUpdateData.cost_type_id = editedRowData.costTypeId ? parseInt(editedRowData.costTypeId) : null
        }
        if (editedRowData.locationId !== undefined) {
          mappingUpdateData.location_id = editedRowData.locationId ? parseInt(editedRowData.locationId) : null
        }

        if (Object.keys(mappingUpdateData).length > 0) {
          mappingUpdateData.updated_at = new Date().toISOString()
          console.log('üìä Backup: –¥–∞–Ω–Ω—ã–µ –¥–ª—è mapping —Ç–∞–±–ª–∏—Ü—ã:', { rowId, mappingUpdateData }) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

          const mappingPromise = supabase
            .from('chessboard_mapping')
            .select('id')
            .eq('chessboard_id', rowId)
            .maybeSingle()
            .then(async ({ data: existingMapping, error: selectError }) => {
              if (selectError) {
                console.error('‚ùå Backup: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ mapping:', selectError) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                throw selectError
              }

              if (existingMapping) {
                console.log('üîÑ Backup: –æ–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é mapping –∑–∞–ø–∏—Å—å:', existingMapping.id) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                const { error: updateError } = await supabase
                  .from('chessboard_mapping')
                  .update(mappingUpdateData)
                  .eq('chessboard_id', rowId)

                if (updateError) throw updateError
              } else {
                console.log('‚ûï Backup: —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é mapping –∑–∞–ø–∏—Å—å –¥–ª—è:', rowId) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                const { error: insertError } = await supabase
                  .from('chessboard_mapping')
                  .insert({ ...mappingUpdateData, chessboard_id: rowId })

                if (insertError) throw insertError
              }
            })

          promises.push(mappingPromise)
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º nomenclature mapping –¥–ª—è backup —Å—Ç—Ä–æ–∫–∏
        if (editedRowData.nomenclatureId !== undefined || editedRowData.supplier !== undefined) {
          console.log('üîç Backup: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã:', { nomenclatureId: editedRowData.nomenclatureId, supplier: editedRowData.supplier }) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

          promises.push(
            supabase.from('chessboard_nomenclature_mapping').delete().eq('chessboard_id', rowId)
          )

          const nomenclatureId = editedRowData.nomenclatureId
          if (nomenclatureId) {
            promises.push(
              supabase.from('chessboard_nomenclature_mapping').insert({
                chessboard_id: rowId,
                nomenclature_id: nomenclatureId,
                supplier_name: editedRowData.supplier || null
              })
            )
          }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º rates mapping –¥–ª—è backup —Å—Ç—Ä–æ–∫–∏
        if (editedRowData.rateId !== undefined || editedRowData.workName !== undefined) {
          console.log('üí∞ Backup: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ü–µ–Ω–∫–∏:', { rateId: editedRowData.rateId, workName: editedRowData.workName }) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
          promises.push(
            supabase.from('chessboard_rates_mapping').delete().eq('chessboard_id', rowId)
          )
          const rateId = editedRowData.rateId
          if (rateId) {
            promises.push(
              supabase.from('chessboard_rates_mapping').insert({
                chessboard_id: rowId,
                rate_id: rateId
              })
            )
          }
        }

        console.log('üíæ Backup —Å—Ç—Ä–æ–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞:', rowId) // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
      }

      const results = await Promise.all(promises)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ –æ—à–∏–±–∫–∏
      results.forEach((result, index) => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ result —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–¥ –¥–æ—Å—Ç—É–ø–æ–º –∫ —Å–≤–æ–π—Å—Ç–≤–∞–º
        if (result && result.error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ promise ${index}:`, result.error) // LOG: –æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
        } else if (result) {
          console.log(`‚úÖ Promise ${index} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ`) // LOG: —É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        } else {
          console.warn(`‚ö†Ô∏è  Promise ${index} –≤–µ—Ä–Ω—É–ª undefined`) // LOG: –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        }
      })

      // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –¥–ª—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
      console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –¥–ª—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö') // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

      // Invalidate –≤—Å–µ—Ö queries, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 'chessboard-'
      await queryClient.invalidateQueries({
        predicate: (query) => {
          const queryKey = query.queryKey
          return (
            Array.isArray(queryKey) &&
            typeof queryKey[0] === 'string' &&
            queryKey[0].startsWith('chessboard-')
          )
        },
      })

      console.log('‚úÖ –í—Å–µ chessboard –∫—ç—à–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã, –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∞–Ω—ã') // LOG: –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setNewRows([])
      setEditedRows(new Map())
      setEditingRows({})
      setMode('view')

      message.success('–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã')
    } catch (error) {
      console.error('Error saving changes:', error)
      message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π')
    }
  }, [newRows, editedRows, editingRows, queryClient, setMode])

  // –û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
  const cancelChanges = useCallback(() => {
    setNewRows([])
    setEditedRows(new Map())
    setEditingRows({})
    setMode('view')
  }, [setMode])

  // –£–¥–∞–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ (–∫–∞—Å–∫–∞–¥–Ω–æ–µ)
  const deleteSingleRow = useCallback(async (rowId: string) => {
    try {
      const { error } = await supabase
        .from('chessboard')
        .delete()
        .eq('id', rowId)

      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏:', error) // LOG
        message.error(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏: ${error.message}`)
        return false
      }

      message.success('–°—Ç—Ä–æ–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞')
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
      if (refetch) {
        await refetch()
      } else {
        // Fallback: invalidate –≤—Å–µ—Ö queries, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 'chessboard-'
        await queryClient.invalidateQueries({ queryKey: ['chessboard-'] })
      }
      return true
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç—Ä–æ–∫–∏:', error) // LOG
      message.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç—Ä–æ–∫–∏')
      return false
    }
  }, [refetch, message, queryClient])

  // –£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
  const deleteSelectedRows = useCallback(async () => {
    if (tableMode.selectedRowKeys.length === 0) {
      message.warning('–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è')
      return
    }

    try {
      const { error } = await supabase
        .from('chessboard')
        .delete()
        .in('id', tableMode.selectedRowKeys as string[])

      if (error) throw error

      // Invalidate –≤—Å–µ—Ö queries, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 'chessboard-'
      await queryClient.invalidateQueries({
        predicate: (query) => {
          const queryKey = query.queryKey
          return (
            Array.isArray(queryKey) &&
            typeof queryKey[0] === 'string' &&
            queryKey[0].startsWith('chessboard-')
          )
        },
      })
      setMode('view')
      message.success(`–£–¥–∞–ª–µ–Ω–æ —Å—Ç—Ä–æ–∫: ${tableMode.selectedRowKeys.length}`)
    } catch (error) {
      console.error('Error deleting rows:', error)
      message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç—Ä–æ–∫')
    }
  }, [tableMode.selectedRowKeys, queryClient, setMode])

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Å —É—á–µ—Ç–æ–º –Ω–æ–≤—ã—Ö, –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫ –∏ backup —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  const getDisplayData = useCallback((originalData: RowData[]) => {
    console.log('üîÑ getDisplayData –≤—ã–∑–≤–∞–Ω–∞:', { originalDataLength: originalData.length, newRowsLength: newRows.length }) // LOG: –≤—ã–∑–æ–≤ getDisplayData

    const dataWithEdits = originalData.map(row => {
      // –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –≤ —Ä–µ–∂–∏–º–µ backup —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë –¥–∞–Ω–Ω—ã–µ
      if (editingRows[row.id]) {
        return editingRows[row.id]
      }

      // –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω–æ–µ –æ–¥–∏–Ω–æ—á–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
      const edits = editedRows.get(row.id)
      if (edits) {
        return {
          ...row,
          ...edits,
          isEditing: tableMode.mode === 'edit' || tableMode.mode === 'add' // LOG: —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º isEditing —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–∞—Ö —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        }
      }
      return row
    })

    // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–æ–≤—ã—Ö —Å—Ç—Ä–æ–∫, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    if (newRows.length === 0) {
      console.log('‚úÖ getDisplayData —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–±–µ–∑ –Ω–æ–≤—ã—Ö —Å—Ç—Ä–æ–∫):', { resultLength: dataWithEdits.length }) // LOG
      return dataWithEdits
    }

    console.log('üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å—Ç—Ä–æ–∫:', {
      total: newRows.length,
      first: newRows.filter(row => row._insertPosition === 'first').length,
      after: newRows.filter(row => row._insertPosition === 'after').length,
      newRowsDetail: newRows.map(row => ({
        id: row.id,
        position: row._insertPosition,
        afterIndex: row._afterRowIndex
      }))
    }) // LOG: –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–æ–≤—ã—Ö —Å—Ç—Ä–æ–∫–∞—Ö

    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–π –º–∞—Å—Å–∏–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    let result = [...dataWithEdits] // –ù–∞—á–∏–Ω–∞–µ–º —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö

    // –†–∞–∑–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ —Ç–∏–ø—É –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    const firstRows = newRows.filter(row => row._insertPosition === 'first')
    const afterRows = newRows.filter(row => row._insertPosition === 'after')

    console.log('üìã –†–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –Ω–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏:', {
      firstRows: firstRows.map(r => ({ id: r.id, position: r._insertPosition })),
      afterRows: afterRows.map(r => ({ id: r.id, position: r._insertPosition, afterIndex: r._afterRowIndex }))
    }) // LOG: —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫

    // –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ 'first' –≤ –Ω–∞—á–∞–ª–æ
    for (const newRow of firstRows) {
      result.unshift({ ...newRow, isEditing: tableMode.mode === 'add' }) // LOG: –æ–±–Ω–æ–≤–ª—è–µ–º isEditing –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
      console.log(`‚ûï –í—Å—Ç–∞–≤–ª–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –≤ –Ω–∞—á–∞–ª–æ: ${newRow.id}`) // LOG: –≤—Å—Ç–∞–≤–∫–∞ –≤ –Ω–∞—á–∞–ª–æ
    }

    // –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ 'after' - –≤–∞–∂–Ω–æ: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –∏–Ω–¥–µ–∫—Å–æ–≤,
    // —á—Ç–æ–±—ã –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –Ω–µ —Å–¥–≤–∏–≥–∞–ª–∏—Å—å –ø–æ–∑–∏—Ü–∏–∏ —Å–ª–µ–¥—É—é—â–∏—Ö —Å—Ç—Ä–æ–∫
    const sortedAfterRows = afterRows.sort((a, b) => {
      const aIndex = a._afterRowIndex ?? -1
      const bIndex = b._afterRowIndex ?? -1
      return bIndex - aIndex // –û–ë–†–ê–¢–ù–´–ô –ø–æ—Ä—è–¥–æ–∫ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –≤—Å—Ç–∞–≤–∫–∏
    })

    console.log('üìã –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ after —Å—Ç—Ä–æ–∫–∏ (–æ–±—Ä–∞—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫):', sortedAfterRows.map(row => ({
      id: row.id,
      afterIndex: row._afterRowIndex
    }))) // LOG: –ø–æ—Ä—è–¥–æ–∫ –≤—Å—Ç–∞–≤–∫–∏

    // –í—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ 'after'
    for (const newRow of sortedAfterRows) {
      if (typeof newRow._afterRowIndex === 'number') {
        const originalRowIndex = newRow._afterRowIndex

        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è -1 (–≤—Å—Ç–∞–≤–∫–∞ –≤ —Å–∞–º–æ–µ –Ω–∞—á–∞–ª–æ)
        const insertPosition = originalRowIndex === -1
          ? 1 // –í—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π firstRow, –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–ª–∏ –≤ —Å–∞–º–æ–µ –Ω–∞—á–∞–ª–æ
          : originalRowIndex + firstRows.length + 1

        console.log(`üéØ –í—Å—Ç–∞–≤–∫–∞ —Å—Ç—Ä–æ–∫–∏ ${newRow.id}: originalIndex=${originalRowIndex}, firstRowsCount=${firstRows.length}, targetPosition=${insertPosition}`) // LOG: —Ä–∞—Å—á–µ—Ç –ø–æ–∑–∏—Ü–∏–∏

        if (insertPosition <= result.length) {
          result.splice(insertPosition, 0, { ...newRow, isEditing: tableMode.mode === 'add' }) // LOG: –æ–±–Ω–æ–≤–ª—è–µ–º isEditing –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
          console.log(`‚ûï –í—Å—Ç–∞–≤–ª–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏—é ${insertPosition}: ${newRow.id}`) // LOG: —É—Å–ø–µ—à–Ω–∞—è –≤—Å—Ç–∞–≤–∫–∞
        } else {
          // –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü
          result.push({ ...newRow, isEditing: tableMode.mode === 'add' }) // LOG: –æ–±–Ω–æ–≤–ª—è–µ–º isEditing –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
          console.log(`‚ö†Ô∏è –ü–æ–∑–∏—Ü–∏—è ${insertPosition} –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –º–∞—Å—Å–∏–≤–∞ (${result.length}), –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–æ–Ω–µ—Ü: ${newRow.id}`) // LOG: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ–Ω–µ—Ü
        }
      } else {
        // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü
        result.push({ ...newRow, isEditing: tableMode.mode === 'add' }) // LOG: –æ–±–Ω–æ–≤–ª—è–µ–º isEditing –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
        console.log(`‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –≤ –∫–æ–Ω–µ—Ü (–Ω–µ—Ç afterRowIndex): ${newRow.id}`) // LOG: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      }
    }

    console.log('‚úÖ getDisplayData —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', {
      originalLength: originalData.length,
      resultLength: result.length,
      difference: result.length - originalData.length
    }) // LOG: –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç

    return result
  }, [editedRows, newRows, editingRows])

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
  const hasUnsavedChanges = useMemo(() => {
    return newRows.length > 0 || editedRows.size > 0 || Object.keys(editingRows).length > 0
  }, [newRows.length, editedRows.size, editingRows])

  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    tableMode,
    newRows,
    editedRows,
    editingRows,
    hasUnsavedChanges,

    // –î–µ–π—Å—Ç–≤–∏—è —Å —Ä–µ–∂–∏–º–∞–º–∏
    setMode,
    setSelectedRowKeys,

    // –û–ø–µ—Ä–∞—Ü–∏–∏ —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏ (–æ–¥–∏–Ω–æ—á–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)
    addNewRow,
    removeNewRow,
    copyRow,
    updateNewRow,
    startEditing,
    cancelEditing,
    updateEditedRow,
    updateRowColor,

    // –û–ø–µ—Ä–∞—Ü–∏–∏ backup –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    startEditBackup,
    stopEditBackup,
    updateEditingRow,

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ/–æ—Ç–º–µ–Ω–∞
    saveChanges,
    cancelChanges,
    deleteSelectedRows,
    deleteSingleRow,

    // –£—Ç–∏–ª–∏—Ç—ã
    getDisplayData,
  }
}

import { useMemo, useState, useRef } from 'react'
import { useQuery } from '@tanstack/react-query'
import { supabase } from '@/lib/supabase'
import type { AppliedFilters, ViewRow, DbRow, RowData } from '../types'

interface UseChessboardDataProps {
  appliedFilters: AppliedFilters
  enabled?: boolean
}

// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–µ–Ω –ª–∏ INNER JOIN –¥–ª—è chessboard_mapping
function needsInnerJoinForMapping(appliedFilters: AppliedFilters): boolean {
  return !!(
    appliedFilters.block_ids?.length ||
    appliedFilters.cost_category_ids?.length ||
    appliedFilters.detail_cost_category_ids?.length
  )
}

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π SELECT –∑–∞–ø—Ä–æ—Å —Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤
function buildSelectQuery(appliedFilters: AppliedFilters): string {
  const useInnerJoin = needsInnerJoinForMapping(appliedFilters)
  const joinType = useInnerJoin ? 'inner' : 'left'


  return `
    id,
    material,
    color,
    created_at,
    updated_at,
    unit_id,

    materials!chessboard_material_fkey(name),
    units!chessboard_unit_id_fkey(name),

    chessboard_mapping!${joinType}(
      cost_category_id,
      cost_type_id,
      location_id,
      block_id,
      cost_categories!chessboard_mapping_cost_category_id_fkey(name, number),
      detail_cost_categories!chessboard_mapping_cost_type_id_fkey(name),
      location!chessboard_mapping_location_id_fkey(name),
      blocks!chessboard_mapping_block_id_fkey(name)
    ),

    chessboard_nomenclature_mapping!left(
      nomenclature_id,
      supplier_name,
      nomenclature!chessboard_nomenclature_mapping_nomenclature_id_fkey(name)
    )
  `
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
function applyServerSideFilters(query: any, appliedFilters: AppliedFilters) {
  // –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∫–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è
  const filtersToApply = []

  if (appliedFilters.block_ids?.length) {
    if (appliedFilters.block_ids.length > 100) { // LOG: –∑–∞—â–∏—Ç–∞ –æ—Ç URL overflow –¥–ª—è –±–ª–æ–∫–æ–≤
      console.warn(`‚ö†Ô∏è Block filter: ${appliedFilters.block_ids.length} IDs > 100, consider pagination`) // LOG
    }
    query = query.in('chessboard_mapping.block_id', appliedFilters.block_ids)
    filtersToApply.push(`blocks: ${appliedFilters.block_ids.length}`)
  }

  if (appliedFilters.cost_category_ids?.length) {
    if (appliedFilters.cost_category_ids.length > 100) { // LOG: –∑–∞—â–∏—Ç–∞ –æ—Ç URL overflow –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞—Ç—Ä–∞—Ç
      console.warn(`‚ö†Ô∏è Cost category filter: ${appliedFilters.cost_category_ids.length} IDs > 100, consider pagination`) // LOG
    }
    query = query.in('chessboard_mapping.cost_category_id', appliedFilters.cost_category_ids)
    filtersToApply.push(`cost_categories: ${appliedFilters.cost_category_ids.length}`)
  }

  if (appliedFilters.detail_cost_category_ids?.length) {
    if (appliedFilters.detail_cost_category_ids.length > 100) { // LOG: –∑–∞—â–∏—Ç–∞ –æ—Ç URL overflow –¥–ª—è –≤–∏–¥–æ–≤ –∑–∞—Ç—Ä–∞—Ç
      console.warn(`‚ö†Ô∏è Detail cost category filter: ${appliedFilters.detail_cost_category_ids.length} IDs > 100, consider pagination`) // LOG
    }
    query = query.in('chessboard_mapping.cost_type_id', appliedFilters.detail_cost_category_ids)
    filtersToApply.push(`detail_categories: ${appliedFilters.detail_cost_category_ids.length}`)
  }

  if (appliedFilters.material_search) {
    query = query.ilike('materials.name', `%${appliedFilters.material_search}%`)
    filtersToApply.push(`material_search: "${appliedFilters.material_search}"`)
  }

  if (filtersToApply.length > 0) {
  }

  return query
}

export const useChessboardData = ({ appliedFilters, enabled = true }: UseChessboardDataProps) => {
  // PERFORMANCE MONITORING: –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ä–µ–Ω–¥–µ—Ä–æ–≤ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞
  const renderCountRef = useRef(0)
  renderCountRef.current += 1

  // LOG: –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã—Ö —Ä–µ–Ω–¥–µ—Ä–∞—Ö
  if (renderCountRef.current > 10) {
    console.warn(`‚ö†Ô∏è useChessboardData render #${renderCountRef.current} - —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–æ–≤!`) // LOG
  }

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ batch processing
  const [filteredRawData, setFilteredRawData] = useState<any[] | null>(null)

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°—Ç–∞–±–∏–ª–∏–∑–∏—Ä—É–µ–º queryKey –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
  const stableQueryKey = useMemo(() => {
    // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤—ã —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
    const stableBlockIds = appliedFilters.block_ids ? [...appliedFilters.block_ids].sort().join(',') : 'no-blocks'
    const stableCostCategoryIds = appliedFilters.cost_category_ids ? [...appliedFilters.cost_category_ids].sort().join(',') : 'no-cost-categories'
    const stableDetailCategoryIds = appliedFilters.detail_cost_category_ids ? [...appliedFilters.detail_cost_category_ids].sort().join(',') : 'no-detail-categories'
    const stableDocSectionIds = appliedFilters.documentation_section_ids ? [...appliedFilters.documentation_section_ids].sort().join(',') : 'no-doc-sections'
    const stableDocCodeIds = appliedFilters.documentation_code_ids ? [...appliedFilters.documentation_code_ids].sort().join(',') : 'no-doc-codes'

    const newQueryKey = [
      'chessboard-data',
      appliedFilters.project_id || 'no-project',
      stableBlockIds,
      stableCostCategoryIds,
      stableDetailCategoryIds,
      stableDocSectionIds,
      stableDocCodeIds,
      appliedFilters.material_search || 'no-search',
    ]

    // LOG: QueryKey —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤—ã—Ö 3 —Ä–µ–Ω–¥–µ—Ä–∞—Ö –∏–ª–∏ –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö (> 10)
    if (renderCountRef.current <= 3 || renderCountRef.current > 10) {
      console.log(`üîë QueryKey generated for render #${renderCountRef.current}:`, newQueryKey) // LOG
    }

    return newQueryKey
  }, [
    appliedFilters.project_id,
    // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º JSON.stringify –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –º–∞—Å—Å–∏–≤–æ–≤
    JSON.stringify(appliedFilters.block_ids?.slice().sort() || []),
    JSON.stringify(appliedFilters.cost_category_ids?.slice().sort() || []),
    JSON.stringify(appliedFilters.detail_cost_category_ids?.slice().sort() || []),
    JSON.stringify(appliedFilters.documentation_section_ids?.slice().sort() || []),
    JSON.stringify(appliedFilters.documentation_code_ids?.slice().sort() || []),
    appliedFilters.material_search,
  ])

  // –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö —à–∞—Ö–º–∞—Ç–∫–∏
  const {
    data: rawData,
    isLoading,
    error,
    refetch,
  } = useQuery({
    queryKey: stableQueryKey,
    queryFn: async () => {
      const queryStartTime = performance.now() // LOG: –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞

      if (!appliedFilters.project_id) {
        return []
      }

      const startTime = performance.now() // LOG: –∑–∞–º–µ—Ä –≤—Ä–µ–º–µ–Ω–∏

      // –°—Ç—Ä–æ–∏–º –∑–∞–ø—Ä–æ—Å —Å —Å–µ—Ä–≤–µ—Ä–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      let query = supabase
        .from('chessboard')
        .select(buildSelectQuery(appliedFilters))
        .eq('project_id', appliedFilters.project_id)

      // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      query = applyServerSideFilters(query, appliedFilters)

      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ —Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥–∑–∞–ø—Ä–æ—Å–∞ –∏–∑-–∑–∞ —Å–ª–æ–∂–Ω–æ–π —Å–≤—è–∑–∏
      if (
        appliedFilters.documentation_section_ids?.length ||
        appliedFilters.documentation_code_ids?.length
      ) {
        console.log('üìÑ Starting documentation filtering with:', {
          section_ids: appliedFilters.documentation_section_ids,
          code_ids: appliedFilters.documentation_code_ids
        }) // LOG: –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏

        // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å INNER JOIN –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö chessboard –∑–∞–ø–∏—Å–µ–π

        let docQuery = supabase
          .from('chessboard_documentation_mapping')
          .select(`
            chessboard_id,
            chessboard!inner(project_id),
            documentation_versions!inner(
              documentation_id,
              documentations!inner(
                id, code, tag_id,
                documentation_tags!inner(id, name)
              )
            )
          `)
          .eq('chessboard.project_id', appliedFilters.project_id) // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø—Ä–æ–µ–∫—Ç—É –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        if (appliedFilters.documentation_code_ids?.length) {
          if (appliedFilters.documentation_code_ids.length > 100) { // LOG: –∑–∞—â–∏—Ç–∞ –æ—Ç URL overflow –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            console.warn(`‚ö†Ô∏è Documentation filter: ${appliedFilters.documentation_code_ids.length} IDs > 100, consider pagination`) // LOG
          }
          docQuery = docQuery.in('documentation_versions.documentation_id', appliedFilters.documentation_code_ids)
        }

        if (appliedFilters.documentation_section_ids?.length) {
          if (appliedFilters.documentation_section_ids.length > 100) { // LOG: –∑–∞—â–∏—Ç–∞ –æ—Ç URL overflow –¥–ª—è —Ä–∞–∑–¥–µ–ª–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
            console.warn(`‚ö†Ô∏è Documentation section filter: ${appliedFilters.documentation_section_ids.length} IDs > 100, consider pagination`) // LOG
          }
          docQuery = docQuery.in('documentation_versions.documentations.tag_id', appliedFilters.documentation_section_ids)
        }

        // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–¥–∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è chessboard_id
        const { data: docIds, error: docError } = await docQuery

        if (docError) {
          console.error('‚ùå Error filtering by documentation:', docError)
        } else if (docIds && docIds.length > 0) {

          // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: –ø–æ–∫–∞–∑–∞—Ç—å —Ä–∞–∑–¥–µ–ª—ã –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
          const sections = new Set()
          docIds.forEach(item => {
            const tagName = item.documentation_versions?.documentations?.documentation_tags?.name
            if (tagName) sections.add(tagName)
          })

          // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã chessboard_id (–æ–¥–Ω–∞ –∑–∞–ø–∏—Å—å –º–æ–∂–µ—Ç –∏–º–µ—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–µ—Ä—Å–∏–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤)
          const chessboardIds = [...new Set(docIds.map((d) => d.chessboard_id))]

          // –ï—Å–ª–∏ ID —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞—Ç—á–∏–Ω–≥
          if (chessboardIds.length > 50) {
            // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –±–∞—Ç—á–∞–º–∏ –ø–æ 50 ID –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è URL
            const batchSize = 50
            let allResults: any[] = []
            const totalBatches = Math.ceil(chessboardIds.length / batchSize)
            // LOG: –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –±–æ–ª—å—à–∏—Ö –±–∞—Ç—á–µ–π
            if (totalBatches > 10) {
              console.warn(`‚ö†Ô∏è Large batch processing: ${totalBatches} batches for ${chessboardIds.length} IDs`) // LOG
            }

            for (let i = 0; i < chessboardIds.length; i += batchSize) {
              const batch = chessboardIds.slice(i, i + batchSize)
              const batchNumber = Math.floor(i/batchSize) + 1

              const batchStartTime = performance.now() // LOG: –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –±–∞—Ç—á–∞
              let batchQuery = supabase
                .from('chessboard')
                .select(buildSelectQuery(appliedFilters))
                .eq('project_id', appliedFilters.project_id)
                .in('id', batch)

              // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –∫ batch –∑–∞–ø—Ä–æ—Å—É
              batchQuery = applyServerSideFilters(batchQuery, appliedFilters)

              batchQuery = batchQuery
                .limit(1000)
                .order('created_at', { ascending: false })
                .order('id', { ascending: false })

              const { data: batchData, error: batchError } = await batchQuery

              const batchEndTime = performance.now() // LOG: –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –±–∞—Ç—á–∞
              const batchDuration = batchEndTime - batchStartTime // LOG: –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–∞—Ç—á–∞

              // LOG: –ª–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –º–µ–¥–ª–µ–Ω–Ω—ã–µ –±–∞—Ç—á–∏
              if (batchDuration > 1000) {
                console.warn(`‚è±Ô∏è Slow batch ${batchNumber}: ${Math.round(batchDuration)}ms, ${batchData?.length || 0} records`) // LOG
              }

              if (batchError) {
                console.error('‚ùå Error in batch query:', batchError) // LOG
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤—è–∑–∞–Ω–∞ –ª–∏ –æ—à–∏–±–∫–∞ —Å –¥–ª–∏–Ω–æ–π URL
                if (batchError.message?.includes('URI') || batchError.message?.includes('414')) {
                  console.warn('‚ö†Ô∏è URL length error detected, consider reducing batch size further') // LOG
                }
                continue
              }

              if (batchData) {
                allResults = [...allResults, ...batchData]
              }
            }

            setFilteredRawData(allResults as DbRow[])
            return allResults as DbRow[]
          } else {
            // –ï—Å–ª–∏ ID –Ω–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å
            query = query.in('id', chessboardIds)

            // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –∫ –º–∞–ª–æ–º—É batch –∑–∞–ø—Ä–æ—Å—É
            query = applyServerSideFilters(query, appliedFilters)

            query = query
              .limit(1000)
              .order('created_at', { ascending: false })
              .order('id', { ascending: false })

            const { data, error } = await query

            if (error) {
              console.error('‚ùå Chessboard query failed:', error) // LOG: –æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
              throw error
            }

            const endTime = performance.now() // LOG: –∑–∞–º–µ—Ä –≤—Ä–µ–º–µ–Ω–∏
            const executionTime = Math.round(endTime - startTime)

            setFilteredRawData(data as DbRow[])
            return data as DbRow[]
          }
        } else {
          // –ï—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
          return []
        }
      } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏, –≤—ã–ø–æ–ª–Ω—è–µ–º –æ–±—ã—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        query = query
          .limit(1000) // –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: —É–≤–µ–ª–∏—á–µ–Ω —Å 500 –¥–æ 1000 –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å –±–æ–ª—å—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
          .order('created_at', { ascending: false })
          .order('id', { ascending: false }) // –°—Ç–∞–±–∏–ª—å–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞

        const { data, error } = await query

        if (error) {
          console.error('‚ùå Chessboard query failed:', error) // LOG: –æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
          throw error
        }

        const endTime = performance.now() // LOG: –∑–∞–º–µ—Ä –≤—Ä–µ–º–µ–Ω–∏
        const executionTime = Math.round(endTime - queryStartTime)

        // LOG: –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
        console.log(`‚ö° Chessboard table loaded in ${executionTime}ms, records: ${data?.length || 0}`) // LOG: –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã

        // LOG: –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö
        if (executionTime > 3000) {
          console.warn(`‚ö†Ô∏è Slow query: ${executionTime}ms for ${data?.length || 0} records`) // LOG
        }
        setFilteredRawData(null)
        return data as DbRow[]
      }
    },
    enabled: enabled && !!appliedFilters.project_id,
  })

  // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–±–∏—Ä–∞–µ–º —Ü–∏–∫–ª–∏—á–µ—Å–∫—É—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å - –ù–ï –∑–∞–≤–∏—Å–∏–º –æ—Ç rawData –∏–ª–∏ filteredRawData
  const stableDocQueryKey = useMemo(
    () => [
      'chessboard-documentation',
      appliedFilters.project_id || 'no-project',
      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ appliedFilters –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏, –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–∞–Ω–Ω—ã—Ö
      appliedFilters.documentation_code_ids ? [...appliedFilters.documentation_code_ids].sort().join(',') : 'no-doc-codes',
      appliedFilters.documentation_section_ids ? [...appliedFilters.documentation_section_ids].sort().join(',') : 'no-doc-sections',
    ],
    [
      appliedFilters.project_id,
      // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º JSON.stringify –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
      JSON.stringify(appliedFilters.documentation_code_ids?.slice().sort() || []),
      JSON.stringify(appliedFilters.documentation_section_ids?.slice().sort() || [])
    ],
  )

  // –û—Ç–¥–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
  const { data: documentationData } = useQuery({
    queryKey: stableDocQueryKey,
    queryFn: async () => {
      // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö
      const dataSource = filteredRawData || rawData
      if (!appliedFilters.project_id || !dataSource?.length) {
        return []
      }

      const chessboardIds = dataSource.map((row) => row.id)

      // –ö–†–ò–¢–ò–ß–ù–û: –ó–∞—â–∏—Ç–∞ –æ—Ç URL overflow —á–µ—Ä–µ–∑ –±–∞—Ç—á–∏–Ω–≥
      if (chessboardIds.length > 200) {
        console.warn(`‚ö†Ô∏è Documentation query: ${chessboardIds.length} IDs > 200, using batching`) // LOG: –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –±–∞—Ç—á–∏–Ω–≥–µ
      }

      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–∞—Ç—á–∏–Ω–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è URL overflow
      const BATCH_SIZE = 200
      const allDocumentationData: any[] = []

      for (let i = 0; i < chessboardIds.length; i += BATCH_SIZE) {
        const batch = chessboardIds.slice(i, i + BATCH_SIZE)

        const { data, error } = await supabase
          .from('chessboard_documentation_mapping')
          .select(
            `
            chessboard_id,
            version_id,
            documentation_versions!fk_chessboard_documentation_mapping_version(
              version_number,
              documentation_id,
              documentations!documentation_versions_documentation_id_fkey(
                code,
                project_name,
                tag_id,
                documentation_tags!documentation_codes_tag_id_fkey(tag_number, name)
              )
            )
          `,
          )
          .in('chessboard_id', batch)

        if (error) {
          console.error(`‚ùå Documentation batch ${Math.floor(i/BATCH_SIZE) + 1} failed:`, error) // LOG: –æ—à–∏–±–∫–∞ –±–∞—Ç—á–∞
          continue // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –¥—Ä—É–≥–∏–º–∏ –±–∞—Ç—á–∞–º–∏
        }

        if (data?.length) {
          allDocumentationData.push(...data)
        }
      }
      return allDocumentationData
    },
    enabled: enabled && !!appliedFilters.project_id && !!(filteredRawData || rawData),
  })

  // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°—Ç–∞–±–∏–ª–∏–∑–∏—Ä—É–µ–º queryKey –¥–ª—è —ç—Ç–∞–∂–µ–π –ë–ï–ó —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
  const stableFloorsQueryKey = useMemo(
    () => [
      'chessboard-floors',
      appliedFilters.project_id || 'no-project',
      // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–µ –∑–∞–≤–∏—Å–∏–º –æ—Ç rawData –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
      stableQueryKey.join('|') // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –∫–ª—é—á –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    ],
    [appliedFilters.project_id, stableQueryKey.join('|')], // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —É–±–∏—Ä–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç rawData
  )

  // –û—Ç–¥–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –¥–∞–Ω–Ω—ã—Ö —ç—Ç–∞–∂–µ–π —Å –±–∞—Ç—á–∏–Ω–≥–æ–º
  const { data: floorsData } = useQuery({
    queryKey: stableFloorsQueryKey,
    queryFn: async () => {
      if (!appliedFilters.project_id || !rawData?.length) {
        return []
      }

      const chessboardIds = rawData.map((row) => row.id)
      const batchSize = 200 // –ë–∞—Ç—á–∏–Ω–≥ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è URL
      let allFloorsData: any[] = []

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —ç—Ç–∞–∂–µ–π –±–∞—Ç—á–∞–º–∏
      for (let i = 0; i < chessboardIds.length; i += batchSize) {
        const batch = chessboardIds.slice(i, i + batchSize)
        const { data: batchData, error: floorsError } = await supabase
          .from('chessboard_floor_mapping')
          .select(
            'chessboard_id, floor_number, location_id, "quantityPd", "quantitySpec", "quantityRd"',
          )
          .in('chessboard_id', batch)
          .order('floor_number', { ascending: true })

        if (floorsError) {
          console.error('Error loading floors data batch:', floorsError)
          continue
        }

        if (batchData) {
          allFloorsData = [...allFloorsData, ...batchData]
        }
      }

      return allFloorsData
    },
    enabled: enabled && !!appliedFilters.project_id,
  })

  // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°—Ç–∞–±–∏–ª–∏–∑–∏—Ä—É–µ–º queryKey –¥–ª—è —Ä–∞—Å—Ü–µ–Ω–æ–∫ –ë–ï–ó —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
  const stableRatesQueryKey = useMemo(
    () => [
      'chessboard-rates',
      appliedFilters.project_id || 'no-project',
      // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–µ –∑–∞–≤–∏—Å–∏–º –æ—Ç rawData –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
      stableQueryKey.join('|') // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –∫–ª—é—á –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    ],
    [appliedFilters.project_id, stableQueryKey.join('|')], // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —É–±–∏—Ä–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç rawData
  )

  // –û—Ç–¥–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Ü–µ–Ω–æ–∫
  const { data: ratesData } = useQuery({
    queryKey: stableRatesQueryKey,
    queryFn: async () => {
      if (!appliedFilters.project_id || !rawData?.length) {
        return []
      }

      const chessboardIds = rawData.map((row) => row.id)
      const batchSize = 200 // –ë–∞—Ç—á–∏–Ω–≥ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è URL
      let allRatesData: any[] = []

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—Ü–µ–Ω–æ–∫ –±–∞—Ç—á–∞–º–∏
      for (let i = 0; i < chessboardIds.length; i += batchSize) {
        const batch = chessboardIds.slice(i, i + batchSize)
        const { data: batchData, error: ratesError } = await supabase
          .from('chessboard_rates_mapping')
          .select(
            `
            chessboard_id,
            rates!chessboard_rates_mapping_rate_id_fkey(
              id,
              work_name,
              work_set,
              base_rate,
              unit:units(name)
            )
          `,
          )
          .in('chessboard_id', batch)

        if (ratesError) {
          console.error('Error loading rates batch:', ratesError)
          continue
        }

        if (batchData) {
          allRatesData.push(...batchData)
        }
      }

      const data = allRatesData
      const error = null

      if (error) {
        console.error('Error loading rates data:', error)
        return []
      }

      return data || []
    },
    enabled: enabled && !!appliedFilters.project_id,
  })

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ useMemo –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
  const transformedData = useMemo((): RowData[] => {
    // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö
    const dataToProcess = filteredRawData || rawData
    if (!dataToProcess) return []

    // LOG: –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤
    if (dataToProcess.length > 1000) {
      console.warn(`‚ö†Ô∏è Processing large dataset: ${dataToProcess.length} rows`) // LOG: –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    }

    // –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: —Å–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è O(1) –ø–æ–∏—Å–∫–∞ –≤–º–µ—Å—Ç–æ O(n) –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏
    const docMappingIndex = new Map()
    documentationData?.forEach((doc) => {
      docMappingIndex.set(doc.chessboard_id, doc)
    })

    const floorsByChessboardId = new Map()
    floorsData?.forEach((fd) => {
      if (!floorsByChessboardId.has(fd.chessboard_id)) {
        floorsByChessboardId.set(fd.chessboard_id, [])
      }
      floorsByChessboardId.get(fd.chessboard_id).push(fd)
    })

    const ratesMappingIndex = new Map()
    ratesData?.forEach((rate) => {
      ratesMappingIndex.set(rate.chessboard_id, rate)
    })

    return dataToProcess.map((row: any, index: number) => {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –º–∞–ø–ø–∏–Ω–≥–æ–≤
      const mapping = Array.isArray(row.chessboard_mapping)
        ? row.chessboard_mapping[0]
        : row.chessboard_mapping
      const nomenclatureMapping = Array.isArray(row.chessboard_nomenclature_mapping)
        ? row.chessboard_nomenclature_mapping[0]
        : row.chessboard_nomenclature_mapping

      // –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è O(1) –ø–æ–∏—Å–∫–∞ –≤–º–µ—Å—Ç–æ find/filter
      const docMapping = docMappingIndex.get(row.id)
      const documentation = docMapping?.documentation_versions?.documentations
      const docTag = documentation?.documentation_tags


      const rowFloorsData = floorsByChessboardId.get(row.id) || []

      const rateMapping = ratesMappingIndex.get(row.id)
      const workName = rateMapping?.rates?.work_name || ''
      const rateId = rateMapping?.rates?.id || ''
      const workUnit = rateMapping?.rates?.unit?.name || ''

      // –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –∞–≥—Ä–µ–≥–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —ç—Ç–∞–∂–µ–π –≤ –æ–¥–Ω–æ–º –ø—Ä–æ—Ö–æ–¥–µ
      let totalQuantityPd = 0
      let totalQuantitySpec = 0
      let totalQuantityRd = 0
      const floorNumbers: number[] = []
      const floorQuantities: Record<
        number,
        { quantityPd: string; quantitySpec: string; quantityRd: string }
      > = {}

      rowFloorsData.forEach((fd: any) => {
        totalQuantityPd += parseFloat(fd.quantityPd) || 0
        totalQuantitySpec += parseFloat(fd.quantitySpec) || 0
        totalQuantityRd += parseFloat(fd.quantityRd) || 0

        if (fd.floor_number !== null) {
          floorNumbers.push(fd.floor_number)
          floorQuantities[fd.floor_number] = {
            quantityPd: String(fd.quantityPd || ''),
            quantitySpec: String(fd.quantitySpec || ''),
            quantityRd: String(fd.quantityRd || ''),
          }
        }
      })

      // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω —ç—Ç–∞–∂–µ–π
      const sortedFloors = floorNumbers.sort((a, b) => a - b)
      const floorsRange =
        sortedFloors.length > 0
          ? sortedFloors.length === 1
            ? String(sortedFloors[0])
            : `${Math.min(...sortedFloors)}-${Math.max(...sortedFloors)}`
          : ''

      return {
        id: row.id,
        project: '', // –¢–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        projectId: appliedFilters.project_id,

        // –î–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        documentationSection: docTag ? docTag.name : '',
        documentationCode: documentation?.code || '',
        documentationProjectName: documentation?.project_name || '',
        documentationVersion: docMapping?.documentation_versions?.version_number
          ? String(docMapping.documentation_versions.version_number)
          : '',
        documentationVersionId: docMapping?.version_id || '',
        documentationCodeId: documentation?.id || '', // ID –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ VersionSelect

        // –î–∞–Ω–Ω—ã–µ –∫–æ—Ä–ø—É—Å–∞ –∏ –ª–æ–∫–∞—Ü–∏–∏ –∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –º–∞–ø–ø–∏–Ω–≥–æ–≤
        block: mapping?.blocks?.name || '',
        blockId: mapping?.block_id || '',
        floors: floorsRange || '',

        // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞—Ç—Ä–∞—Ç –∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –º–∞–ø–ø–∏–Ω–≥–æ–≤
        costCategory: mapping?.cost_categories ? mapping.cost_categories.name : '',
        costCategoryId: String(mapping?.cost_category_id || ''),
        costType: mapping?.detail_cost_categories?.name || '',
        costTypeId: String(mapping?.cost_type_id || ''),

        workName: workName,
        rateId: String(rateId || ''), // ID —Ä–∞—Å—Ü–µ–Ω–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ mapping
        workUnit: workUnit,
        location: mapping?.location?.name || '',
        locationId: String(mapping?.location_id || ''),

        // –ú–∞—Ç–µ—Ä–∏–∞–ª –∏ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        material: row.materials?.name || '',
        materialType: (row.material_type || '–ë–∞–∑–∞') as '–ë–∞–∑–∞' | '–î–æ–ø' | '–ò–ò',
        quantityPd: String(totalQuantityPd || 0),
        quantitySpec: String(totalQuantitySpec || 0),
        quantityRd: String(totalQuantityRd || 0),

        // –ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞ –∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫ –∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –º–∞–ø–ø–∏–Ω–≥–æ–≤
        nomenclature: nomenclatureMapping?.nomenclature?.name || '',
        nomenclatureId: nomenclatureMapping?.nomenclature_id || '',
        supplier: nomenclatureMapping?.supplier_name || '',
        nomenclatureSupplier: nomenclatureMapping?.supplier_name || '', // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ –¥–ª—è ML –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞

        unit: row.units?.name || '',
        unitId: row.unit_id || '',
        comments: '', // –¢–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏

        color: row.color || '',

        // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —ç—Ç–∞–∂–µ–π –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        floorQuantities: Object.keys(floorQuantities).length > 0 ? floorQuantities : undefined,
      }
    })
  }, [
    rawData, // –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    filteredRawData, // –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ batch processing
    documentationData,
    floorsData,
    ratesData,
    appliedFilters.project_id,
  ]) // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –¥–æ–±–∞–≤–ª–µ–Ω filteredRawData –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ statistics
  const statistics = useMemo(() => {
    if (!transformedData.length) {
      return {
        totalRows: 0,
        totalQuantityPd: 0,
        totalQuantitySpec: 0,
        totalQuantityRd: 0,
        uniqueMaterials: 0,
        uniqueNomenclature: 0,
      }
    }


    // –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –æ–¥–∏–Ω–æ—á–Ω—ã–π –ø—Ä–æ—Ö–æ–¥ –¥–ª—è –≤—Å–µ—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫ –≤–º–µ—Å—Ç–æ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö reduce
    const stats = transformedData.reduce(
      (acc, row) => {
        acc.totalQuantityPd += parseFloat(row.quantityPd) || 0
        acc.totalQuantitySpec += parseFloat(row.quantitySpec) || 0
        acc.totalQuantityRd += parseFloat(row.quantityRd) || 0

        if (row.material) acc.materials.add(row.material)
        if (row.nomenclatureCode) acc.nomenclatures.add(row.nomenclatureCode)

        return acc
      },
      {
        totalQuantityPd: 0,
        totalQuantitySpec: 0,
        totalQuantityRd: 0,
        materials: new Set(),
        nomenclatures: new Set(),
      },
    )

    const result = {
      totalRows: transformedData.length,
      totalQuantityPd: stats.totalQuantityPd,
      totalQuantitySpec: stats.totalQuantitySpec,
      totalQuantityRd: stats.totalQuantityRd,
      uniqueMaterials: stats.materials.size,
      uniqueNomenclature: stats.nomenclatures.size,
    }


    return result
  }, [transformedData]) // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π –º–∞—Å—Å–∏–≤ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π

  // LOG: —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
  if (renderCountRef.current > 10) {
    console.log('üìä useChessboardData final state:', { // LOG
      renderCount: renderCountRef.current,
      isLoading,
      rawDataLength: rawData?.length || 0,
      transformedDataLength: transformedData.length,
      performance: 'WARNING: Too many renders'
    }) // LOG
  }

  return {
    data: transformedData,
    rawData,
    isLoading,
    error,
    refetch,
    statistics,
  }
}

/**
 * –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏ —Å —ç—Ç–∞–∂–∞–º–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ –Ω–æ–º–µ—Ä–æ–≤ —ç—Ç–∞–∂–µ–π
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç—ã: "1", "1,2,3", "1-3", "2-4,6", "2-3,5-7"
 */
export function parseFloorsFromString(floorsStr: string): number[] {
  if (!floorsStr?.trim()) {
    return []
  }

  const floors: number[] = []
  const parts = floorsStr.split(',').map(part => part.trim()).filter(Boolean)

  for (const part of parts) {
    if (part.includes('-')) {
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω —Ç–∏–ø–∞ "2-4"
      const [start, end] = part.split('-').map(num => parseInt(num.trim(), 10))
      if (!isNaN(start) && !isNaN(end) && start <= end) {
        for (let i = start; i <= end; i++) {
          floors.push(i)
        }
      }
    } else {
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π —ç—Ç–∞–∂
      const floorNum = parseInt(part, 10)
      if (!isNaN(floorNum)) {
        floors.push(floorNum)
      }
    }
  }

  // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
  return [...new Set(floors)].sort((a, b) => a - b)
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ —ç—Ç–∞–∂–µ–π —Å–æ–¥–µ—Ä–∂–∏—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —ç—Ç–∞–∂–∏
 */
export function hasMultipleFloors(floorsStr: string): boolean {
  const floors = parseFloorsFromString(floorsStr)
  return floors.length > 1
}

/**
 * –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —ç—Ç–∞–∂–µ–π –∏–∑ –º–∞—Å—Å–∏–≤–∞ –Ω–æ–º–µ—Ä–æ–≤ —ç—Ç–∞–∂–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
export function formatFloorsForDisplay(floors: number[]): string {
  if (floors.length === 0) return ''
  if (floors.length === 1) return floors[0].toString()

  const sortedFloors = [...floors].sort((a, b) => a - b)

  // –ü—Ä–æ—Å—Ç–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ - –µ—Å–ª–∏ —ç—Ç–∞–∂–∏ –ø–æ–¥—Ä—è–¥, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ –¥–∏–∞–ø–∞–∑–æ–Ω
  if (sortedFloors.length > 2) {
    const isSequential = sortedFloors.every((floor, index) =>
      index === 0 || floor === sortedFloors[index - 1] + 1
    )

    if (isSequential) {
      return `${sortedFloors[0]}-${sortedFloors[sortedFloors.length - 1]}`
    }
  }

  return sortedFloors.join(',')
}

/**
 * –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –ø–æ —ç—Ç–∞–∂–∞–º –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç—Ä–æ–∫–∏ —ç—Ç–∞–∂–µ–π
 * @param floorsStr - –Ω–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Å —ç—Ç–∞–∂–∞–º–∏
 * @param currentQuantities - —Ç–µ–∫—É—â–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ —ç—Ç–∞–∂–∞–º (–µ—Å–ª–∏ –µ—Å—Ç—å)
 * @param totalQuantityPd - –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ –ü–î
 * @param totalQuantitySpec - –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –†–î
 * @param totalQuantityRd - –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ –ø–µ—Ä–µ—Å—á–µ—Ç—É –†–î
 * @returns –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞–º–∏ –ø–æ —ç—Ç–∞–∂–∞–º
 */
export function distributeQuantitiesAcrossFloors(
  floorsStr: string,
  currentQuantities: Record<number, any> = {},
  totalQuantityPd: number = 0,
  totalQuantitySpec: number = 0,
  totalQuantityRd: number = 0
): Record<number, any> {
  console.log('üè¢üìä distributeQuantitiesAcrossFloors called:', {
    floorsStr,
    currentQuantities,
    totalQuantityPd,
    totalQuantitySpec,
    totalQuantityRd
  }) // LOG: –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è

  const floors = parseFloorsFromString(floorsStr)
  console.log('üè¢üìä Parsed floors:', floors) // LOG: —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ —ç—Ç–∞–∂–∏

  if (floors.length === 0) {
    console.log('üè¢üìä No floors found, returning empty object') // LOG: –Ω–µ—Ç —ç—Ç–∞–∂–µ–π
    return {}
  }

  if (floors.length === 1) {
    // –û–¥–∏–Ω–æ—á–Ω—ã–π —ç—Ç–∞–∂ - –≤—Å–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–¥—É—Ç –Ω–∞ —ç—Ç–æ—Ç —ç—Ç–∞–∂
    const floor = floors[0]
    const result = {
      [floor]: {
        quantityPd: totalQuantityPd.toString(),
        quantitySpec: totalQuantitySpec.toString(),
        quantityRd: totalQuantityRd.toString()
      }
    }
    console.log('üè¢üìä Single floor distribution:', result) // LOG: —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –æ–¥–Ω–æ–º—É —ç—Ç–∞–∂—É
    return result
  }

  // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —ç—Ç–∞–∂–∏ - —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
  const floorQuantities: Record<number, any> = {}
  const quantityPerFloorPd = totalQuantityPd / floors.length
  const quantityPerFloorSpec = totalQuantitySpec / floors.length
  const quantityPerFloorRd = totalQuantityRd / floors.length

  console.log('üè¢üìä Calculating per-floor quantities:', {
    quantityPerFloorPd,
    quantityPerFloorSpec,
    quantityPerFloorRd
  }) // LOG: –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∞ —ç—Ç–∞–∂

  floors.forEach(floor => {
    floorQuantities[floor] = {
      quantityPd: quantityPerFloorPd.toString(),
      quantitySpec: quantityPerFloorSpec.toString(),
      quantityRd: quantityPerFloorRd.toString()
    }
  })

  console.log('üè¢üìä Multiple floors distribution result:', floorQuantities) // LOG: —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
  return floorQuantities
}

/**
 * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ–±—â–∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤ –∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ —ç—Ç–∞–∂–∞–º
 * @param floorQuantities - –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ —ç—Ç–∞–∂–∞–º
 * @returns –æ–±—ä–µ–∫—Ç —Å –æ–±—â–∏–º–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞–º–∏
 */
export function calculateTotalQuantitiesFromFloors(
  floorQuantities: Record<number, any>
): {
  totalQuantityPd: number
  totalQuantitySpec: number
  totalQuantityRd: number
} {
  let totalQuantityPd = 0
  let totalQuantitySpec = 0
  let totalQuantityRd = 0

  Object.values(floorQuantities).forEach(quantities => {
    totalQuantityPd += parseFloat(quantities.quantityPd || '0')
    totalQuantitySpec += parseFloat(quantities.quantitySpec || '0')
    totalQuantityRd += parseFloat(quantities.quantityRd || '0')
  })

  return {
    totalQuantityPd,
    totalQuantitySpec,
    totalQuantityRd
  }
}
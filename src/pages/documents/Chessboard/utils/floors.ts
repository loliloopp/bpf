/**
 * –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏ —Å —ç—Ç–∞–∂–∞–º–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ –Ω–æ–º–µ—Ä–æ–≤ —ç—Ç–∞–∂–µ–π
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç—ã:
 * - –û–¥–∏–Ω–æ—á–Ω—ã–µ: "1", "-3", "5"
 * - –ß–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é: "1,2,3", "-3,-2,-1"
 * - –î–∏–∞–ø–∞–∑–æ–Ω—ã: "1-3", "-3-7", "-1--3", "5-2"
 * - –°–º–µ—à–∞–Ω–Ω—ã–µ: "2-4,6", "-3--1,2,5-7"
 */
export function parseFloorsFromString(floorsStr: string): number[] {
  if (!floorsStr?.trim()) {
    return []
  }

  const floors: number[] = []
  const parts = floorsStr.split(',').map(part => part.trim()).filter(Boolean)

  for (const part of parts) {
    // Regex –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞: –∑–∞—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç "1-3", "-3-7", "-1--3", "5-2" –∏ —Ç.–¥.
    const rangeMatch = part.match(/^(-?\d+)-(-?\d+)$/)

    if (rangeMatch) {
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
      let start = parseInt(rangeMatch[1], 10)
      let end = parseInt(rangeMatch[2], 10)

      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–æ—Ä—è–¥–æ–∫ (–µ—Å–ª–∏ start > end, –º–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏)
      if (start > end) {
        [start, end] = [end, start]
      }

      if (!isNaN(start) && !isNaN(end)) {
        for (let i = start; i <= end; i++) {
          floors.push(i)
        }
      }
    } else {
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π —ç—Ç–∞–∂
      const floorNum = parseInt(part, 10)
      if (!isNaN(floorNum)) {
        floors.push(floorNum)
      }
    }
  }

  // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
  return [...new Set(floors)].sort((a, b) => a - b)
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ —ç—Ç–∞–∂–µ–π —Å–æ–¥–µ—Ä–∂–∏—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —ç—Ç–∞–∂–∏
 */
export function hasMultipleFloors(floorsStr: string): boolean {
  const floors = parseFloorsFromString(floorsStr)
  return floors.length > 1
}

/**
 * –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —ç—Ç–∞–∂–µ–π –∏–∑ –º–∞—Å—Å–∏–≤–∞ –Ω–æ–º–µ—Ä–æ–≤ —ç—Ç–∞–∂–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —ç—Ç–∞–∂–∏ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω—ã
 * –ü—Ä–∏–º–µ—Ä—ã: [-3,-2,-1,2,6] ‚Üí "-3--1,2,6", [1,2,3,5,6,8] ‚Üí "1-3,5-6,8"
 */
export function formatFloorsForDisplay(floors: number[]): string {
  if (floors.length === 0) return ''
  if (floors.length === 1) return floors[0].toString()

  const sortedFloors = [...floors].sort((a, b) => a - b)

  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —ç—Ç–∞–∂–∏
  const groups: number[][] = []
  let currentGroup: number[] = [sortedFloors[0]]

  for (let i = 1; i < sortedFloors.length; i++) {
    const prev = sortedFloors[i - 1]
    const curr = sortedFloors[i]

    if (curr === prev + 1) {
      // –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π —ç—Ç–∞–∂ - –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–µ–∫—É—â—É—é –≥—Ä—É–ø–ø—É
      currentGroup.push(curr)
    } else {
      // –†–∞–∑—Ä—ã–≤ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –≥—Ä—É–ø–ø—É –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é
      groups.push(currentGroup)
      currentGroup = [curr]
    }
  }
  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≥—Ä—É–ø–ø—É
  groups.push(currentGroup)

  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –≥—Ä—É–ø–ø—É
  const formatted = groups.map(group => {
    if (group.length === 1) {
      return group[0].toString()
    } else if (group.length === 2) {
      return `${group[0]},${group[1]}`
    } else {
      return `${group[0]}-${group[group.length - 1]}`
    }
  })

  return formatted.join(',')
}

/**
 * –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –ø–æ —ç—Ç–∞–∂–∞–º –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç—Ä–æ–∫–∏ —ç—Ç–∞–∂–µ–π
 * @param floorsStr - –Ω–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Å —ç—Ç–∞–∂–∞–º–∏
 * @param currentQuantities - —Ç–µ–∫—É—â–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ —ç—Ç–∞–∂–∞–º (–µ—Å–ª–∏ –µ—Å—Ç—å)
 * @param totalQuantityPd - –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ –ü–î
 * @param totalQuantitySpec - –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –†–î
 * @param totalQuantityRd - –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ –ø–µ—Ä–µ—Å—á–µ—Ç—É –†–î
 * @returns –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞–º–∏ –ø–æ —ç—Ç–∞–∂–∞–º
 */
export function distributeQuantitiesAcrossFloors(
  floorsStr: string,
  currentQuantities: Record<number, any> = {},
  totalQuantityPd: number = 0,
  totalQuantitySpec: number = 0,
  totalQuantityRd: number = 0
): Record<number, any> {
  console.log('üè¢üìä distributeQuantitiesAcrossFloors called:', {
    floorsStr,
    currentQuantities,
    totalQuantityPd,
    totalQuantitySpec,
    totalQuantityRd
  }) // LOG: –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è

  const floors = parseFloorsFromString(floorsStr)
  console.log('üè¢üìä Parsed floors:', floors) // LOG: —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ —ç—Ç–∞–∂–∏

  if (floors.length === 0) {
    console.log('üè¢üìä No floors found, returning empty object') // LOG: –Ω–µ—Ç —ç—Ç–∞–∂–µ–π
    return {}
  }

  if (floors.length === 1) {
    // –û–¥–∏–Ω–æ—á–Ω—ã–π —ç—Ç–∞–∂ - –≤—Å–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–¥—É—Ç –Ω–∞ —ç—Ç–æ—Ç —ç—Ç–∞–∂
    const floor = floors[0]
    const result = {
      [floor]: {
        quantityPd: totalQuantityPd.toString(),
        quantitySpec: totalQuantitySpec.toString(),
        quantityRd: totalQuantityRd.toString()
      }
    }
    console.log('üè¢üìä Single floor distribution:', result) // LOG: —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –æ–¥–Ω–æ–º—É —ç—Ç–∞–∂—É
    return result
  }

  // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —ç—Ç–∞–∂–∏ - —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
  const floorQuantities: Record<number, any> = {}
  const quantityPerFloorPd = totalQuantityPd / floors.length
  const quantityPerFloorSpec = totalQuantitySpec / floors.length
  const quantityPerFloorRd = totalQuantityRd / floors.length

  console.log('üè¢üìä Calculating per-floor quantities:', {
    quantityPerFloorPd,
    quantityPerFloorSpec,
    quantityPerFloorRd
  }) // LOG: –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∞ —ç—Ç–∞–∂

  floors.forEach(floor => {
    floorQuantities[floor] = {
      quantityPd: quantityPerFloorPd.toString(),
      quantitySpec: quantityPerFloorSpec.toString(),
      quantityRd: quantityPerFloorRd.toString()
    }
  })

  console.log('üè¢üìä Multiple floors distribution result:', floorQuantities) // LOG: —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
  return floorQuantities
}

/**
 * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ–±—â–∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤ –∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ —ç—Ç–∞–∂–∞–º
 * @param floorQuantities - –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ —ç—Ç–∞–∂–∞–º
 * @returns –æ–±—ä–µ–∫—Ç —Å –æ–±—â–∏–º–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞–º–∏
 */
export function calculateTotalQuantitiesFromFloors(
  floorQuantities: Record<number, any>
): {
  totalQuantityPd: number
  totalQuantitySpec: number
  totalQuantityRd: number
} {
  let totalQuantityPd = 0
  let totalQuantitySpec = 0
  let totalQuantityRd = 0

  Object.values(floorQuantities).forEach(quantities => {
    totalQuantityPd += parseFloat(quantities.quantityPd || '0')
    totalQuantitySpec += parseFloat(quantities.quantitySpec || '0')
    totalQuantityRd += parseFloat(quantities.quantityRd || '0')
  })

  return {
    totalQuantityPd,
    totalQuantitySpec,
    totalQuantityRd
  }
}